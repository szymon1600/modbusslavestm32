
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000616c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08006228  08006228  00007228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006514  08006514  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006514  08006514  00007514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800651c  0800651c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006520  08006520  00007520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006524  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000060  08006584  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08006584  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c68  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002483  00000000  00000000  00018cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0001b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b85  00000000  00000000  0001c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d92  00000000  00000000  0001cb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121d6  00000000  00000000  0003592f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a12b6  00000000  00000000  00047b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8dbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000e8e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ec894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006210 	.word	0x08006210

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08006210 	.word	0x08006210

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fd03 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f835 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f997 	bl	8000980 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f947 	bl	80008e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000656:	f000 f8f7 	bl	8000848 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800065a:	f000 f875 	bl	8000748 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx1, 1);
 800065e:	4910      	ldr	r1, [pc, #64]	@ (80006a0 <main+0x60>)
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <main+0x64>)
 8000662:	2201      	movs	r2, #1
 8000664:	0018      	movs	r0, r3
 8000666:	f003 f85f 	bl	8003728 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx2, 1);
 800066a:	490f      	ldr	r1, [pc, #60]	@ (80006a8 <main+0x68>)
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <main+0x6c>)
 800066e:	2201      	movs	r2, #1
 8000670:	0018      	movs	r0, r3
 8000672:	f003 f859 	bl	8003728 <HAL_UART_Receive_IT>

  // Uruchomienie PWM na kanale 1 (dioda)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <main+0x70>)
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f002 f81a 	bl	80026b4 <HAL_TIM_PWM_Start>

  // Wyślij instrukcje na start
  char* welcome_msg = "Wpisz liczbe 0-100 i nacisnij Enter aby ustawic jasnosc LED\r\nWpisz 'b' aby wlaczyc tryb oddychania\r\n";
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <main+0x74>)
 8000682:	607b      	str	r3, [r7, #4]
  //HAL_UART_Transmit(&huart1, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff fd3c 	bl	8000104 <strlen>
 800068c:	0003      	movs	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <main+0x6c>)
 8000698:	f002 ffa2 	bl	80035e0 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  continue;
 800069c:	46c0      	nop			@ (mov r8, r8)
  while (1)
 800069e:	e7fd      	b.n	800069c <main+0x5c>
 80006a0:	200001f0 	.word	0x200001f0
 80006a4:	200000c8 	.word	0x200000c8
 80006a8:	200001f1 	.word	0x200001f1
 80006ac:	2000015c 	.word	0x2000015c
 80006b0:	2000007c 	.word	0x2000007c
 80006b4:	08006228 	.word	0x08006228

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b093      	sub	sp, #76	@ 0x4c
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	2410      	movs	r4, #16
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2338      	movs	r3, #56	@ 0x38
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f005 f927 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ce:	003b      	movs	r3, r7
 80006d0:	0018      	movs	r0, r3
 80006d2:	2310      	movs	r3, #16
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f005 f920 	bl	800591c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2380      	movs	r3, #128	@ 0x80
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f867 	bl	80017b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	@ 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2240      	movs	r2, #64	@ 0x40
 80006fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	193b      	adds	r3, r7, r4
 8000708:	0018      	movs	r0, r3
 800070a:	f001 f89f 	bl	800184c <HAL_RCC_OscConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000712:	f000 fac9 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	003b      	movs	r3, r7
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072e:	003b      	movs	r3, r7
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fba4 	bl	8001e80 <HAL_RCC_ClockConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800073c:	f000 fab4 	bl	8000ca8 <Error_Handler>
  }
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b013      	add	sp, #76	@ 0x4c
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	@ 0x38
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	2328      	movs	r3, #40	@ 0x28
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	2310      	movs	r3, #16
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f005 f8df 	bl	800591c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	231c      	movs	r3, #28
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	0018      	movs	r0, r3
 8000764:	230c      	movs	r3, #12
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f005 f8d7 	bl	800591c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076e:	003b      	movs	r3, r7
 8000770:	0018      	movs	r0, r3
 8000772:	231c      	movs	r3, #28
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f005 f8d0 	bl	800591c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077c:	4b30      	ldr	r3, [pc, #192]	@ (8000840 <MX_TIM2_Init+0xf8>)
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	05d2      	lsls	r2, r2, #23
 8000782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000784:	4b2e      	ldr	r3, [pc, #184]	@ (8000840 <MX_TIM2_Init+0xf8>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b2d      	ldr	r3, [pc, #180]	@ (8000840 <MX_TIM2_Init+0xf8>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000790:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <MX_TIM2_Init+0xf8>)
 8000792:	4a2c      	ldr	r2, [pc, #176]	@ (8000844 <MX_TIM2_Init+0xfc>)
 8000794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <MX_TIM2_Init+0xf8>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <MX_TIM2_Init+0xf8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a2:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <MX_TIM2_Init+0xf8>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fecd 	bl	8002544 <HAL_TIM_Base_Init>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 fa7b 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b2:	2128      	movs	r1, #40	@ 0x28
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	0152      	lsls	r2, r2, #5
 80007ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007bc:	187a      	adds	r2, r7, r1
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_TIM2_Init+0xf8>)
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 f960 	bl	8002a88 <HAL_TIM_ConfigClockSource>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80007cc:	f000 fa6c 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_TIM2_Init+0xf8>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 ff0e 	bl	80025f4 <HAL_TIM_PWM_Init>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007dc:	f000 fa64 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	211c      	movs	r1, #28
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ee:	187a      	adds	r2, r7, r1
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_TIM2_Init+0xf8>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 fe2f 	bl	8003458 <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80007fe:	f000 fa53 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000802:	003b      	movs	r3, r7
 8000804:	2260      	movs	r2, #96	@ 0x60
 8000806:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080e:	003b      	movs	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000814:	003b      	movs	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081a:	0039      	movs	r1, r7
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_TIM2_Init+0xf8>)
 800081e:	2200      	movs	r2, #0
 8000820:	0018      	movs	r0, r3
 8000822:	f002 f831 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800082a:	f000 fa3d 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800082e:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <MX_TIM2_Init+0xf8>)
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fa7f 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b00e      	add	sp, #56	@ 0x38
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	2000007c 	.word	0x2000007c
 8000844:	0000c350 	.word	0x0000c350

08000848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800084c:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 800084e:	4a24      	ldr	r2, [pc, #144]	@ (80008e0 <MX_USART1_UART_Init+0x98>)
 8000850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000852:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 8000854:	22e1      	movs	r2, #225	@ 0xe1
 8000856:	0252      	lsls	r2, r2, #9
 8000858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 8000892:	0018      	movs	r0, r3
 8000894:	f002 fe4e 	bl	8003534 <HAL_UART_Init>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 fa04 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 fe9b 	bl	80055e0 <HAL_UARTEx_SetTxFifoThreshold>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f9fb 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f004 fed2 	bl	8005660 <HAL_UARTEx_SetRxFifoThreshold>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f9f2 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <MX_USART1_UART_Init+0x94>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 fe50 	bl	800556c <HAL_UARTEx_DisableFifoMode>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f9ea 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	200000c8 	.word	0x200000c8
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 80008ea:	4a24      	ldr	r2, [pc, #144]	@ (800097c <MX_USART2_UART_Init+0x98>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 80008f0:	22e1      	movs	r2, #225	@ 0xe1
 80008f2:	0252      	lsls	r2, r2, #9
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 800092e:	0018      	movs	r0, r3
 8000930:	f002 fe00 	bl	8003534 <HAL_UART_Init>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f9b6 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 800093e:	2100      	movs	r1, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f004 fe4d 	bl	80055e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f9ad 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 8000950:	2100      	movs	r1, #0
 8000952:	0018      	movs	r0, r3
 8000954:	f004 fe84 	bl	8005660 <HAL_UARTEx_SetRxFifoThreshold>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f9a4 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 8000962:	0018      	movs	r0, r3
 8000964:	f004 fe02 	bl	800556c <HAL_UARTEx_DisableFifoMode>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f99c 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	2000015c 	.word	0x2000015c
 800097c:	40004400 	.word	0x40004400

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b089      	sub	sp, #36	@ 0x24
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	240c      	movs	r4, #12
 8000988:	193b      	adds	r3, r7, r4
 800098a:	0018      	movs	r0, r3
 800098c:	2314      	movs	r3, #20
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f004 ffc3 	bl	800591c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 8000998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800099a:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 800099c:	2104      	movs	r1, #4
 800099e:	430a      	orrs	r2, r1
 80009a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009a2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 80009a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009a6:	2204      	movs	r2, #4
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 80009b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 80009b4:	2120      	movs	r1, #32
 80009b6:	430a      	orrs	r2, r1
 80009b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 80009bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009be:	2220      	movs	r2, #32
 80009c0:	4013      	ands	r3, r2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 80009c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_GPIO_Init+0x9c>)
 80009d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_Pin_GPIO_Port, LED_GREEN_Pin_Pin, GPIO_PIN_RESET);
 80009de:	23a0      	movs	r3, #160	@ 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fec6 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin_Pin;
 80009ec:	0021      	movs	r1, r4
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2240      	movs	r2, #64	@ 0x40
 80009f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2201      	movs	r2, #1
 80009f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_Pin_GPIO_Port, &GPIO_InitStruct);
 8000a06:	187a      	adds	r2, r7, r1
 8000a08:	23a0      	movs	r3, #160	@ 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 fd4e 	bl	80014b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b009      	add	sp, #36	@ 0x24
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	40021000 	.word	0x40021000

08000a20 <SetBrightness>:

/* USER CODE BEGIN 4 */
void SetBrightness(uint8_t percent)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b091      	sub	sp, #68	@ 0x44
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	701a      	strb	r2, [r3, #0]
  if (percent > 100) percent = 100;
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b64      	cmp	r3, #100	@ 0x64
 8000a32:	d902      	bls.n	8000a3a <SetBrightness+0x1a>
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	2264      	movs	r2, #100	@ 0x64
 8000a38:	701a      	strb	r2, [r3, #0]

  // Przelicz procent na wartość PWM (0-50000)
  uint32_t pwm_val = (uint32_t)((percent * 50000) / 100);
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	0013      	movs	r3, r2
 8000a40:	015b      	lsls	r3, r3, #5
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	189b      	adds	r3, r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Ustaw PWM
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_val);
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <SetBrightness+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a52:	635a      	str	r2, [r3, #52]	@ 0x34

  // Wyślij potwierdzenie
  char response[50];
  sprintf(response, "Jasnosc ustawiona na: %d%%\r\n", percent);
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	490b      	ldr	r1, [pc, #44]	@ (8000a88 <SetBrightness+0x68>)
 8000a5a:	2408      	movs	r4, #8
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f004 ff3a 	bl	80058d8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fb4c 	bl	8000104 <strlen>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	2301      	movs	r3, #1
 8000a72:	425b      	negs	r3, r3
 8000a74:	1939      	adds	r1, r7, r4
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <SetBrightness+0x6c>)
 8000a78:	f002 fdb2 	bl	80035e0 <HAL_UART_Transmit>
}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b011      	add	sp, #68	@ 0x44
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	2000007c 	.word	0x2000007c
 8000a88:	08006290 	.word	0x08006290
 8000a8c:	200000c8 	.word	0x200000c8

08000a90 <ProcessInput>:

void ProcessInput(uint8_t data)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	0002      	movs	r2, r0
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	701a      	strb	r2, [r3, #0]
  // Echo znaku
  HAL_UART_Transmit(&huart2, &data, 1, HAL_MAX_DELAY);
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	1df9      	adds	r1, r7, #7
 8000aa2:	484f      	ldr	r0, [pc, #316]	@ (8000be0 <ProcessInput+0x150>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f002 fd9b 	bl	80035e0 <HAL_UART_Transmit>

  if (data == '\r' || data == '\n') // Enter
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b0d      	cmp	r3, #13
 8000ab0:	d003      	beq.n	8000aba <ProcessInput+0x2a>
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d147      	bne.n	8000b4a <ProcessInput+0xba>
  {
    if (input_index > 0)
 8000aba:	4b4a      	ldr	r3, [pc, #296]	@ (8000be4 <ProcessInput+0x154>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d03b      	beq.n	8000b3a <ProcessInput+0xaa>
    {
      input_buffer[input_index] = '\0'; // Zakończ string
 8000ac2:	4b48      	ldr	r3, [pc, #288]	@ (8000be4 <ProcessInput+0x154>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	4b47      	ldr	r3, [pc, #284]	@ (8000be8 <ProcessInput+0x158>)
 8000aca:	2100      	movs	r1, #0
 8000acc:	5499      	strb	r1, [r3, r2]

      // Sprawdź czy to komenda 'b' dla trybu oddychania
      if (input_buffer[0] == 'b' && input_index == 1)
 8000ace:	4b46      	ldr	r3, [pc, #280]	@ (8000be8 <ProcessInput+0x158>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b62      	cmp	r3, #98	@ 0x62
 8000ad4:	d10e      	bne.n	8000af4 <ProcessInput+0x64>
 8000ad6:	4b43      	ldr	r3, [pc, #268]	@ (8000be4 <ProcessInput+0x154>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10a      	bne.n	8000af4 <ProcessInput+0x64>
      {
        breathing_mode = 1;
 8000ade:	4b43      	ldr	r3, [pc, #268]	@ (8000bec <ProcessInput+0x15c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nTryb oddychania wlaczony\r\n", 28, HAL_MAX_DELAY);
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	4941      	ldr	r1, [pc, #260]	@ (8000bf0 <ProcessInput+0x160>)
 8000aea:	483d      	ldr	r0, [pc, #244]	@ (8000be0 <ProcessInput+0x150>)
 8000aec:	221c      	movs	r2, #28
 8000aee:	f002 fd77 	bl	80035e0 <HAL_UART_Transmit>
 8000af2:	e01f      	b.n	8000b34 <ProcessInput+0xa4>
      }
      else
      {
        // Konwertuj na liczbę
        int value = atoi((char*)input_buffer);
 8000af4:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <ProcessInput+0x158>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f004 fe52 	bl	80057a0 <atoi>
 8000afc:	0003      	movs	r3, r0
 8000afe:	60fb      	str	r3, [r7, #12]
        if (value >= 0 && value <= 100)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0f      	blt.n	8000b26 <ProcessInput+0x96>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b64      	cmp	r3, #100	@ 0x64
 8000b0a:	dc0c      	bgt.n	8000b26 <ProcessInput+0x96>
        {
          breathing_mode = 0; // Wyłącz tryb oddychania
 8000b0c:	4b37      	ldr	r3, [pc, #220]	@ (8000bec <ProcessInput+0x15c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
          brightness_percent = value;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b37      	ldr	r3, [pc, #220]	@ (8000bf4 <ProcessInput+0x164>)
 8000b18:	701a      	strb	r2, [r3, #0]
          SetBrightness(brightness_percent);
 8000b1a:	4b36      	ldr	r3, [pc, #216]	@ (8000bf4 <ProcessInput+0x164>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff ff7e 	bl	8000a20 <SetBrightness>
 8000b24:	e006      	b.n	8000b34 <ProcessInput+0xa4>
        }
        else
        {
          HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nBledna wartosc! Wpisz liczbe 0-100\r\n", 38, HAL_MAX_DELAY);
 8000b26:	2301      	movs	r3, #1
 8000b28:	425b      	negs	r3, r3
 8000b2a:	4933      	ldr	r1, [pc, #204]	@ (8000bf8 <ProcessInput+0x168>)
 8000b2c:	482c      	ldr	r0, [pc, #176]	@ (8000be0 <ProcessInput+0x150>)
 8000b2e:	2226      	movs	r2, #38	@ 0x26
 8000b30:	f002 fd56 	bl	80035e0 <HAL_UART_Transmit>
        }
      }

      input_index = 0; // Resetuj bufor
 8000b34:	4b2b      	ldr	r3, [pc, #172]	@ (8000be4 <ProcessInput+0x154>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n> ", 4, HAL_MAX_DELAY);
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	425b      	negs	r3, r3
 8000b3e:	492f      	ldr	r1, [pc, #188]	@ (8000bfc <ProcessInput+0x16c>)
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <ProcessInput+0x150>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	f002 fd4c 	bl	80035e0 <HAL_UART_Transmit>
 8000b48:	e045      	b.n	8000bd6 <ProcessInput+0x146>
  }
  else if (data == 8 || data == 127) // Backspace
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d003      	beq.n	8000b5a <ProcessInput+0xca>
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b58:	d111      	bne.n	8000b7e <ProcessInput+0xee>
  {
    if (input_index > 0)
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <ProcessInput+0x154>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d039      	beq.n	8000bd6 <ProcessInput+0x146>
    {
      input_index--;
 8000b62:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <ProcessInput+0x154>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <ProcessInput+0x154>)
 8000b6c:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)" \b", 2, HAL_MAX_DELAY);
 8000b6e:	2301      	movs	r3, #1
 8000b70:	425b      	negs	r3, r3
 8000b72:	4923      	ldr	r1, [pc, #140]	@ (8000c00 <ProcessInput+0x170>)
 8000b74:	481a      	ldr	r0, [pc, #104]	@ (8000be0 <ProcessInput+0x150>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	f002 fd32 	bl	80035e0 <HAL_UART_Transmit>
    if (input_index > 0)
 8000b7c:	e02b      	b.n	8000bd6 <ProcessInput+0x146>
    }
  }
  else if (data >= '0' && data <= '9' && input_index < sizeof(input_buffer) - 1)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b84:	d913      	bls.n	8000bae <ProcessInput+0x11e>
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b39      	cmp	r3, #57	@ 0x39
 8000b8c:	d80f      	bhi.n	8000bae <ProcessInput+0x11e>
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <ProcessInput+0x154>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b08      	cmp	r3, #8
 8000b94:	d80b      	bhi.n	8000bae <ProcessInput+0x11e>
  {
    input_buffer[input_index++] = data;
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <ProcessInput+0x154>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	b2d1      	uxtb	r1, r2
 8000b9e:	4a11      	ldr	r2, [pc, #68]	@ (8000be4 <ProcessInput+0x154>)
 8000ba0:	7011      	strb	r1, [r2, #0]
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	7819      	ldrb	r1, [r3, #0]
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <ProcessInput+0x158>)
 8000baa:	5499      	strb	r1, [r3, r2]
 8000bac:	e013      	b.n	8000bd6 <ProcessInput+0x146>
  }
  else if (data == 'b' && input_index < sizeof(input_buffer) - 1)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b62      	cmp	r3, #98	@ 0x62
 8000bb4:	d10f      	bne.n	8000bd6 <ProcessInput+0x146>
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <ProcessInput+0x154>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b08      	cmp	r3, #8
 8000bbc:	d80b      	bhi.n	8000bd6 <ProcessInput+0x146>
  {
    input_buffer[input_index++] = data;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <ProcessInput+0x154>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	b2d1      	uxtb	r1, r2
 8000bc6:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <ProcessInput+0x154>)
 8000bc8:	7011      	strb	r1, [r2, #0]
 8000bca:	001a      	movs	r2, r3
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	7819      	ldrb	r1, [r3, #0]
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <ProcessInput+0x158>)
 8000bd2:	5499      	strb	r1, [r3, r2]
  }
}
 8000bd4:	e7ff      	b.n	8000bd6 <ProcessInput+0x146>
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b004      	add	sp, #16
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	2000015c 	.word	0x2000015c
 8000be4:	200001fe 	.word	0x200001fe
 8000be8:	200001f4 	.word	0x200001f4
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	080062b0 	.word	0x080062b0
 8000bf4:	20000001 	.word	0x20000001
 8000bf8:	080062d0 	.word	0x080062d0
 8000bfc:	080062f8 	.word	0x080062f8
 8000c00:	08006300 	.word	0x08006300

08000c04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_UART_RxCpltCallback+0x8c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d10b      	bne.n	8000c2e <HAL_UART_RxCpltCallback+0x2a>
  {
    ProcessInput(rx2);
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <HAL_UART_RxCpltCallback+0x90>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff ff38 	bl	8000a90 <ProcessInput>
    HAL_UART_Receive_IT(&huart1, &rx2, 1);
 8000c20:	491c      	ldr	r1, [pc, #112]	@ (8000c94 <HAL_UART_RxCpltCallback+0x90>)
 8000c22:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <HAL_UART_RxCpltCallback+0x94>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	0018      	movs	r0, r3
 8000c28:	f002 fd7e 	bl	8003728 <HAL_UART_Receive_IT>
    }

    HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
    HAL_UART_Receive_IT(&huart2, &rx1, 1);
  }
}
 8000c2c:	e02c      	b.n	8000c88 <HAL_UART_RxCpltCallback+0x84>
  else if (huart->Instance == USART2)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1a      	ldr	r2, [pc, #104]	@ (8000c9c <HAL_UART_RxCpltCallback+0x98>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d127      	bne.n	8000c88 <HAL_UART_RxCpltCallback+0x84>
    if (rx1 >= '0' && rx1 <= '9')
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_UART_RxCpltCallback+0x9c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c3e:	d911      	bls.n	8000c64 <HAL_UART_RxCpltCallback+0x60>
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_UART_RxCpltCallback+0x9c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b39      	cmp	r3, #57	@ 0x39
 8000c46:	d80d      	bhi.n	8000c64 <HAL_UART_RxCpltCallback+0x60>
      tx = rx1;
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_UART_RxCpltCallback+0x9c>)
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	701a      	strb	r2, [r3, #0]
      if (tx > '9') tx = '0';
 8000c52:	000a      	movs	r2, r1
 8000c54:	18bb      	adds	r3, r7, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b39      	cmp	r3, #57	@ 0x39
 8000c5a:	d907      	bls.n	8000c6c <HAL_UART_RxCpltCallback+0x68>
 8000c5c:	18bb      	adds	r3, r7, r2
 8000c5e:	2230      	movs	r2, #48	@ 0x30
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e003      	b.n	8000c6c <HAL_UART_RxCpltCallback+0x68>
      tx = '!';
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2221      	movs	r2, #33	@ 0x21
 8000c6a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	220f      	movs	r2, #15
 8000c72:	18b9      	adds	r1, r7, r2
 8000c74:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <HAL_UART_RxCpltCallback+0x94>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	f002 fcb2 	bl	80035e0 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, &rx1, 1);
 8000c7c:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <HAL_UART_RxCpltCallback+0x9c>)
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <HAL_UART_RxCpltCallback+0xa0>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	0018      	movs	r0, r3
 8000c84:	f002 fd50 	bl	8003728 <HAL_UART_Receive_IT>
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b004      	add	sp, #16
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40013800 	.word	0x40013800
 8000c94:	200001f1 	.word	0x200001f1
 8000c98:	200000c8 	.word	0x200000c8
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	200001f0 	.word	0x200001f0
 8000ca4:	2000015c 	.word	0x2000015c

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	0549      	lsls	r1, r1, #21
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000ce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	055b      	lsls	r3, r3, #21
 8000ce8:	4013      	ands	r3, r2
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d10b      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <HAL_TIM_Base_MspInit+0x34>)
 8000d12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_TIM_Base_MspInit+0x34>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <HAL_TIM_Base_MspInit+0x34>)
 8000d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d20:	2201      	movs	r2, #1
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	240c      	movs	r4, #12
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	0018      	movs	r0, r3
 8000d42:	2314      	movs	r3, #20
 8000d44:	001a      	movs	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f004 fde8 	bl	800591c <memset>
  if(htim->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2380      	movs	r3, #128	@ 0x80
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d122      	bne.n	8000d9e <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <HAL_TIM_MspPostInit+0x74>)
 8000d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_TIM_MspPostInit+0x74>)
 8000d5e:	2101      	movs	r1, #1
 8000d60:	430a      	orrs	r2, r1
 8000d62:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d64:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <HAL_TIM_MspPostInit+0x74>)
 8000d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d70:	0021      	movs	r1, r4
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2220      	movs	r2, #32
 8000d76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	187a      	adds	r2, r7, r1
 8000d92:	23a0      	movs	r3, #160	@ 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f000 fb89 	bl	80014b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b009      	add	sp, #36	@ 0x24
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b099      	sub	sp, #100	@ 0x64
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	234c      	movs	r3, #76	@ 0x4c
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	0018      	movs	r0, r3
 8000dba:	2314      	movs	r3, #20
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f004 fdac 	bl	800591c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	2418      	movs	r4, #24
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	2334      	movs	r3, #52	@ 0x34
 8000dcc:	001a      	movs	r2, r3
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f004 fda4 	bl	800591c <memset>
  if(huart->Instance==USART1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8000f10 <HAL_UART_MspInit+0x164>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d146      	bne.n	8000e6c <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	0018      	movs	r0, r3
 8000dee:	f001 f9f1 	bl	80021d4 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000df6:	f7ff ff57 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfa:	4b46      	ldr	r3, [pc, #280]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000dfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dfe:	4b45      	ldr	r3, [pc, #276]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	01c9      	lsls	r1, r1, #7
 8000e04:	430a      	orrs	r2, r1
 8000e06:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e08:	4b42      	ldr	r3, [pc, #264]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	01db      	lsls	r3, r3, #7
 8000e10:	4013      	ands	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b3f      	ldr	r3, [pc, #252]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e22:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e26:	2204      	movs	r2, #4
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e2e:	214c      	movs	r1, #76	@ 0x4c
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2230      	movs	r2, #48	@ 0x30
 8000e34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2202      	movs	r2, #2
 8000e3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	4a31      	ldr	r2, [pc, #196]	@ (8000f18 <HAL_UART_MspInit+0x16c>)
 8000e52:	0019      	movs	r1, r3
 8000e54:	0010      	movs	r0, r2
 8000e56:	f000 fb2b 	bl	80014b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	201b      	movs	r0, #27
 8000e60:	f000 fa28 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e64:	201b      	movs	r0, #27
 8000e66:	f000 fa3a 	bl	80012de <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e6a:	e04c      	b.n	8000f06 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2a      	ldr	r2, [pc, #168]	@ (8000f1c <HAL_UART_MspInit+0x170>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d147      	bne.n	8000f06 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e76:	2118      	movs	r1, #24
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	0018      	movs	r0, r3
 8000e88:	f001 f9a4 	bl	80021d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000e90:	f7ff ff0a 	bl	8000ca8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e98:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	0289      	lsls	r1, r1, #10
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	029b      	lsls	r3, r3, #10
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_UART_MspInit+0x168>)
 8000ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ec8:	214c      	movs	r1, #76	@ 0x4c
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	220c      	movs	r2, #12
 8000ece:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2201      	movs	r2, #1
 8000eda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	187a      	adds	r2, r7, r1
 8000eea:	23a0      	movs	r3, #160	@ 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 fadd 	bl	80014b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	201c      	movs	r0, #28
 8000efc:	f000 f9da 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f00:	201c      	movs	r0, #28
 8000f02:	f000 f9ec 	bl	80012de <HAL_NVIC_EnableIRQ>
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b019      	add	sp, #100	@ 0x64
 8000f0c:	bd90      	pop	{r4, r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	40013800 	.word	0x40013800
 8000f14:	40021000 	.word	0x40021000
 8000f18:	50000800 	.word	0x50000800
 8000f1c:	40004400 	.word	0x40004400

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	e7fd      	b.n	8000f24 <NMI_Handler+0x4>

08000f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	e7fd      	b.n	8000f2c <HardFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f8ec 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <USART1_IRQHandler+0x14>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 fc42 	bl	80037e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	200000c8 	.word	0x200000c8

08000f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <USART2_IRQHandler+0x14>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 fc36 	bl	80037e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	2000015c 	.word	0x2000015c

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	18d3      	adds	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f004 fcba 	bl	800592c <__errno>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	425b      	negs	r3, r3
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	18d2      	adds	r2, r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <_sbrk+0x64>)
 8000fd4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b006      	add	sp, #24
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20009000 	.word	0x20009000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	20000200 	.word	0x20000200
 8000fec:	20000350 	.word	0x20000350

08000ff0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001000:	f7ff fff6 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800102a:	f004 fc85 	bl	8005938 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800102e:	f7ff fb07 	bl	8000640 <main>

08001032 <LoopForever>:

LoopForever:
  b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   r0, =_estack
 8001034:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001040:	08006524 	.word	0x08006524
  ldr r2, =_sbss
 8001044:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001048:	20000350 	.word	0x20000350

0800104c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_COMP_IRQHandler>
	...

08001050 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <HAL_Init+0x3c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_Init+0x3c>)
 8001062:	2180      	movs	r1, #128	@ 0x80
 8001064:	0049      	lsls	r1, r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f810 	bl	8001090 <HAL_InitTick>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d003      	beq.n	800107c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e001      	b.n	8001080 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fe1a 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	781b      	ldrb	r3, [r3, #0]
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40022000 	.word	0x40022000

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	230f      	movs	r3, #15
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <HAL_InitTick+0x88>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d02b      	beq.n	8001100 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_InitTick+0x8c>)
 80010aa:	681c      	ldr	r4, [r3, #0]
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <HAL_InitTick+0x88>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	0019      	movs	r1, r3
 80010b2:	23fa      	movs	r3, #250	@ 0xfa
 80010b4:	0098      	lsls	r0, r3, #2
 80010b6:	f7ff f837 	bl	8000128 <__udivsi3>
 80010ba:	0003      	movs	r3, r0
 80010bc:	0019      	movs	r1, r3
 80010be:	0020      	movs	r0, r4
 80010c0:	f7ff f832 	bl	8000128 <__udivsi3>
 80010c4:	0003      	movs	r3, r0
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 f919 	bl	80012fe <HAL_SYSTICK_Config>
 80010cc:	1e03      	subs	r3, r0, #0
 80010ce:	d112      	bne.n	80010f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d80a      	bhi.n	80010ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	2301      	movs	r3, #1
 80010da:	425b      	negs	r3, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 f8e8 	bl	80012b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_InitTick+0x90>)
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e00d      	b.n	8001108 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010ec:	230f      	movs	r3, #15
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e008      	b.n	8001108 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f6:	230f      	movs	r3, #15
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e003      	b.n	8001108 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001108:	230f      	movs	r3, #15
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	781b      	ldrb	r3, [r3, #0]
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b005      	add	sp, #20
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	2000000c 	.word	0x2000000c
 800111c:	20000004 	.word	0x20000004
 8001120:	20000008 	.word	0x20000008

08001124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	001a      	movs	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	18d2      	adds	r2, r2, r3
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_IncTick+0x20>)
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000204 	.word	0x20000204

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b02      	ldr	r3, [pc, #8]	@ (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	20000204 	.word	0x20000204

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	0002      	movs	r2, r0
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b7f      	cmp	r3, #127	@ 0x7f
 800116e:	d809      	bhi.n	8001184 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	001a      	movs	r2, r3
 8001176:	231f      	movs	r3, #31
 8001178:	401a      	ands	r2, r3
 800117a:	4b04      	ldr	r3, [pc, #16]	@ (800118c <__NVIC_EnableIRQ+0x30>)
 800117c:	2101      	movs	r1, #1
 800117e:	4091      	lsls	r1, r2
 8001180:	000a      	movs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	0002      	movs	r2, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80011a4:	d828      	bhi.n	80011f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001264 <__NVIC_SetPriority+0xd4>)
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	33c0      	adds	r3, #192	@ 0xc0
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	589b      	ldr	r3, [r3, r2]
 80011b6:	1dfa      	adds	r2, r7, #7
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	0011      	movs	r1, r2
 80011bc:	2203      	movs	r2, #3
 80011be:	400a      	ands	r2, r1
 80011c0:	00d2      	lsls	r2, r2, #3
 80011c2:	21ff      	movs	r1, #255	@ 0xff
 80011c4:	4091      	lsls	r1, r2
 80011c6:	000a      	movs	r2, r1
 80011c8:	43d2      	mvns	r2, r2
 80011ca:	401a      	ands	r2, r3
 80011cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	22ff      	movs	r2, #255	@ 0xff
 80011d4:	401a      	ands	r2, r3
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0018      	movs	r0, r3
 80011dc:	2303      	movs	r3, #3
 80011de:	4003      	ands	r3, r0
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e4:	481f      	ldr	r0, [pc, #124]	@ (8001264 <__NVIC_SetPriority+0xd4>)
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	430a      	orrs	r2, r1
 80011f0:	33c0      	adds	r3, #192	@ 0xc0
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011f6:	e031      	b.n	800125c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001268 <__NVIC_SetPriority+0xd8>)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0019      	movs	r1, r3
 8001200:	230f      	movs	r3, #15
 8001202:	400b      	ands	r3, r1
 8001204:	3b08      	subs	r3, #8
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3306      	adds	r3, #6
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1dfa      	adds	r2, r7, #7
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	0011      	movs	r1, r2
 8001218:	2203      	movs	r2, #3
 800121a:	400a      	ands	r2, r1
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	21ff      	movs	r1, #255	@ 0xff
 8001220:	4091      	lsls	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	43d2      	mvns	r2, r2
 8001226:	401a      	ands	r2, r3
 8001228:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	22ff      	movs	r2, #255	@ 0xff
 8001230:	401a      	ands	r2, r3
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	0018      	movs	r0, r3
 8001238:	2303      	movs	r3, #3
 800123a:	4003      	ands	r3, r0
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001240:	4809      	ldr	r0, [pc, #36]	@ (8001268 <__NVIC_SetPriority+0xd8>)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	001c      	movs	r4, r3
 8001248:	230f      	movs	r3, #15
 800124a:	4023      	ands	r3, r4
 800124c:	3b08      	subs	r3, #8
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	430a      	orrs	r2, r1
 8001252:	3306      	adds	r3, #6
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	18c3      	adds	r3, r0, r3
 8001258:	3304      	adds	r3, #4
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b003      	add	sp, #12
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	045b      	lsls	r3, r3, #17
 800127c:	429a      	cmp	r2, r3
 800127e:	d301      	bcc.n	8001284 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001280:	2301      	movs	r3, #1
 8001282:	e010      	b.n	80012a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <SysTick_Config+0x44>)
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	3a01      	subs	r2, #1
 800128a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128c:	2301      	movs	r3, #1
 800128e:	425b      	negs	r3, r3
 8001290:	2103      	movs	r1, #3
 8001292:	0018      	movs	r0, r3
 8001294:	f7ff ff7c 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x44>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x44>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	210f      	movs	r1, #15
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	1c02      	adds	r2, r0, #0
 80012c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff5d 	bl	8001190 <__NVIC_SetPriority>
}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	0002      	movs	r2, r0
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff33 	bl	800115c <__NVIC_EnableIRQ>
}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ffaf 	bl	800126c <SysTick_Config>
 800130e:	0003      	movs	r3, r0
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e050      	b.n	80013cc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2225      	movs	r2, #37	@ 0x25
 800132e:	5c9b      	ldrb	r3, [r3, r2]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d008      	beq.n	8001348 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2204      	movs	r2, #4
 800133a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2224      	movs	r2, #36	@ 0x24
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e041      	b.n	80013cc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	210e      	movs	r1, #14
 8001354:	438a      	bics	r2, r1
 8001356:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	491c      	ldr	r1, [pc, #112]	@ (80013d4 <HAL_DMA_Abort+0xbc>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2101      	movs	r1, #1
 8001374:	438a      	bics	r2, r1
 8001376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <HAL_DMA_Abort+0xc0>)
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	221c      	movs	r2, #28
 8001382:	4013      	ands	r3, r2
 8001384:	2201      	movs	r2, #1
 8001386:	409a      	lsls	r2, r3
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_DMA_Abort+0xc0>)
 800138a:	430a      	orrs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001396:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00c      	beq.n	80013ba <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013aa:	490a      	ldr	r1, [pc, #40]	@ (80013d4 <HAL_DMA_Abort+0xbc>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80013b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2225      	movs	r2, #37	@ 0x25
 80013be:	2101      	movs	r1, #1
 80013c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2224      	movs	r2, #36	@ 0x24
 80013c6:	2100      	movs	r1, #0
 80013c8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	fffffeff 	.word	0xfffffeff
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e4:	210f      	movs	r1, #15
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2225      	movs	r2, #37	@ 0x25
 80013f0:	5c9b      	ldrb	r3, [r3, r2]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d006      	beq.n	8001406 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2204      	movs	r2, #4
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	e049      	b.n	800149a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	210e      	movs	r1, #14
 8001412:	438a      	bics	r2, r1
 8001414:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	438a      	bics	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	491d      	ldr	r1, [pc, #116]	@ (80014a8 <HAL_DMA_Abort_IT+0xcc>)
 8001432:	400a      	ands	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HAL_DMA_Abort_IT+0xd0>)
 8001438:	6859      	ldr	r1, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	221c      	movs	r2, #28
 8001440:	4013      	ands	r3, r2
 8001442:	2201      	movs	r2, #1
 8001444:	409a      	lsls	r2, r3
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_DMA_Abort_IT+0xd0>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001454:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00c      	beq.n	8001478 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001468:	490f      	ldr	r1, [pc, #60]	@ (80014a8 <HAL_DMA_Abort_IT+0xcc>)
 800146a:	400a      	ands	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001476:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2225      	movs	r2, #37	@ 0x25
 800147c:	2101      	movs	r1, #1
 800147e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	0010      	movs	r0, r2
 8001498:	4798      	blx	r3
    }
  }
  return status;
 800149a:	230f      	movs	r3, #15
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	781b      	ldrb	r3, [r3, #0]
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b004      	add	sp, #16
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	fffffeff 	.word	0xfffffeff
 80014ac:	40020000 	.word	0x40020000

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	e147      	b.n	8001750 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4091      	lsls	r1, r2
 80014ca:	000a      	movs	r2, r1
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d100      	bne.n	80014d8 <HAL_GPIO_Init+0x28>
 80014d6:	e138      	b.n	800174a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	4013      	ands	r3, r2
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d005      	beq.n	80014f0 <HAL_GPIO_Init+0x40>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d130      	bne.n	8001552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	409a      	lsls	r2, r3
 80014fe:	0013      	movs	r3, r2
 8001500:	43da      	mvns	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	409a      	lsls	r2, r3
 8001512:	0013      	movs	r3, r2
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001526:	2201      	movs	r2, #1
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	2201      	movs	r2, #1
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2203      	movs	r2, #3
 8001558:	4013      	ands	r3, r2
 800155a:	2b03      	cmp	r3, #3
 800155c:	d017      	beq.n	800158e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	43da      	mvns	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	2b02      	cmp	r3, #2
 8001598:	d123      	bne.n	80015e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	58d3      	ldr	r3, [r2, r3]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2207      	movs	r2, #7
 80015ac:	4013      	ands	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2107      	movs	r1, #7
 80015c6:	400b      	ands	r3, r1
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	6939      	ldr	r1, [r7, #16]
 80015e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	401a      	ands	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	23c0      	movs	r3, #192	@ 0xc0
 800161c:	029b      	lsls	r3, r3, #10
 800161e:	4013      	ands	r3, r2
 8001620:	d100      	bne.n	8001624 <HAL_GPIO_Init+0x174>
 8001622:	e092      	b.n	800174a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001624:	4a50      	ldr	r2, [pc, #320]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3318      	adds	r3, #24
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	589b      	ldr	r3, [r3, r2]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2203      	movs	r2, #3
 8001636:	4013      	ands	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	220f      	movs	r2, #15
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	43da      	mvns	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	23a0      	movs	r3, #160	@ 0xa0
 800164c:	05db      	lsls	r3, r3, #23
 800164e:	429a      	cmp	r2, r3
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x1ca>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a45      	ldr	r2, [pc, #276]	@ (800176c <HAL_GPIO_Init+0x2bc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x1c6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a44      	ldr	r2, [pc, #272]	@ (8001770 <HAL_GPIO_Init+0x2c0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x1c2>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a43      	ldr	r2, [pc, #268]	@ (8001774 <HAL_GPIO_Init+0x2c4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x1be>
 800166a:	2303      	movs	r3, #3
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x1cc>
 800166e:	2305      	movs	r3, #5
 8001670:	e004      	b.n	800167c <HAL_GPIO_Init+0x1cc>
 8001672:	2302      	movs	r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x1cc>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x1cc>
 800167a:	2300      	movs	r3, #0
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	2103      	movs	r1, #3
 8001680:	400a      	ands	r2, r1
 8001682:	00d2      	lsls	r2, r2, #3
 8001684:	4093      	lsls	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800168c:	4936      	ldr	r1, [pc, #216]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3318      	adds	r3, #24
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800169a:	4b33      	ldr	r3, [pc, #204]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43da      	mvns	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	035b      	lsls	r3, r3, #13
 80016b2:	4013      	ands	r3, r2
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016be:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80016c4:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43da      	mvns	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	039b      	lsls	r3, r3, #14
 80016dc:	4013      	ands	r3, r2
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 80016f0:	2384      	movs	r3, #132	@ 0x84
 80016f2:	58d3      	ldr	r3, [r2, r3]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43da      	mvns	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001714:	4914      	ldr	r1, [pc, #80]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 8001716:	2284      	movs	r2, #132	@ 0x84
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800171c:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	58d3      	ldr	r3, [r2, r3]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	025b      	lsls	r3, r3, #9
 8001736:	4013      	ands	r3, r2
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001742:	4909      	ldr	r1, [pc, #36]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 8001744:	2280      	movs	r2, #128	@ 0x80
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	40da      	lsrs	r2, r3
 8001758:	1e13      	subs	r3, r2, #0
 800175a:	d000      	beq.n	800175e <HAL_GPIO_Init+0x2ae>
 800175c:	e6b0      	b.n	80014c0 <HAL_GPIO_Init+0x10>
  }
}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b006      	add	sp, #24
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021800 	.word	0x40021800
 800176c:	50000400 	.word	0x50000400
 8001770:	50000800 	.word	0x50000800
 8001774:	50000c00 	.word	0x50000c00

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	0008      	movs	r0, r1
 8001782:	0011      	movs	r1, r2
 8001784:	1cbb      	adds	r3, r7, #2
 8001786:	1c02      	adds	r2, r0, #0
 8001788:	801a      	strh	r2, [r3, #0]
 800178a:	1c7b      	adds	r3, r7, #1
 800178c:	1c0a      	adds	r2, r1, #0
 800178e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001790:	1c7b      	adds	r3, r7, #1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001798:	1cbb      	adds	r3, r7, #2
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a2:	1cbb      	adds	r3, r7, #2
 80017a4:	881a      	ldrh	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d11f      	bne.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80017d8:	4b14      	ldr	r3, [pc, #80]	@ (800182c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	0013      	movs	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	189b      	adds	r3, r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4912      	ldr	r1, [pc, #72]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7fe fc9e 	bl	8000128 <__udivsi3>
 80017ec:	0003      	movs	r3, r0
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017f2:	e008      	b.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e001      	b.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e009      	b.n	800181a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	401a      	ands	r2, r3
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	429a      	cmp	r2, r3
 8001816:	d0ed      	beq.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	40007000 	.word	0x40007000
 8001828:	fffff9ff 	.word	0xfffff9ff
 800182c:	20000004 	.word	0x20000004
 8001830:	000f4240 	.word	0x000f4240

08001834 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <LL_RCC_GetAPB1Prescaler+0x14>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	23e0      	movs	r3, #224	@ 0xe0
 800183e:	01db      	lsls	r3, r3, #7
 8001840:	4013      	ands	r3, r2
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e2fe      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2201      	movs	r2, #1
 8001864:	4013      	ands	r3, r2
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x1e>
 8001868:	e07c      	b.n	8001964 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4bc3      	ldr	r3, [pc, #780]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2238      	movs	r2, #56	@ 0x38
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	4bc0      	ldr	r3, [pc, #768]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2203      	movs	r2, #3
 800187a:	4013      	ands	r3, r2
 800187c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b10      	cmp	r3, #16
 8001882:	d102      	bne.n	800188a <HAL_RCC_OscConfig+0x3e>
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d002      	beq.n	8001890 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d10b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4bb9      	ldr	r3, [pc, #740]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	029b      	lsls	r3, r3, #10
 8001898:	4013      	ands	r3, r2
 800189a:	d062      	beq.n	8001962 <HAL_RCC_OscConfig+0x116>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d15e      	bne.n	8001962 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e2d9      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	2380      	movs	r3, #128	@ 0x80
 80018ae:	025b      	lsls	r3, r3, #9
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_OscConfig+0x78>
 80018b4:	4bb0      	ldr	r3, [pc, #704]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4baf      	ldr	r3, [pc, #700]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	2180      	movs	r1, #128	@ 0x80
 80018bc:	0249      	lsls	r1, r1, #9
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e020      	b.n	8001906 <HAL_RCC_OscConfig+0xba>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	23a0      	movs	r3, #160	@ 0xa0
 80018ca:	02db      	lsls	r3, r3, #11
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d10e      	bne.n	80018ee <HAL_RCC_OscConfig+0xa2>
 80018d0:	4ba9      	ldr	r3, [pc, #676]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4ba8      	ldr	r3, [pc, #672]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	2180      	movs	r1, #128	@ 0x80
 80018d8:	02c9      	lsls	r1, r1, #11
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4ba6      	ldr	r3, [pc, #664]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4ba5      	ldr	r3, [pc, #660]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	0249      	lsls	r1, r1, #9
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0xba>
 80018ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	49a1      	ldr	r1, [pc, #644]	@ (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	4b9f      	ldr	r3, [pc, #636]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b9e      	ldr	r3, [pc, #632]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001900:	499f      	ldr	r1, [pc, #636]	@ (8001b80 <HAL_RCC_OscConfig+0x334>)
 8001902:	400a      	ands	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d014      	beq.n	8001938 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fc1b 	bl	8001148 <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc16 	bl	8001148 <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	@ 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e298      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	4b93      	ldr	r3, [pc, #588]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	029b      	lsls	r3, r3, #10
 8001932:	4013      	ands	r3, r2
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0xcc>
 8001936:	e015      	b.n	8001964 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fc06 	bl	8001148 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001942:	f7ff fc01 	bl	8001148 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b64      	cmp	r3, #100	@ 0x64
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e283      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001954:	4b88      	ldr	r3, [pc, #544]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	029b      	lsls	r3, r3, #10
 800195c:	4013      	ands	r3, r2
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0xf6>
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001962:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d100      	bne.n	8001970 <HAL_RCC_OscConfig+0x124>
 800196e:	e099      	b.n	8001aa4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001970:	4b81      	ldr	r3, [pc, #516]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2238      	movs	r2, #56	@ 0x38
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800197a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2203      	movs	r2, #3
 8001980:	4013      	ands	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b10      	cmp	r3, #16
 8001988:	d102      	bne.n	8001990 <HAL_RCC_OscConfig+0x144>
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d002      	beq.n	8001996 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d135      	bne.n	8001a02 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001996:	4b78      	ldr	r3, [pc, #480]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4013      	ands	r3, r2
 80019a0:	d005      	beq.n	80019ae <HAL_RCC_OscConfig+0x162>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e256      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	4b72      	ldr	r3, [pc, #456]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a74      	ldr	r2, [pc, #464]	@ (8001b84 <HAL_RCC_OscConfig+0x338>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	021a      	lsls	r2, r3, #8
 80019be:	4b6e      	ldr	r3, [pc, #440]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001b88 <HAL_RCC_OscConfig+0x33c>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	4b67      	ldr	r3, [pc, #412]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019de:	4b66      	ldr	r3, [pc, #408]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	0adb      	lsrs	r3, r3, #11
 80019e4:	2207      	movs	r2, #7
 80019e6:	4013      	ands	r3, r2
 80019e8:	4a68      	ldr	r2, [pc, #416]	@ (8001b8c <HAL_RCC_OscConfig+0x340>)
 80019ea:	40da      	lsrs	r2, r3
 80019ec:	4b68      	ldr	r3, [pc, #416]	@ (8001b90 <HAL_RCC_OscConfig+0x344>)
 80019ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019f0:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <HAL_RCC_OscConfig+0x348>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff fb4b 	bl	8001090 <HAL_InitTick>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d051      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e22c      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d030      	beq.n	8001a6c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a5e      	ldr	r2, [pc, #376]	@ (8001b88 <HAL_RCC_OscConfig+0x33c>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	4b57      	ldr	r3, [pc, #348]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a1e:	4b56      	ldr	r3, [pc, #344]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b55      	ldr	r3, [pc, #340]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a24:	2180      	movs	r1, #128	@ 0x80
 8001a26:	0049      	lsls	r1, r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb8c 	bl	8001148 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fb87 	bl	8001148 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e209      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a48:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b48      	ldr	r3, [pc, #288]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4a4a      	ldr	r2, [pc, #296]	@ (8001b84 <HAL_RCC_OscConfig+0x338>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	021a      	lsls	r2, r3, #8
 8001a64:	4b44      	ldr	r3, [pc, #272]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	e01b      	b.n	8001aa4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a6c:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b41      	ldr	r3, [pc, #260]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	4949      	ldr	r1, [pc, #292]	@ (8001b98 <HAL_RCC_OscConfig+0x34c>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fb66 	bl	8001148 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff fb61 	bl	8001148 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1e3      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a94:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x236>
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d047      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001aae:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2238      	movs	r2, #56	@ 0x38
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b18      	cmp	r3, #24
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001aba:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d03c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2f2>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d138      	bne.n	8001b3e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e1c5      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d019      	beq.n	8001b0c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ad8:	4b27      	ldr	r3, [pc, #156]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001adc:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb30 	bl	8001148 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aee:	f7ff fb2b 	bl	8001148 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e1ad      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d0f1      	beq.n	8001aee <HAL_RCC_OscConfig+0x2a2>
 8001b0a:	e018      	b.n	8001b3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	438a      	bics	r2, r1
 8001b16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fb16 	bl	8001148 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b22:	f7ff fb11 	bl	8001148 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e193      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b34:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d1f1      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2204      	movs	r2, #4
 8001b44:	4013      	ands	r3, r2
 8001b46:	d100      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2fe>
 8001b48:	e0c6      	b.n	8001cd8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2238      	movs	r2, #56	@ 0x38
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d11e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_RCC_OscConfig+0x32c>)
 8001b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b62:	2202      	movs	r2, #2
 8001b64:	4013      	ands	r3, r2
 8001b66:	d100      	bne.n	8001b6a <HAL_RCC_OscConfig+0x31e>
 8001b68:	e0b6      	b.n	8001cd8 <HAL_RCC_OscConfig+0x48c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d000      	beq.n	8001b74 <HAL_RCC_OscConfig+0x328>
 8001b72:	e0b1      	b.n	8001cd8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e171      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	fffeffff 	.word	0xfffeffff
 8001b80:	fffbffff 	.word	0xfffbffff
 8001b84:	ffff80ff 	.word	0xffff80ff
 8001b88:	ffffc7ff 	.word	0xffffc7ff
 8001b8c:	00f42400 	.word	0x00f42400
 8001b90:	20000004 	.word	0x20000004
 8001b94:	20000008 	.word	0x20000008
 8001b98:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b9c:	4bb1      	ldr	r3, [pc, #708]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ba0:	2380      	movs	r3, #128	@ 0x80
 8001ba2:	055b      	lsls	r3, r3, #21
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x360>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x362>
 8001bac:	2300      	movs	r3, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d011      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4bac      	ldr	r3, [pc, #688]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001bb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bb6:	4bab      	ldr	r3, [pc, #684]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001bb8:	2180      	movs	r1, #128	@ 0x80
 8001bba:	0549      	lsls	r1, r1, #21
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bc0:	4ba8      	ldr	r3, [pc, #672]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	055b      	lsls	r3, r3, #21
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001bce:	231f      	movs	r3, #31
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd6:	4ba4      	ldr	r3, [pc, #656]	@ (8001e68 <HAL_RCC_OscConfig+0x61c>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	d11a      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be2:	4ba1      	ldr	r3, [pc, #644]	@ (8001e68 <HAL_RCC_OscConfig+0x61c>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4ba0      	ldr	r3, [pc, #640]	@ (8001e68 <HAL_RCC_OscConfig+0x61c>)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	0049      	lsls	r1, r1, #1
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff faaa 	bl	8001148 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfa:	f7ff faa5 	bl	8001148 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e127      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0c:	4b96      	ldr	r3, [pc, #600]	@ (8001e68 <HAL_RCC_OscConfig+0x61c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3e2>
 8001c20:	4b90      	ldr	r3, [pc, #576]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c24:	4b8f      	ldr	r3, [pc, #572]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c2c:	e01c      	b.n	8001c68 <HAL_RCC_OscConfig+0x41c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x404>
 8001c36:	4b8b      	ldr	r3, [pc, #556]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c3a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c42:	4b88      	ldr	r3, [pc, #544]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c46:	4b87      	ldr	r3, [pc, #540]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0x41c>
 8001c50:	4b84      	ldr	r3, [pc, #528]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c54:	4b83      	ldr	r3, [pc, #524]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	438a      	bics	r2, r1
 8001c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c5c:	4b81      	ldr	r3, [pc, #516]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c60:	4b80      	ldr	r3, [pc, #512]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c62:	2104      	movs	r1, #4
 8001c64:	438a      	bics	r2, r1
 8001c66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d014      	beq.n	8001c9a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fa6a 	bl	8001148 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7ff fa65 	bl	8001148 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	4a79      	ldr	r2, [pc, #484]	@ (8001e6c <HAL_RCC_OscConfig+0x620>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0e6      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x42e>
 8001c98:	e013      	b.n	8001cc2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fa55 	bl	8001148 <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca2:	e009      	b.n	8001cb8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fa50 	bl	8001148 <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	4a6f      	ldr	r2, [pc, #444]	@ (8001e6c <HAL_RCC_OscConfig+0x620>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0d1      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001cc2:	231f      	movs	r3, #31
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b65      	ldr	r3, [pc, #404]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cd0:	4b64      	ldr	r3, [pc, #400]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001cd2:	4967      	ldr	r1, [pc, #412]	@ (8001e70 <HAL_RCC_OscConfig+0x624>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d100      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x496>
 8001ce0:	e0bb      	b.n	8001e5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce2:	4b60      	ldr	r3, [pc, #384]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2238      	movs	r2, #56	@ 0x38
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d100      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4a4>
 8001cee:	e07b      	b.n	8001de8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d156      	bne.n	8001da6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b59      	ldr	r3, [pc, #356]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001cfe:	495d      	ldr	r1, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x628>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fa20 	bl	8001148 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fa1b 	bl	8001148 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e09d      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d20:	4b50      	ldr	r3, [pc, #320]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	049b      	lsls	r3, r3, #18
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a51      	ldr	r2, [pc, #324]	@ (8001e78 <HAL_RCC_OscConfig+0x62c>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1a      	ldr	r2, [r3, #32]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	4b42      	ldr	r3, [pc, #264]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b40      	ldr	r3, [pc, #256]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b3f      	ldr	r3, [pc, #252]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	0449      	lsls	r1, r1, #17
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	4b3c      	ldr	r3, [pc, #240]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d74:	2180      	movs	r1, #128	@ 0x80
 8001d76:	0549      	lsls	r1, r1, #21
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f9e4 	bl	8001148 <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7ff f9df 	bl	8001148 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e061      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d98:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	049b      	lsls	r3, r3, #18
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x53a>
 8001da4:	e059      	b.n	8001e5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001dac:	4931      	ldr	r1, [pc, #196]	@ (8001e74 <HAL_RCC_OscConfig+0x628>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff f9c9 	bl	8001148 <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f9c4 	bl	8001148 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e046      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dce:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	049b      	lsls	r3, r3, #18
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001dda:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001de0:	4926      	ldr	r1, [pc, #152]	@ (8001e7c <HAL_RCC_OscConfig+0x630>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	e038      	b.n	8001e5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e033      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	401a      	ands	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d126      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2270      	movs	r2, #112	@ 0x70
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d11f      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	23fe      	movs	r3, #254	@ 0xfe
 8001e1a:	01db      	lsls	r3, r3, #7
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d116      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	23f8      	movs	r3, #248	@ 0xf8
 8001e2c:	039b      	lsls	r3, r3, #14
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10e      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	23e0      	movs	r3, #224	@ 0xe0
 8001e3c:	051b      	lsls	r3, r3, #20
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	0f5b      	lsrs	r3, r3, #29
 8001e4c:	075a      	lsls	r2, r3, #29
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b008      	add	sp, #32
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	00001388 	.word	0x00001388
 8001e70:	efffffff 	.word	0xefffffff
 8001e74:	feffffff 	.word	0xfeffffff
 8001e78:	11c1808c 	.word	0x11c1808c
 8001e7c:	eefefffc 	.word	0xeefefffc

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0e9      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b76      	ldr	r3, [pc, #472]	@ (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2207      	movs	r2, #7
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d91e      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b73      	ldr	r3, [pc, #460]	@ (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	4b70      	ldr	r3, [pc, #448]	@ (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eb4:	f7ff f948 	bl	8001148 <HAL_GetTick>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ebc:	e009      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebe:	f7ff f943 	bl	8001148 <HAL_GetTick>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	4a6a      	ldr	r2, [pc, #424]	@ (8002074 <HAL_RCC_ClockConfig+0x1f4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0ca      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ed2:	4b67      	ldr	r3, [pc, #412]	@ (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	4013      	ands	r3, r2
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1ee      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d006      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ef4:	4b60      	ldr	r3, [pc, #384]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	21e0      	movs	r1, #224	@ 0xe0
 8001efc:	01c9      	lsls	r1, r1, #7
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f02:	4b5d      	ldr	r3, [pc, #372]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4a5d      	ldr	r2, [pc, #372]	@ (800207c <HAL_RCC_ClockConfig+0x1fc>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4b59      	ldr	r3, [pc, #356]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d057      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f28:	4b53      	ldr	r3, [pc, #332]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	4013      	ands	r3, r2
 8001f32:	d12b      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e097      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f40:	4b4d      	ldr	r3, [pc, #308]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	049b      	lsls	r3, r3, #18
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d11f      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e08b      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f58:	4b47      	ldr	r3, [pc, #284]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4013      	ands	r3, r2
 8001f62:	d113      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e07f      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f70:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f74:	2202      	movs	r2, #2
 8001f76:	4013      	ands	r3, r2
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e074      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	2202      	movs	r2, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e06d      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2207      	movs	r2, #7
 8001f92:	4393      	bics	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4b37      	ldr	r3, [pc, #220]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa0:	f7ff f8d2 	bl	8001148 <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001faa:	f7ff f8cd 	bl	8001148 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8002074 <HAL_RCC_ClockConfig+0x1f4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e054      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2238      	movs	r2, #56	@ 0x38
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1ec      	bne.n	8001faa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d21e      	bcs.n	800201c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff f8aa 	bl	8001148 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ff8:	e009      	b.n	800200e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffa:	f7ff f8a5 	bl	8001148 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <HAL_RCC_ClockConfig+0x1f4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e02c      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2207      	movs	r2, #7
 8002014:	4013      	ands	r3, r2
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d1ee      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2204      	movs	r2, #4
 8002022:	4013      	ands	r3, r2
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4a15      	ldr	r2, [pc, #84]	@ (8002080 <HAL_RCC_ClockConfig+0x200>)
 800202c:	4013      	ands	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8002036:	430a      	orrs	r2, r1
 8002038:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800203a:	f000 f829 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800203e:	0001      	movs	r1, r0
 8002040:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <HAL_RCC_ClockConfig+0x1f8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	220f      	movs	r2, #15
 8002048:	401a      	ands	r2, r3
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <HAL_RCC_ClockConfig+0x204>)
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	58d3      	ldr	r3, [r2, r3]
 8002050:	221f      	movs	r2, #31
 8002052:	4013      	ands	r3, r2
 8002054:	000a      	movs	r2, r1
 8002056:	40da      	lsrs	r2, r3
 8002058:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_RCC_ClockConfig+0x208>)
 800205a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_RCC_ClockConfig+0x20c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0018      	movs	r0, r3
 8002062:	f7ff f815 	bl	8001090 <HAL_InitTick>
 8002066:	0003      	movs	r3, r0
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40022000 	.word	0x40022000
 8002074:	00001388 	.word	0x00001388
 8002078:	40021000 	.word	0x40021000
 800207c:	fffff0ff 	.word	0xfffff0ff
 8002080:	ffff8fff 	.word	0xffff8fff
 8002084:	08006304 	.word	0x08006304
 8002088:	20000004 	.word	0x20000004
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002096:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2238      	movs	r2, #56	@ 0x38
 800209c:	4013      	ands	r3, r2
 800209e:	d10f      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0adb      	lsrs	r3, r3, #11
 80020a6:	2207      	movs	r2, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	2201      	movs	r2, #1
 80020ac:	409a      	lsls	r2, r3
 80020ae:	0013      	movs	r3, r2
 80020b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	4835      	ldr	r0, [pc, #212]	@ (800218c <HAL_RCC_GetSysClockFreq+0xfc>)
 80020b6:	f7fe f837 	bl	8000128 <__udivsi3>
 80020ba:	0003      	movs	r3, r0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	e05d      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4b31      	ldr	r3, [pc, #196]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2238      	movs	r2, #56	@ 0x38
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020cc:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x100>)
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e054      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2238      	movs	r2, #56	@ 0x38
 80020d8:	4013      	ands	r3, r2
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d138      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020de:	4b2a      	ldr	r3, [pc, #168]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2203      	movs	r2, #3
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e8:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	2207      	movs	r2, #7
 80020f0:	4013      	ands	r3, r2
 80020f2:	3301      	adds	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d10d      	bne.n	8002118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	4824      	ldr	r0, [pc, #144]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x100>)
 8002100:	f7fe f812 	bl	8000128 <__udivsi3>
 8002104:	0003      	movs	r3, r0
 8002106:	0019      	movs	r1, r3
 8002108:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	227f      	movs	r2, #127	@ 0x7f
 8002110:	4013      	ands	r3, r2
 8002112:	434b      	muls	r3, r1
 8002114:	617b      	str	r3, [r7, #20]
        break;
 8002116:	e00d      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	481c      	ldr	r0, [pc, #112]	@ (800218c <HAL_RCC_GetSysClockFreq+0xfc>)
 800211c:	f7fe f804 	bl	8000128 <__udivsi3>
 8002120:	0003      	movs	r3, r0
 8002122:	0019      	movs	r1, r3
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	227f      	movs	r2, #127	@ 0x7f
 800212c:	4013      	ands	r3, r2
 800212e:	434b      	muls	r3, r1
 8002130:	617b      	str	r3, [r7, #20]
        break;
 8002132:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0f5b      	lsrs	r3, r3, #29
 800213a:	2207      	movs	r2, #7
 800213c:	4013      	ands	r3, r2
 800213e:	3301      	adds	r3, #1
 8002140:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f7fd ffef 	bl	8000128 <__udivsi3>
 800214a:	0003      	movs	r3, r0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e015      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002150:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2238      	movs	r2, #56	@ 0x38
 8002156:	4013      	ands	r3, r2
 8002158:	2b20      	cmp	r3, #32
 800215a:	d103      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e00b      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002164:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2238      	movs	r2, #56	@ 0x38
 800216a:	4013      	ands	r3, r2
 800216c:	2b18      	cmp	r3, #24
 800216e:	d103      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002170:	23fa      	movs	r3, #250	@ 0xfa
 8002172:	01db      	lsls	r3, r3, #7
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	e001      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800217c:	693b      	ldr	r3, [r7, #16]
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	40021000 	.word	0x40021000
 800218c:	00f42400 	.word	0x00f42400
 8002190:	007a1200 	.word	0x007a1200

08002194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002198:	4b02      	ldr	r3, [pc, #8]	@ (80021a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021ac:	f7ff fff2 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021b0:	0004      	movs	r4, r0
 80021b2:	f7ff fb3f 	bl	8001834 <LL_RCC_GetAPB1Prescaler>
 80021b6:	0003      	movs	r3, r0
 80021b8:	0b1a      	lsrs	r2, r3, #12
 80021ba:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	58d3      	ldr	r3, [r2, r3]
 80021c0:	221f      	movs	r2, #31
 80021c2:	4013      	ands	r3, r2
 80021c4:	40dc      	lsrs	r4, r3
 80021c6:	0023      	movs	r3, r4
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdb0      	pop	{r4, r5, r7, pc}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	08006344 	.word	0x08006344

080021d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80021dc:	2313      	movs	r3, #19
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e4:	2312      	movs	r3, #18
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	029b      	lsls	r3, r3, #10
 80021f4:	4013      	ands	r3, r2
 80021f6:	d100      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021f8:	e0a3      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2011      	movs	r0, #17
 80021fc:	183b      	adds	r3, r7, r0
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4bc3      	ldr	r3, [pc, #780]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	055b      	lsls	r3, r3, #21
 800220a:	4013      	ands	r3, r2
 800220c:	d110      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4bc0      	ldr	r3, [pc, #768]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002212:	4bbf      	ldr	r3, [pc, #764]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002214:	2180      	movs	r1, #128	@ 0x80
 8002216:	0549      	lsls	r1, r1, #21
 8002218:	430a      	orrs	r2, r1
 800221a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800221c:	4bbc      	ldr	r3, [pc, #752]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	055b      	lsls	r3, r3, #21
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222a:	183b      	adds	r3, r7, r0
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002230:	4bb8      	ldr	r3, [pc, #736]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4bb7      	ldr	r3, [pc, #732]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002236:	2180      	movs	r1, #128	@ 0x80
 8002238:	0049      	lsls	r1, r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800223e:	f7fe ff83 	bl	8001148 <HAL_GetTick>
 8002242:	0003      	movs	r3, r0
 8002244:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002246:	e00b      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe ff7e 	bl	8001148 <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d904      	bls.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002256:	2313      	movs	r3, #19
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2203      	movs	r2, #3
 800225c:	701a      	strb	r2, [r3, #0]
        break;
 800225e:	e005      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002260:	4bac      	ldr	r3, [pc, #688]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4013      	ands	r3, r2
 800226a:	d0ed      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800226c:	2313      	movs	r3, #19
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d154      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002276:	4ba6      	ldr	r3, [pc, #664]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002278:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800227a:	23c0      	movs	r3, #192	@ 0xc0
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4013      	ands	r3, r2
 8002280:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d019      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	429a      	cmp	r2, r3
 8002290:	d014      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002292:	4b9f      	ldr	r3, [pc, #636]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	4aa0      	ldr	r2, [pc, #640]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002298:	4013      	ands	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800229c:	4b9c      	ldr	r3, [pc, #624]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022a0:	4b9b      	ldr	r3, [pc, #620]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a2:	2180      	movs	r1, #128	@ 0x80
 80022a4:	0249      	lsls	r1, r1, #9
 80022a6:	430a      	orrs	r2, r1
 80022a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022aa:	4b99      	ldr	r3, [pc, #612]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022ae:	4b98      	ldr	r3, [pc, #608]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b0:	499a      	ldr	r1, [pc, #616]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b6:	4b96      	ldr	r3, [pc, #600]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2201      	movs	r2, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d016      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe ff40 	bl	8001148 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022cc:	e00c      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe ff3b 	bl	8001148 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	4a91      	ldr	r2, [pc, #580]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d904      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80022de:	2313      	movs	r3, #19
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2203      	movs	r2, #3
 80022e4:	701a      	strb	r2, [r3, #0]
            break;
 80022e6:	e004      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e8:	4b89      	ldr	r3, [pc, #548]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d0ed      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022f2:	2313      	movs	r3, #19
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fc:	4b84      	ldr	r3, [pc, #528]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	4a85      	ldr	r2, [pc, #532]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002302:	4013      	ands	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800230a:	4b81      	ldr	r3, [pc, #516]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230c:	430a      	orrs	r2, r1
 800230e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002310:	e00c      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002312:	2312      	movs	r3, #18
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2213      	movs	r2, #19
 8002318:	18ba      	adds	r2, r7, r2
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	701a      	strb	r2, [r3, #0]
 800231e:	e005      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	2312      	movs	r3, #18
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2213      	movs	r2, #19
 8002326:	18ba      	adds	r2, r7, r2
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800232c:	2311      	movs	r3, #17
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b76      	ldr	r3, [pc, #472]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800233a:	4b75      	ldr	r3, [pc, #468]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233c:	4979      	ldr	r1, [pc, #484]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800233e:	400a      	ands	r2, r1
 8002340:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800234c:	4b70      	ldr	r3, [pc, #448]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002350:	2203      	movs	r2, #3
 8002352:	4393      	bics	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	4b6d      	ldr	r3, [pc, #436]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235c:	430a      	orrs	r2, r1
 800235e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2202      	movs	r2, #2
 8002366:	4013      	ands	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800236a:	4b69      	ldr	r3, [pc, #420]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	220c      	movs	r2, #12
 8002370:	4393      	bics	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	4b65      	ldr	r3, [pc, #404]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237a:	430a      	orrs	r2, r1
 800237c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2210      	movs	r2, #16
 8002384:	4013      	ands	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002388:	4b61      	ldr	r3, [pc, #388]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	4a66      	ldr	r2, [pc, #408]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	4b5e      	ldr	r3, [pc, #376]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002398:	430a      	orrs	r2, r1
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023a8:	4b59      	ldr	r3, [pc, #356]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	4a5f      	ldr	r2, [pc, #380]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	4b56      	ldr	r3, [pc, #344]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	@ 0x80
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4013      	ands	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023c8:	4b51      	ldr	r3, [pc, #324]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023cc:	4a58      	ldr	r2, [pc, #352]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2220      	movs	r2, #32
 80023e2:	4013      	ands	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ea:	4a52      	ldr	r2, [pc, #328]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	4b46      	ldr	r3, [pc, #280]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	01db      	lsls	r3, r3, #7
 8002402:	4013      	ands	r3, r2
 8002404:	d015      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002406:	4b42      	ldr	r3, [pc, #264]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	0899      	lsrs	r1, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1a      	ldr	r2, [r3, #32]
 8002412:	4b3f      	ldr	r3, [pc, #252]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002414:	430a      	orrs	r2, r1
 8002416:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	2380      	movs	r3, #128	@ 0x80
 800241e:	05db      	lsls	r3, r3, #23
 8002420:	429a      	cmp	r2, r3
 8002422:	d106      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002424:	4b3a      	ldr	r3, [pc, #232]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242a:	2180      	movs	r1, #128	@ 0x80
 800242c:	0249      	lsls	r1, r1, #9
 800242e:	430a      	orrs	r2, r1
 8002430:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	031b      	lsls	r3, r3, #12
 800243a:	4013      	ands	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800243e:	4b34      	ldr	r3, [pc, #208]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	2240      	movs	r2, #64	@ 0x40
 8002444:	4393      	bics	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800244c:	4b30      	ldr	r3, [pc, #192]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800244e:	430a      	orrs	r2, r1
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	2380      	movs	r3, #128	@ 0x80
 8002458:	039b      	lsls	r3, r3, #14
 800245a:	4013      	ands	r3, r2
 800245c:	d016      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800245e:	4b2c      	ldr	r3, [pc, #176]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002462:	4a35      	ldr	r2, [pc, #212]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002464:	4013      	ands	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800246c:	4b28      	ldr	r3, [pc, #160]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800246e:	430a      	orrs	r2, r1
 8002470:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	03db      	lsls	r3, r3, #15
 800247a:	429a      	cmp	r2, r3
 800247c:	d106      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800247e:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b23      	ldr	r3, [pc, #140]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	0449      	lsls	r1, r1, #17
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	03db      	lsls	r3, r3, #15
 8002494:	4013      	ands	r3, r2
 8002496:	d016      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800249a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800249e:	4013      	ands	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a8:	430a      	orrs	r2, r1
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	045b      	lsls	r3, r3, #17
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024b8:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024be:	2180      	movs	r1, #128	@ 0x80
 80024c0:	0449      	lsls	r1, r1, #17
 80024c2:	430a      	orrs	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	4013      	ands	r3, r2
 80024d0:	d016      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80024d8:	4013      	ands	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	01db      	lsls	r3, r3, #7
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d106      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024f2:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f8:	2180      	movs	r1, #128	@ 0x80
 80024fa:	0249      	lsls	r1, r1, #9
 80024fc:	430a      	orrs	r2, r1
 80024fe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002500:	2312      	movs	r3, #18
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	781b      	ldrb	r3, [r3, #0]
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b006      	add	sp, #24
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	40021000 	.word	0x40021000
 8002514:	40007000 	.word	0x40007000
 8002518:	fffffcff 	.word	0xfffffcff
 800251c:	fffeffff 	.word	0xfffeffff
 8002520:	00001388 	.word	0x00001388
 8002524:	efffffff 	.word	0xefffffff
 8002528:	fffff3ff 	.word	0xfffff3ff
 800252c:	fff3ffff 	.word	0xfff3ffff
 8002530:	ffcfffff 	.word	0xffcfffff
 8002534:	ffffcfff 	.word	0xffffcfff
 8002538:	ffbfffff 	.word	0xffbfffff
 800253c:	feffffff 	.word	0xfeffffff
 8002540:	ffff3fff 	.word	0xffff3fff

08002544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e04a      	b.n	80025ec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223d      	movs	r2, #61	@ 0x3d
 800255a:	5c9b      	ldrb	r3, [r3, r2]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	223c      	movs	r2, #60	@ 0x3c
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f7fe fbc5 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223d      	movs	r2, #61	@ 0x3d
 8002576:	2102      	movs	r1, #2
 8002578:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	0019      	movs	r1, r3
 8002584:	0010      	movs	r0, r2
 8002586:	f000 fb55 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2248      	movs	r2, #72	@ 0x48
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	223e      	movs	r2, #62	@ 0x3e
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	223f      	movs	r2, #63	@ 0x3f
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	@ 0x40
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2241      	movs	r2, #65	@ 0x41
 80025ae:	2101      	movs	r1, #1
 80025b0:	5499      	strb	r1, [r3, r2]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2242      	movs	r2, #66	@ 0x42
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2243      	movs	r2, #67	@ 0x43
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2244      	movs	r2, #68	@ 0x44
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2245      	movs	r2, #69	@ 0x45
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2246      	movs	r2, #70	@ 0x46
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2247      	movs	r2, #71	@ 0x47
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223d      	movs	r2, #61	@ 0x3d
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e04a      	b.n	800269c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	223d      	movs	r2, #61	@ 0x3d
 800260a:	5c9b      	ldrb	r3, [r3, r2]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d107      	bne.n	8002622 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	223c      	movs	r2, #60	@ 0x3c
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f000 f841 	bl	80026a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	223d      	movs	r2, #61	@ 0x3d
 8002626:	2102      	movs	r1, #2
 8002628:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	0019      	movs	r1, r3
 8002634:	0010      	movs	r0, r2
 8002636:	f000 fafd 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2248      	movs	r2, #72	@ 0x48
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	223e      	movs	r2, #62	@ 0x3e
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	223f      	movs	r2, #63	@ 0x3f
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2240      	movs	r2, #64	@ 0x40
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2241      	movs	r2, #65	@ 0x41
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2242      	movs	r2, #66	@ 0x42
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2243      	movs	r2, #67	@ 0x43
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2244      	movs	r2, #68	@ 0x44
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2245      	movs	r2, #69	@ 0x45
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2246      	movs	r2, #70	@ 0x46
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2247      	movs	r2, #71	@ 0x47
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	223d      	movs	r2, #61	@ 0x3d
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d108      	bne.n	80026d6 <HAL_TIM_PWM_Start+0x22>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	223e      	movs	r2, #62	@ 0x3e
 80026c8:	5c9b      	ldrb	r3, [r3, r2]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	4193      	sbcs	r3, r2
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e037      	b.n	8002746 <HAL_TIM_PWM_Start+0x92>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d108      	bne.n	80026ee <HAL_TIM_PWM_Start+0x3a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	223f      	movs	r2, #63	@ 0x3f
 80026e0:	5c9b      	ldrb	r3, [r3, r2]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	4193      	sbcs	r3, r2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e02b      	b.n	8002746 <HAL_TIM_PWM_Start+0x92>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d108      	bne.n	8002706 <HAL_TIM_PWM_Start+0x52>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2240      	movs	r2, #64	@ 0x40
 80026f8:	5c9b      	ldrb	r3, [r3, r2]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	4193      	sbcs	r3, r2
 8002702:	b2db      	uxtb	r3, r3
 8002704:	e01f      	b.n	8002746 <HAL_TIM_PWM_Start+0x92>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d108      	bne.n	800271e <HAL_TIM_PWM_Start+0x6a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2241      	movs	r2, #65	@ 0x41
 8002710:	5c9b      	ldrb	r3, [r3, r2]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	1e5a      	subs	r2, r3, #1
 8002718:	4193      	sbcs	r3, r2
 800271a:	b2db      	uxtb	r3, r3
 800271c:	e013      	b.n	8002746 <HAL_TIM_PWM_Start+0x92>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b10      	cmp	r3, #16
 8002722:	d108      	bne.n	8002736 <HAL_TIM_PWM_Start+0x82>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2242      	movs	r2, #66	@ 0x42
 8002728:	5c9b      	ldrb	r3, [r3, r2]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	1e5a      	subs	r2, r3, #1
 8002730:	4193      	sbcs	r3, r2
 8002732:	b2db      	uxtb	r3, r3
 8002734:	e007      	b.n	8002746 <HAL_TIM_PWM_Start+0x92>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2243      	movs	r2, #67	@ 0x43
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	4193      	sbcs	r3, r2
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e08b      	b.n	8002866 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d104      	bne.n	800275e <HAL_TIM_PWM_Start+0xaa>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	223e      	movs	r2, #62	@ 0x3e
 8002758:	2102      	movs	r1, #2
 800275a:	5499      	strb	r1, [r3, r2]
 800275c:	e023      	b.n	80027a6 <HAL_TIM_PWM_Start+0xf2>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d104      	bne.n	800276e <HAL_TIM_PWM_Start+0xba>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	223f      	movs	r2, #63	@ 0x3f
 8002768:	2102      	movs	r1, #2
 800276a:	5499      	strb	r1, [r3, r2]
 800276c:	e01b      	b.n	80027a6 <HAL_TIM_PWM_Start+0xf2>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b08      	cmp	r3, #8
 8002772:	d104      	bne.n	800277e <HAL_TIM_PWM_Start+0xca>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	@ 0x40
 8002778:	2102      	movs	r1, #2
 800277a:	5499      	strb	r1, [r3, r2]
 800277c:	e013      	b.n	80027a6 <HAL_TIM_PWM_Start+0xf2>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d104      	bne.n	800278e <HAL_TIM_PWM_Start+0xda>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2241      	movs	r2, #65	@ 0x41
 8002788:	2102      	movs	r1, #2
 800278a:	5499      	strb	r1, [r3, r2]
 800278c:	e00b      	b.n	80027a6 <HAL_TIM_PWM_Start+0xf2>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b10      	cmp	r3, #16
 8002792:	d104      	bne.n	800279e <HAL_TIM_PWM_Start+0xea>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2242      	movs	r2, #66	@ 0x42
 8002798:	2102      	movs	r1, #2
 800279a:	5499      	strb	r1, [r3, r2]
 800279c:	e003      	b.n	80027a6 <HAL_TIM_PWM_Start+0xf2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2243      	movs	r2, #67	@ 0x43
 80027a2:	2102      	movs	r1, #2
 80027a4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6839      	ldr	r1, [r7, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fe2e 	bl	8003410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <HAL_TIM_PWM_Start+0x1bc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00e      	beq.n	80027dc <HAL_TIM_PWM_Start+0x128>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002874 <HAL_TIM_PWM_Start+0x1c0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_TIM_PWM_Start+0x128>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002878 <HAL_TIM_PWM_Start+0x1c4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <HAL_TIM_PWM_Start+0x128>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a29      	ldr	r2, [pc, #164]	@ (800287c <HAL_TIM_PWM_Start+0x1c8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_PWM_Start+0x12c>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_TIM_PWM_Start+0x12e>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	0209      	lsls	r1, r1, #8
 80027f4:	430a      	orrs	r2, r1
 80027f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002870 <HAL_TIM_PWM_Start+0x1bc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00f      	beq.n	8002822 <HAL_TIM_PWM_Start+0x16e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	05db      	lsls	r3, r3, #23
 800280a:	429a      	cmp	r2, r3
 800280c:	d009      	beq.n	8002822 <HAL_TIM_PWM_Start+0x16e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1b      	ldr	r2, [pc, #108]	@ (8002880 <HAL_TIM_PWM_Start+0x1cc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_TIM_PWM_Start+0x16e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_TIM_PWM_Start+0x1c0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d116      	bne.n	8002850 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a16      	ldr	r2, [pc, #88]	@ (8002884 <HAL_TIM_PWM_Start+0x1d0>)
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d016      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1ae>
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	025b      	lsls	r3, r3, #9
 800283a:	429a      	cmp	r2, r3
 800283c:	d011      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800284e:	e008      	b.n	8002862 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e000      	b.n	8002864 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800
 8002880:	40000400 	.word	0x40000400
 8002884:	00010007 	.word	0x00010007

08002888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2317      	movs	r3, #23
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	223c      	movs	r2, #60	@ 0x3c
 80028a0:	5c9b      	ldrb	r3, [r3, r2]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x22>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e0e5      	b.n	8002a76 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	223c      	movs	r2, #60	@ 0x3c
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b14      	cmp	r3, #20
 80028b6:	d900      	bls.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x32>
 80028b8:	e0d1      	b.n	8002a5e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	4b70      	ldr	r3, [pc, #448]	@ (8002a80 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80028c0:	18d3      	adds	r3, r2, r3
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	0011      	movs	r1, r2
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 fa3e 	bl	8002d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2108      	movs	r1, #8
 80028e0:	430a      	orrs	r2, r1
 80028e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2104      	movs	r1, #4
 80028f0:	438a      	bics	r2, r1
 80028f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6999      	ldr	r1, [r3, #24]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	619a      	str	r2, [r3, #24]
      break;
 8002906:	e0af      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	0011      	movs	r1, r2
 8002910:	0018      	movs	r0, r3
 8002912:	f000 faa7 	bl	8002e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2180      	movs	r1, #128	@ 0x80
 8002922:	0109      	lsls	r1, r1, #4
 8002924:	430a      	orrs	r2, r1
 8002926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4954      	ldr	r1, [pc, #336]	@ (8002a84 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002934:	400a      	ands	r2, r1
 8002936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6999      	ldr	r1, [r3, #24]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	619a      	str	r2, [r3, #24]
      break;
 800294c:	e08c      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	0011      	movs	r1, r2
 8002956:	0018      	movs	r0, r3
 8002958:	f000 fb08 	bl	8002f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2108      	movs	r1, #8
 8002968:	430a      	orrs	r2, r1
 800296a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2104      	movs	r1, #4
 8002978:	438a      	bics	r2, r1
 800297a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69d9      	ldr	r1, [r3, #28]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	61da      	str	r2, [r3, #28]
      break;
 800298e:	e06b      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f000 fb6f 	bl	800307c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2180      	movs	r1, #128	@ 0x80
 80029aa:	0109      	lsls	r1, r1, #4
 80029ac:	430a      	orrs	r2, r1
 80029ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4932      	ldr	r1, [pc, #200]	@ (8002a84 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80029bc:	400a      	ands	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69d9      	ldr	r1, [r3, #28]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	61da      	str	r2, [r3, #28]
      break;
 80029d4:	e048      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	0011      	movs	r1, r2
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 fbb6 	bl	8003150 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2108      	movs	r1, #8
 80029f0:	430a      	orrs	r2, r1
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2104      	movs	r1, #4
 8002a00:	438a      	bics	r2, r1
 8002a02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002a16:	e027      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	0011      	movs	r1, r2
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 fbf5 	bl	8003210 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2180      	movs	r1, #128	@ 0x80
 8002a32:	0109      	lsls	r1, r1, #4
 8002a34:	430a      	orrs	r2, r1
 8002a36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4910      	ldr	r1, [pc, #64]	@ (8002a84 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002a44:	400a      	ands	r2, r1
 8002a46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	021a      	lsls	r2, r3, #8
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002a5c:	e004      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002a5e:	2317      	movs	r3, #23
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
      break;
 8002a66:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	223c      	movs	r2, #60	@ 0x3c
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a70:	2317      	movs	r3, #23
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	781b      	ldrb	r3, [r3, #0]
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b006      	add	sp, #24
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	08006364 	.word	0x08006364
 8002a84:	fffffbff 	.word	0xfffffbff

08002a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	230f      	movs	r3, #15
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	223c      	movs	r2, #60	@ 0x3c
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIM_ConfigClockSource+0x20>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0bc      	b.n	8002c22 <HAL_TIM_ConfigClockSource+0x19a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	223c      	movs	r2, #60	@ 0x3c
 8002aac:	2101      	movs	r1, #1
 8002aae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223d      	movs	r2, #61	@ 0x3d
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c2c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4a59      	ldr	r2, [pc, #356]	@ (8002c30 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2280      	movs	r2, #128	@ 0x80
 8002ade:	0192      	lsls	r2, r2, #6
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d040      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0xde>
 8002ae4:	2280      	movs	r2, #128	@ 0x80
 8002ae6:	0192      	lsls	r2, r2, #6
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d900      	bls.n	8002aee <HAL_TIM_ConfigClockSource+0x66>
 8002aec:	e088      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
 8002aee:	2280      	movs	r2, #128	@ 0x80
 8002af0:	0152      	lsls	r2, r2, #5
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d100      	bne.n	8002af8 <HAL_TIM_ConfigClockSource+0x70>
 8002af6:	e088      	b.n	8002c0a <HAL_TIM_ConfigClockSource+0x182>
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	0152      	lsls	r2, r2, #5
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d900      	bls.n	8002b02 <HAL_TIM_ConfigClockSource+0x7a>
 8002b00:	e07e      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
 8002b02:	2b70      	cmp	r3, #112	@ 0x70
 8002b04:	d018      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0xb0>
 8002b06:	d900      	bls.n	8002b0a <HAL_TIM_ConfigClockSource+0x82>
 8002b08:	e07a      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
 8002b0a:	2b60      	cmp	r3, #96	@ 0x60
 8002b0c:	d04f      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x126>
 8002b0e:	d900      	bls.n	8002b12 <HAL_TIM_ConfigClockSource+0x8a>
 8002b10:	e076      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
 8002b12:	2b50      	cmp	r3, #80	@ 0x50
 8002b14:	d03b      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x106>
 8002b16:	d900      	bls.n	8002b1a <HAL_TIM_ConfigClockSource+0x92>
 8002b18:	e072      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
 8002b1a:	2b40      	cmp	r3, #64	@ 0x40
 8002b1c:	d057      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x146>
 8002b1e:	d900      	bls.n	8002b22 <HAL_TIM_ConfigClockSource+0x9a>
 8002b20:	e06e      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
 8002b22:	2b30      	cmp	r3, #48	@ 0x30
 8002b24:	d063      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x166>
 8002b26:	d86b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d060      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x166>
 8002b2c:	d868      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d05d      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x166>
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d05b      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x166>
 8002b36:	e063      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b48:	f000 fc42 	bl	80033d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2277      	movs	r2, #119	@ 0x77
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
      break;
 8002b64:	e052      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b76:	f000 fc2b 	bl	80033d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2180      	movs	r1, #128	@ 0x80
 8002b86:	01c9      	lsls	r1, r1, #7
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e03e      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	f000 fb9c 	bl	80032d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2150      	movs	r1, #80	@ 0x50
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fbf6 	bl	8003398 <TIM_ITRx_SetConfig>
      break;
 8002bac:	e02e      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bba:	001a      	movs	r2, r3
 8002bbc:	f000 fbba 	bl	8003334 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2160      	movs	r1, #96	@ 0x60
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 fbe6 	bl	8003398 <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e01e      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	001a      	movs	r2, r3
 8002bdc:	f000 fb7c 	bl	80032d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2140      	movs	r1, #64	@ 0x40
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 fbd6 	bl	8003398 <TIM_ITRx_SetConfig>
      break;
 8002bec:	e00e      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	0010      	movs	r0, r2
 8002bfa:	f000 fbcd 	bl	8003398 <TIM_ITRx_SetConfig>
      break;
 8002bfe:	e005      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c00:	230f      	movs	r3, #15
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
      break;
 8002c08:	e000      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c0a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	223d      	movs	r2, #61	@ 0x3d
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	223c      	movs	r2, #60	@ 0x3c
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5499      	strb	r1, [r3, r2]

  return status;
 8002c1c:	230f      	movs	r3, #15
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b004      	add	sp, #16
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	ffceff88 	.word	0xffceff88
 8002c30:	ffff00ff 	.word	0xffff00ff

08002c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a3b      	ldr	r2, [pc, #236]	@ (8002d34 <TIM_Base_SetConfig+0x100>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d008      	beq.n	8002c5e <TIM_Base_SetConfig+0x2a>
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	05db      	lsls	r3, r3, #23
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d003      	beq.n	8002c5e <TIM_Base_SetConfig+0x2a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a37      	ldr	r2, [pc, #220]	@ (8002d38 <TIM_Base_SetConfig+0x104>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d108      	bne.n	8002c70 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2270      	movs	r2, #112	@ 0x70
 8002c62:	4393      	bics	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a30      	ldr	r2, [pc, #192]	@ (8002d34 <TIM_Base_SetConfig+0x100>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d018      	beq.n	8002caa <TIM_Base_SetConfig+0x76>
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	2380      	movs	r3, #128	@ 0x80
 8002c7c:	05db      	lsls	r3, r3, #23
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d013      	beq.n	8002caa <TIM_Base_SetConfig+0x76>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2c      	ldr	r2, [pc, #176]	@ (8002d38 <TIM_Base_SetConfig+0x104>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00f      	beq.n	8002caa <TIM_Base_SetConfig+0x76>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d3c <TIM_Base_SetConfig+0x108>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00b      	beq.n	8002caa <TIM_Base_SetConfig+0x76>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <TIM_Base_SetConfig+0x10c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <TIM_Base_SetConfig+0x76>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a29      	ldr	r2, [pc, #164]	@ (8002d44 <TIM_Base_SetConfig+0x110>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_Base_SetConfig+0x76>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a28      	ldr	r2, [pc, #160]	@ (8002d48 <TIM_Base_SetConfig+0x114>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <TIM_Base_SetConfig+0x118>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2280      	movs	r2, #128	@ 0x80
 8002cc0:	4393      	bics	r3, r2
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <TIM_Base_SetConfig+0x100>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <TIM_Base_SetConfig+0xce>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <TIM_Base_SetConfig+0x10c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_Base_SetConfig+0xce>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a13      	ldr	r2, [pc, #76]	@ (8002d44 <TIM_Base_SetConfig+0x110>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0xce>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a12      	ldr	r2, [pc, #72]	@ (8002d48 <TIM_Base_SetConfig+0x114>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d103      	bne.n	8002d0a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d106      	bne.n	8002d2a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2201      	movs	r2, #1
 8002d22:	4393      	bics	r3, r2
 8002d24:	001a      	movs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	611a      	str	r2, [r3, #16]
  }
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b004      	add	sp, #16
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40002000 	.word	0x40002000
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800
 8002d4c:	fffffcff 	.word	0xfffffcff

08002d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	2201      	movs	r2, #1
 8002d66:	4393      	bics	r3, r2
 8002d68:	001a      	movs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a32      	ldr	r2, [pc, #200]	@ (8002e48 <TIM_OC1_SetConfig+0xf8>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2203      	movs	r2, #3
 8002d86:	4393      	bics	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2202      	movs	r2, #2
 8002d98:	4393      	bics	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a28      	ldr	r2, [pc, #160]	@ (8002e4c <TIM_OC1_SetConfig+0xfc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_OC1_SetConfig+0x76>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <TIM_OC1_SetConfig+0x100>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_OC1_SetConfig+0x76>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a26      	ldr	r2, [pc, #152]	@ (8002e54 <TIM_OC1_SetConfig+0x104>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_OC1_SetConfig+0x76>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a25      	ldr	r2, [pc, #148]	@ (8002e58 <TIM_OC1_SetConfig+0x108>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10c      	bne.n	8002de0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	4393      	bics	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	4393      	bics	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e4c <TIM_OC1_SetConfig+0xfc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00b      	beq.n	8002e00 <TIM_OC1_SetConfig+0xb0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a19      	ldr	r2, [pc, #100]	@ (8002e50 <TIM_OC1_SetConfig+0x100>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <TIM_OC1_SetConfig+0xb0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a18      	ldr	r2, [pc, #96]	@ (8002e54 <TIM_OC1_SetConfig+0x104>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_OC1_SetConfig+0xb0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	@ (8002e58 <TIM_OC1_SetConfig+0x108>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d111      	bne.n	8002e24 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <TIM_OC1_SetConfig+0x10c>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <TIM_OC1_SetConfig+0x110>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b006      	add	sp, #24
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	fffeff8f 	.word	0xfffeff8f
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40014000 	.word	0x40014000
 8002e54:	40014400 	.word	0x40014400
 8002e58:	40014800 	.word	0x40014800
 8002e5c:	fffffeff 	.word	0xfffffeff
 8002e60:	fffffdff 	.word	0xfffffdff

08002e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	2210      	movs	r2, #16
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a2e      	ldr	r2, [pc, #184]	@ (8002f4c <TIM_OC2_SetConfig+0xe8>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a2d      	ldr	r2, [pc, #180]	@ (8002f50 <TIM_OC2_SetConfig+0xec>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2220      	movs	r2, #32
 8002eae:	4393      	bics	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a24      	ldr	r2, [pc, #144]	@ (8002f54 <TIM_OC2_SetConfig+0xf0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10d      	bne.n	8002ee2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2280      	movs	r2, #128	@ 0x80
 8002eca:	4393      	bics	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2240      	movs	r2, #64	@ 0x40
 8002ede:	4393      	bics	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <TIM_OC2_SetConfig+0xf0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00b      	beq.n	8002f02 <TIM_OC2_SetConfig+0x9e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1a      	ldr	r2, [pc, #104]	@ (8002f58 <TIM_OC2_SetConfig+0xf4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <TIM_OC2_SetConfig+0x9e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	@ (8002f5c <TIM_OC2_SetConfig+0xf8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d003      	beq.n	8002f02 <TIM_OC2_SetConfig+0x9e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a18      	ldr	r2, [pc, #96]	@ (8002f60 <TIM_OC2_SetConfig+0xfc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d113      	bne.n	8002f2a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4a17      	ldr	r2, [pc, #92]	@ (8002f64 <TIM_OC2_SetConfig+0x100>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	@ (8002f68 <TIM_OC2_SetConfig+0x104>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	621a      	str	r2, [r3, #32]
}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b006      	add	sp, #24
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	feff8fff 	.word	0xfeff8fff
 8002f50:	fffffcff 	.word	0xfffffcff
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	fffffbff 	.word	0xfffffbff
 8002f68:	fffff7ff 	.word	0xfffff7ff

08002f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a33      	ldr	r2, [pc, #204]	@ (8003050 <TIM_OC3_SetConfig+0xe4>)
 8002f82:	401a      	ands	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a2f      	ldr	r2, [pc, #188]	@ (8003054 <TIM_OC3_SetConfig+0xe8>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	4a29      	ldr	r2, [pc, #164]	@ (8003058 <TIM_OC3_SetConfig+0xec>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	@ (800305c <TIM_OC3_SetConfig+0xf0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10d      	bne.n	8002fe6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	4a24      	ldr	r2, [pc, #144]	@ (8003060 <TIM_OC3_SetConfig+0xf4>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4a20      	ldr	r2, [pc, #128]	@ (8003064 <TIM_OC3_SetConfig+0xf8>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800305c <TIM_OC3_SetConfig+0xf0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00b      	beq.n	8003006 <TIM_OC3_SetConfig+0x9a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <TIM_OC3_SetConfig+0xfc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <TIM_OC3_SetConfig+0x9a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <TIM_OC3_SetConfig+0x100>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_OC3_SetConfig+0x9a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1b      	ldr	r2, [pc, #108]	@ (8003070 <TIM_OC3_SetConfig+0x104>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d113      	bne.n	800302e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4a1a      	ldr	r2, [pc, #104]	@ (8003074 <TIM_OC3_SetConfig+0x108>)
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <TIM_OC3_SetConfig+0x10c>)
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	46c0      	nop			@ (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b006      	add	sp, #24
 800304e:	bd80      	pop	{r7, pc}
 8003050:	fffffeff 	.word	0xfffffeff
 8003054:	fffeff8f 	.word	0xfffeff8f
 8003058:	fffffdff 	.word	0xfffffdff
 800305c:	40012c00 	.word	0x40012c00
 8003060:	fffff7ff 	.word	0xfffff7ff
 8003064:	fffffbff 	.word	0xfffffbff
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800
 8003074:	ffffefff 	.word	0xffffefff
 8003078:	ffffdfff 	.word	0xffffdfff

0800307c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a26      	ldr	r2, [pc, #152]	@ (800312c <TIM_OC4_SetConfig+0xb0>)
 8003092:	401a      	ands	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a22      	ldr	r2, [pc, #136]	@ (8003130 <TIM_OC4_SetConfig+0xb4>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a21      	ldr	r2, [pc, #132]	@ (8003134 <TIM_OC4_SetConfig+0xb8>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <TIM_OC4_SetConfig+0xbc>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	031b      	lsls	r3, r3, #12
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a19      	ldr	r2, [pc, #100]	@ (800313c <TIM_OC4_SetConfig+0xc0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_OC4_SetConfig+0x78>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <TIM_OC4_SetConfig+0xc4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_OC4_SetConfig+0x78>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <TIM_OC4_SetConfig+0xc8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_OC4_SetConfig+0x78>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a16      	ldr	r2, [pc, #88]	@ (8003148 <TIM_OC4_SetConfig+0xcc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d109      	bne.n	8003108 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4a15      	ldr	r2, [pc, #84]	@ (800314c <TIM_OC4_SetConfig+0xd0>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	019b      	lsls	r3, r3, #6
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b006      	add	sp, #24
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	ffffefff 	.word	0xffffefff
 8003130:	feff8fff 	.word	0xfeff8fff
 8003134:	fffffcff 	.word	0xfffffcff
 8003138:	ffffdfff 	.word	0xffffdfff
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40014000 	.word	0x40014000
 8003144:	40014400 	.word	0x40014400
 8003148:	40014800 	.word	0x40014800
 800314c:	ffffbfff 	.word	0xffffbfff

08003150 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4a23      	ldr	r2, [pc, #140]	@ (80031f4 <TIM_OC5_SetConfig+0xa4>)
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a1f      	ldr	r2, [pc, #124]	@ (80031f8 <TIM_OC5_SetConfig+0xa8>)
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4a1b      	ldr	r2, [pc, #108]	@ (80031fc <TIM_OC5_SetConfig+0xac>)
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a17      	ldr	r2, [pc, #92]	@ (8003200 <TIM_OC5_SetConfig+0xb0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00b      	beq.n	80031be <TIM_OC5_SetConfig+0x6e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a16      	ldr	r2, [pc, #88]	@ (8003204 <TIM_OC5_SetConfig+0xb4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_OC5_SetConfig+0x6e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a15      	ldr	r2, [pc, #84]	@ (8003208 <TIM_OC5_SetConfig+0xb8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_OC5_SetConfig+0x6e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a14      	ldr	r2, [pc, #80]	@ (800320c <TIM_OC5_SetConfig+0xbc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d109      	bne.n	80031d2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a0c      	ldr	r2, [pc, #48]	@ (80031f4 <TIM_OC5_SetConfig+0xa4>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	46c0      	nop			@ (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b006      	add	sp, #24
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	fffeffff 	.word	0xfffeffff
 80031f8:	fffeff8f 	.word	0xfffeff8f
 80031fc:	fffdffff 	.word	0xfffdffff
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40014000 	.word	0x40014000
 8003208:	40014400 	.word	0x40014400
 800320c:	40014800 	.word	0x40014800

08003210 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a24      	ldr	r2, [pc, #144]	@ (80032b8 <TIM_OC6_SetConfig+0xa8>)
 8003226:	401a      	ands	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a20      	ldr	r2, [pc, #128]	@ (80032bc <TIM_OC6_SetConfig+0xac>)
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <TIM_OC6_SetConfig+0xb0>)
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	051b      	lsls	r3, r3, #20
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <TIM_OC6_SetConfig+0xb4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_OC6_SetConfig+0x70>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a17      	ldr	r2, [pc, #92]	@ (80032c8 <TIM_OC6_SetConfig+0xb8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_OC6_SetConfig+0x70>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a16      	ldr	r2, [pc, #88]	@ (80032cc <TIM_OC6_SetConfig+0xbc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_OC6_SetConfig+0x70>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <TIM_OC6_SetConfig+0xc0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d109      	bne.n	8003294 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	4a14      	ldr	r2, [pc, #80]	@ (80032d4 <TIM_OC6_SetConfig+0xc4>)
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	029b      	lsls	r3, r3, #10
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b006      	add	sp, #24
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	ffefffff 	.word	0xffefffff
 80032bc:	feff8fff 	.word	0xfeff8fff
 80032c0:	ffdfffff 	.word	0xffdfffff
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40014400 	.word	0x40014400
 80032d0:	40014800 	.word	0x40014800
 80032d4:	fffbffff 	.word	0xfffbffff

080032d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	2201      	movs	r2, #1
 80032f0:	4393      	bics	r3, r2
 80032f2:	001a      	movs	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	22f0      	movs	r2, #240	@ 0xf0
 8003302:	4393      	bics	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	220a      	movs	r2, #10
 8003314:	4393      	bics	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	621a      	str	r2, [r3, #32]
}
 800332c:	46c0      	nop			@ (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b006      	add	sp, #24
 8003332:	bd80      	pop	{r7, pc}

08003334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	2210      	movs	r2, #16
 800334c:	4393      	bics	r3, r2
 800334e:	001a      	movs	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4a0d      	ldr	r2, [pc, #52]	@ (8003394 <TIM_TI2_ConfigInputStage+0x60>)
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	031b      	lsls	r3, r3, #12
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	22a0      	movs	r2, #160	@ 0xa0
 8003370:	4393      	bics	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b006      	add	sp, #24
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	ffff0fff 	.word	0xffff0fff

08003398 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a08      	ldr	r2, [pc, #32]	@ (80033cc <TIM_ITRx_SetConfig+0x34>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	2207      	movs	r2, #7
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	609a      	str	r2, [r3, #8]
}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b004      	add	sp, #16
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	ffcfff8f 	.word	0xffcfff8f

080033d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4a09      	ldr	r2, [pc, #36]	@ (800340c <TIM_ETR_SetConfig+0x3c>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	609a      	str	r2, [r3, #8]
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b006      	add	sp, #24
 800340a:	bd80      	pop	{r7, pc}
 800340c:	ffff00ff 	.word	0xffff00ff

08003410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	221f      	movs	r2, #31
 8003420:	4013      	ands	r3, r2
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	0013      	movs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	43d2      	mvns	r2, r2
 8003432:	401a      	ands	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	211f      	movs	r1, #31
 8003440:	400b      	ands	r3, r1
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4099      	lsls	r1, r3
 8003446:	000b      	movs	r3, r1
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b006      	add	sp, #24
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	223c      	movs	r2, #60	@ 0x3c
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800346c:	2302      	movs	r3, #2
 800346e:	e055      	b.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	223c      	movs	r2, #60	@ 0x3c
 8003474:	2101      	movs	r1, #1
 8003476:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	223d      	movs	r2, #61	@ 0x3d
 800347c:	2102      	movs	r1, #2
 800347e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a23      	ldr	r2, [pc, #140]	@ (8003524 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d108      	bne.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800349e:	4013      	ands	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2270      	movs	r2, #112	@ 0x70
 80034b0:	4393      	bics	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a16      	ldr	r2, [pc, #88]	@ (8003524 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00f      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	429a      	cmp	r2, r3
 80034da:	d009      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a12      	ldr	r2, [pc, #72]	@ (800352c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a11      	ldr	r2, [pc, #68]	@ (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10c      	bne.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2280      	movs	r2, #128	@ 0x80
 80034f4:	4393      	bics	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223d      	movs	r2, #61	@ 0x3d
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223c      	movs	r2, #60	@ 0x3c
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40012c00 	.word	0x40012c00
 8003528:	ff0fffff 	.word	0xff0fffff
 800352c:	40000400 	.word	0x40000400
 8003530:	40014000 	.word	0x40014000

08003534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e046      	b.n	80035d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2288      	movs	r2, #136	@ 0x88
 800354a:	589b      	ldr	r3, [r3, r2]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2284      	movs	r2, #132	@ 0x84
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0018      	movs	r0, r3
 800355c:	f7fd fc26 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2288      	movs	r2, #136	@ 0x88
 8003564:	2124      	movs	r1, #36	@ 0x24
 8003566:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2101      	movs	r1, #1
 8003574:	438a      	bics	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0018      	movs	r0, r3
 8003584:	f000 ff2e 	bl	80043e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 fc6c 	bl	8003e68 <UART_SetConfig>
 8003590:	0003      	movs	r3, r0
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e01c      	b.n	80035d4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	490d      	ldr	r1, [pc, #52]	@ (80035dc <HAL_UART_Init+0xa8>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	212a      	movs	r1, #42	@ 0x2a
 80035b6:	438a      	bics	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 ffbd 	bl	800454c <UART_CheckIdleState>
 80035d2:	0003      	movs	r3, r0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	ffffb7ff 	.word	0xffffb7ff

080035e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	@ 0x28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	1dbb      	adds	r3, r7, #6
 80035ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2288      	movs	r2, #136	@ 0x88
 80035f4:	589b      	ldr	r3, [r3, r2]
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d000      	beq.n	80035fc <HAL_UART_Transmit+0x1c>
 80035fa:	e090      	b.n	800371e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_UART_Transmit+0x2a>
 8003602:	1dbb      	adds	r3, r7, #6
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e088      	b.n	8003720 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	015b      	lsls	r3, r3, #5
 8003616:	429a      	cmp	r2, r3
 8003618:	d109      	bne.n	800362e <HAL_UART_Transmit+0x4e>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2201      	movs	r2, #1
 8003626:	4013      	ands	r3, r2
 8003628:	d001      	beq.n	800362e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e078      	b.n	8003720 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2290      	movs	r2, #144	@ 0x90
 8003632:	2100      	movs	r1, #0
 8003634:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2288      	movs	r2, #136	@ 0x88
 800363a:	2121      	movs	r1, #33	@ 0x21
 800363c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800363e:	f7fd fd83 	bl	8001148 <HAL_GetTick>
 8003642:	0003      	movs	r3, r0
 8003644:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1dba      	adds	r2, r7, #6
 800364a:	2154      	movs	r1, #84	@ 0x54
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1dba      	adds	r2, r7, #6
 8003654:	2156      	movs	r1, #86	@ 0x56
 8003656:	8812      	ldrh	r2, [r2, #0]
 8003658:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	015b      	lsls	r3, r3, #5
 8003662:	429a      	cmp	r2, r3
 8003664:	d108      	bne.n	8003678 <HAL_UART_Transmit+0x98>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e003      	b.n	8003680 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003680:	e030      	b.n	80036e4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0013      	movs	r3, r2
 800368c:	2200      	movs	r2, #0
 800368e:	2180      	movs	r1, #128	@ 0x80
 8003690:	f001 f806 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d005      	beq.n	80036a4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2288      	movs	r2, #136	@ 0x88
 800369c:	2120      	movs	r1, #32
 800369e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e03d      	b.n	8003720 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	001a      	movs	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	05d2      	lsls	r2, r2, #23
 80036b6:	0dd2      	lsrs	r2, r2, #23
 80036b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3302      	adds	r3, #2
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	e007      	b.n	80036d2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3301      	adds	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2256      	movs	r2, #86	@ 0x56
 80036d6:	5a9b      	ldrh	r3, [r3, r2]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b299      	uxth	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2256      	movs	r2, #86	@ 0x56
 80036e2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2256      	movs	r2, #86	@ 0x56
 80036e8:	5a9b      	ldrh	r3, [r3, r2]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1c8      	bne.n	8003682 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	0013      	movs	r3, r2
 80036fa:	2200      	movs	r2, #0
 80036fc:	2140      	movs	r1, #64	@ 0x40
 80036fe:	f000 ffcf 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8003702:	1e03      	subs	r3, r0, #0
 8003704:	d005      	beq.n	8003712 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2288      	movs	r2, #136	@ 0x88
 800370a:	2120      	movs	r1, #32
 800370c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e006      	b.n	8003720 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2288      	movs	r2, #136	@ 0x88
 8003716:	2120      	movs	r1, #32
 8003718:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b008      	add	sp, #32
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	1dbb      	adds	r3, r7, #6
 8003734:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	228c      	movs	r2, #140	@ 0x8c
 800373a:	589b      	ldr	r3, [r3, r2]
 800373c:	2b20      	cmp	r3, #32
 800373e:	d14a      	bne.n	80037d6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_UART_Receive_IT+0x26>
 8003746:	1dbb      	adds	r3, r7, #6
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e042      	b.n	80037d8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	2380      	movs	r3, #128	@ 0x80
 8003758:	015b      	lsls	r3, r3, #5
 800375a:	429a      	cmp	r2, r3
 800375c:	d109      	bne.n	8003772 <HAL_UART_Receive_IT+0x4a>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	d001      	beq.n	8003772 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e032      	b.n	80037d8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a18      	ldr	r2, [pc, #96]	@ (80037e0 <HAL_UART_Receive_IT+0xb8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d020      	beq.n	80037c4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	4013      	ands	r3, r2
 800378e:	d019      	beq.n	80037c4 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003790:	f3ef 8310 	mrs	r3, PRIMASK
 8003794:	613b      	str	r3, [r7, #16]
  return(result);
 8003796:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	2301      	movs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			@ (mov r8, r8)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2180      	movs	r1, #128	@ 0x80
 80037b2:	04c9      	lsls	r1, r1, #19
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f383 8810 	msr	PRIMASK, r3
}
 80037c2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037c4:	1dbb      	adds	r3, r7, #6
 80037c6:	881a      	ldrh	r2, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 ffd7 	bl	8004780 <UART_Start_Receive_IT>
 80037d2:	0003      	movs	r3, r0
 80037d4:	e000      	b.n	80037d8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b008      	add	sp, #32
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40008000 	.word	0x40008000

080037e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e4:	b5b0      	push	{r4, r5, r7, lr}
 80037e6:	b0aa      	sub	sp, #168	@ 0xa8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	22a4      	movs	r2, #164	@ 0xa4
 80037f4:	18b9      	adds	r1, r7, r2
 80037f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	20a0      	movs	r0, #160	@ 0xa0
 8003800:	1839      	adds	r1, r7, r0
 8003802:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	249c      	movs	r4, #156	@ 0x9c
 800380c:	1939      	adds	r1, r7, r4
 800380e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003810:	0011      	movs	r1, r2
 8003812:	18bb      	adds	r3, r7, r2
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4aa2      	ldr	r2, [pc, #648]	@ (8003aa0 <HAL_UART_IRQHandler+0x2bc>)
 8003818:	4013      	ands	r3, r2
 800381a:	2298      	movs	r2, #152	@ 0x98
 800381c:	18bd      	adds	r5, r7, r2
 800381e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003820:	18bb      	adds	r3, r7, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11a      	bne.n	800385e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003828:	187b      	adds	r3, r7, r1
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2220      	movs	r2, #32
 800382e:	4013      	ands	r3, r2
 8003830:	d015      	beq.n	800385e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003832:	183b      	adds	r3, r7, r0
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2220      	movs	r2, #32
 8003838:	4013      	ands	r3, r2
 800383a:	d105      	bne.n	8003848 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800383c:	193b      	adds	r3, r7, r4
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	055b      	lsls	r3, r3, #21
 8003844:	4013      	ands	r3, r2
 8003846:	d00a      	beq.n	800385e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384c:	2b00      	cmp	r3, #0
 800384e:	d100      	bne.n	8003852 <HAL_UART_IRQHandler+0x6e>
 8003850:	e2dc      	b.n	8003e0c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	0010      	movs	r0, r2
 800385a:	4798      	blx	r3
      }
      return;
 800385c:	e2d6      	b.n	8003e0c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800385e:	2398      	movs	r3, #152	@ 0x98
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d100      	bne.n	800386a <HAL_UART_IRQHandler+0x86>
 8003868:	e122      	b.n	8003ab0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800386a:	239c      	movs	r3, #156	@ 0x9c
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a8c      	ldr	r2, [pc, #560]	@ (8003aa4 <HAL_UART_IRQHandler+0x2c0>)
 8003872:	4013      	ands	r3, r2
 8003874:	d106      	bne.n	8003884 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003876:	23a0      	movs	r3, #160	@ 0xa0
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a8a      	ldr	r2, [pc, #552]	@ (8003aa8 <HAL_UART_IRQHandler+0x2c4>)
 800387e:	4013      	ands	r3, r2
 8003880:	d100      	bne.n	8003884 <HAL_UART_IRQHandler+0xa0>
 8003882:	e115      	b.n	8003ab0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003884:	23a4      	movs	r3, #164	@ 0xa4
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	4013      	ands	r3, r2
 800388e:	d012      	beq.n	80038b6 <HAL_UART_IRQHandler+0xd2>
 8003890:	23a0      	movs	r3, #160	@ 0xa0
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4013      	ands	r3, r2
 800389c:	d00b      	beq.n	80038b6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2290      	movs	r2, #144	@ 0x90
 80038aa:	589b      	ldr	r3, [r3, r2]
 80038ac:	2201      	movs	r2, #1
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2190      	movs	r1, #144	@ 0x90
 80038b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038b6:	23a4      	movs	r3, #164	@ 0xa4
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2202      	movs	r2, #2
 80038be:	4013      	ands	r3, r2
 80038c0:	d011      	beq.n	80038e6 <HAL_UART_IRQHandler+0x102>
 80038c2:	239c      	movs	r3, #156	@ 0x9c
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2201      	movs	r2, #1
 80038ca:	4013      	ands	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2202      	movs	r2, #2
 80038d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2290      	movs	r2, #144	@ 0x90
 80038da:	589b      	ldr	r3, [r3, r2]
 80038dc:	2204      	movs	r2, #4
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2190      	movs	r1, #144	@ 0x90
 80038e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038e6:	23a4      	movs	r3, #164	@ 0xa4
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2204      	movs	r2, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	d011      	beq.n	8003916 <HAL_UART_IRQHandler+0x132>
 80038f2:	239c      	movs	r3, #156	@ 0x9c
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	d00b      	beq.n	8003916 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2204      	movs	r2, #4
 8003904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2290      	movs	r2, #144	@ 0x90
 800390a:	589b      	ldr	r3, [r3, r2]
 800390c:	2202      	movs	r2, #2
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2190      	movs	r1, #144	@ 0x90
 8003914:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003916:	23a4      	movs	r3, #164	@ 0xa4
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2208      	movs	r2, #8
 800391e:	4013      	ands	r3, r2
 8003920:	d017      	beq.n	8003952 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003922:	23a0      	movs	r3, #160	@ 0xa0
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2220      	movs	r2, #32
 800392a:	4013      	ands	r3, r2
 800392c:	d105      	bne.n	800393a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800392e:	239c      	movs	r3, #156	@ 0x9c
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa4 <HAL_UART_IRQHandler+0x2c0>)
 8003936:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003938:	d00b      	beq.n	8003952 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2208      	movs	r2, #8
 8003940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2290      	movs	r2, #144	@ 0x90
 8003946:	589b      	ldr	r3, [r3, r2]
 8003948:	2208      	movs	r2, #8
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2190      	movs	r1, #144	@ 0x90
 8003950:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003952:	23a4      	movs	r3, #164	@ 0xa4
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_UART_IRQHandler+0x1a4>
 8003960:	23a0      	movs	r3, #160	@ 0xa0
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	2380      	movs	r3, #128	@ 0x80
 8003968:	04db      	lsls	r3, r3, #19
 800396a:	4013      	ands	r3, r2
 800396c:	d00c      	beq.n	8003988 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2280      	movs	r2, #128	@ 0x80
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2290      	movs	r2, #144	@ 0x90
 800397c:	589b      	ldr	r3, [r3, r2]
 800397e:	2220      	movs	r2, #32
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2190      	movs	r1, #144	@ 0x90
 8003986:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2290      	movs	r2, #144	@ 0x90
 800398c:	589b      	ldr	r3, [r3, r2]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d100      	bne.n	8003994 <HAL_UART_IRQHandler+0x1b0>
 8003992:	e23d      	b.n	8003e10 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003994:	23a4      	movs	r3, #164	@ 0xa4
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2220      	movs	r2, #32
 800399c:	4013      	ands	r3, r2
 800399e:	d015      	beq.n	80039cc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039a0:	23a0      	movs	r3, #160	@ 0xa0
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2220      	movs	r2, #32
 80039a8:	4013      	ands	r3, r2
 80039aa:	d106      	bne.n	80039ba <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039ac:	239c      	movs	r3, #156	@ 0x9c
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	2380      	movs	r3, #128	@ 0x80
 80039b4:	055b      	lsls	r3, r3, #21
 80039b6:	4013      	ands	r3, r2
 80039b8:	d008      	beq.n	80039cc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	0010      	movs	r0, r2
 80039ca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2290      	movs	r2, #144	@ 0x90
 80039d0:	589b      	ldr	r3, [r3, r2]
 80039d2:	2194      	movs	r1, #148	@ 0x94
 80039d4:	187a      	adds	r2, r7, r1
 80039d6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2240      	movs	r2, #64	@ 0x40
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d004      	beq.n	80039f0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2228      	movs	r2, #40	@ 0x28
 80039ec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039ee:	d04c      	beq.n	8003a8a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 ffe8 	bl	80049c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2240      	movs	r2, #64	@ 0x40
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d13c      	bne.n	8003a80 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a06:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003a0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0e:	2090      	movs	r0, #144	@ 0x90
 8003a10:	183a      	adds	r2, r7, r0
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	2301      	movs	r3, #1
 8003a16:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a1a:	f383 8810 	msr	PRIMASK, r3
}
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2140      	movs	r1, #64	@ 0x40
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	183b      	adds	r3, r7, r0
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a38:	f383 8810 	msr	PRIMASK, r3
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2280      	movs	r2, #128	@ 0x80
 8003a42:	589b      	ldr	r3, [r3, r2]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d016      	beq.n	8003a76 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2280      	movs	r2, #128	@ 0x80
 8003a4c:	589b      	ldr	r3, [r3, r2]
 8003a4e:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <HAL_UART_IRQHandler+0x2c8>)
 8003a50:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2280      	movs	r2, #128	@ 0x80
 8003a56:	589b      	ldr	r3, [r3, r2]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7fd fcbf 	bl	80013dc <HAL_DMA_Abort_IT>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d01c      	beq.n	8003a9c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	589b      	ldr	r3, [r3, r2]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	2180      	movs	r1, #128	@ 0x80
 8003a6e:	5852      	ldr	r2, [r2, r1]
 8003a70:	0010      	movs	r0, r2
 8003a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	e012      	b.n	8003a9c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f000 f9e1 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7e:	e00d      	b.n	8003a9c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 f9dc 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	e008      	b.n	8003a9c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 f9d7 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2290      	movs	r2, #144	@ 0x90
 8003a96:	2100      	movs	r1, #0
 8003a98:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a9a:	e1b9      	b.n	8003e10 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	46c0      	nop			@ (mov r8, r8)
    return;
 8003a9e:	e1b7      	b.n	8003e10 <HAL_UART_IRQHandler+0x62c>
 8003aa0:	0000080f 	.word	0x0000080f
 8003aa4:	10000001 	.word	0x10000001
 8003aa8:	04000120 	.word	0x04000120
 8003aac:	08004a95 	.word	0x08004a95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d000      	beq.n	8003aba <HAL_UART_IRQHandler+0x2d6>
 8003ab8:	e13e      	b.n	8003d38 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aba:	23a4      	movs	r3, #164	@ 0xa4
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d100      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x2e4>
 8003ac6:	e137      	b.n	8003d38 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ac8:	23a0      	movs	r3, #160	@ 0xa0
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2210      	movs	r2, #16
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x2f2>
 8003ad4:	e130      	b.n	8003d38 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2210      	movs	r2, #16
 8003adc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2240      	movs	r2, #64	@ 0x40
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b40      	cmp	r3, #64	@ 0x40
 8003aea:	d000      	beq.n	8003aee <HAL_UART_IRQHandler+0x30a>
 8003aec:	e0a4      	b.n	8003c38 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2280      	movs	r2, #128	@ 0x80
 8003af2:	589b      	ldr	r3, [r3, r2]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	217e      	movs	r1, #126	@ 0x7e
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d100      	bne.n	8003b08 <HAL_UART_IRQHandler+0x324>
 8003b06:	e185      	b.n	8003e14 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	225c      	movs	r2, #92	@ 0x5c
 8003b0c:	5a9b      	ldrh	r3, [r3, r2]
 8003b0e:	187a      	adds	r2, r7, r1
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d300      	bcc.n	8003b18 <HAL_UART_IRQHandler+0x334>
 8003b16:	e17d      	b.n	8003e14 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	187a      	adds	r2, r7, r1
 8003b1c:	215e      	movs	r1, #94	@ 0x5e
 8003b1e:	8812      	ldrh	r2, [r2, #0]
 8003b20:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2280      	movs	r2, #128	@ 0x80
 8003b26:	589b      	ldr	r3, [r3, r2]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d170      	bne.n	8003c14 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b32:	f3ef 8310 	mrs	r3, PRIMASK
 8003b36:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	49b4      	ldr	r1, [pc, #720]	@ (8003e24 <HAL_UART_IRQHandler+0x640>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5e:	f383 8810 	msr	PRIMASK, r3
}
 8003b62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b64:	f3ef 8310 	mrs	r3, PRIMASK
 8003b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b6e:	2301      	movs	r3, #1
 8003b70:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	438a      	bics	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b8c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b96:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2140      	movs	r1, #64	@ 0x40
 8003bb8:	438a      	bics	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bbe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	228c      	movs	r2, #140	@ 0x8c
 8003bcc:	2120      	movs	r1, #32
 8003bce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bda:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003be0:	2301      	movs	r3, #1
 8003be2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2110      	movs	r1, #16
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c02:	f383 8810 	msr	PRIMASK, r3
}
 8003c06:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2280      	movs	r2, #128	@ 0x80
 8003c0c:	589b      	ldr	r3, [r3, r2]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7fd fb82 	bl	8001318 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	225c      	movs	r2, #92	@ 0x5c
 8003c1e:	5a9a      	ldrh	r2, [r3, r2]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	215e      	movs	r1, #94	@ 0x5e
 8003c24:	5a5b      	ldrh	r3, [r3, r1]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	0011      	movs	r1, r2
 8003c30:	0018      	movs	r0, r3
 8003c32:	f000 f90d 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c36:	e0ed      	b.n	8003e14 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	225c      	movs	r2, #92	@ 0x5c
 8003c3c:	5a99      	ldrh	r1, [r3, r2]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	225e      	movs	r2, #94	@ 0x5e
 8003c42:	5a9b      	ldrh	r3, [r3, r2]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	208e      	movs	r0, #142	@ 0x8e
 8003c48:	183b      	adds	r3, r7, r0
 8003c4a:	1a8a      	subs	r2, r1, r2
 8003c4c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	225e      	movs	r2, #94	@ 0x5e
 8003c52:	5a9b      	ldrh	r3, [r3, r2]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d100      	bne.n	8003c5c <HAL_UART_IRQHandler+0x478>
 8003c5a:	e0dd      	b.n	8003e18 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003c5c:	183b      	adds	r3, r7, r0
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d100      	bne.n	8003c66 <HAL_UART_IRQHandler+0x482>
 8003c64:	e0d8      	b.n	8003e18 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c66:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c6e:	2488      	movs	r4, #136	@ 0x88
 8003c70:	193a      	adds	r2, r7, r4
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	2301      	movs	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4967      	ldr	r1, [pc, #412]	@ (8003e28 <HAL_UART_IRQHandler+0x644>)
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	193b      	adds	r3, r7, r4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f383 8810 	msr	PRIMASK, r3
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ca4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ca6:	2484      	movs	r4, #132	@ 0x84
 8003ca8:	193a      	adds	r2, r7, r4
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	2301      	movs	r3, #1
 8003cae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f383 8810 	msr	PRIMASK, r3
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	495a      	ldr	r1, [pc, #360]	@ (8003e2c <HAL_UART_IRQHandler+0x648>)
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	193b      	adds	r3, r7, r4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f383 8810 	msr	PRIMASK, r3
}
 8003cd4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	228c      	movs	r2, #140	@ 0x8c
 8003cda:	2120      	movs	r1, #32
 8003cdc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cea:	f3ef 8310 	mrs	r3, PRIMASK
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf2:	2480      	movs	r4, #128	@ 0x80
 8003cf4:	193a      	adds	r2, r7, r4
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2110      	movs	r1, #16
 8003d10:	438a      	bics	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	193b      	adds	r3, r7, r4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d28:	183b      	adds	r3, r7, r0
 8003d2a:	881a      	ldrh	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 f88d 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d36:	e06f      	b.n	8003e18 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d38:	23a4      	movs	r3, #164	@ 0xa4
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	2380      	movs	r3, #128	@ 0x80
 8003d40:	035b      	lsls	r3, r3, #13
 8003d42:	4013      	ands	r3, r2
 8003d44:	d010      	beq.n	8003d68 <HAL_UART_IRQHandler+0x584>
 8003d46:	239c      	movs	r3, #156	@ 0x9c
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2380      	movs	r3, #128	@ 0x80
 8003d4e:	03db      	lsls	r3, r3, #15
 8003d50:	4013      	ands	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2280      	movs	r2, #128	@ 0x80
 8003d5a:	0352      	lsls	r2, r2, #13
 8003d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f001 fbeb 	bl	800553c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d66:	e05a      	b.n	8003e1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003d68:	23a4      	movs	r3, #164	@ 0xa4
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2280      	movs	r2, #128	@ 0x80
 8003d70:	4013      	ands	r3, r2
 8003d72:	d016      	beq.n	8003da2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d74:	23a0      	movs	r3, #160	@ 0xa0
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2280      	movs	r2, #128	@ 0x80
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d106      	bne.n	8003d8e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003d80:	239c      	movs	r3, #156	@ 0x9c
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d042      	beq.n	8003e1c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	0010      	movs	r0, r2
 8003d9e:	4798      	blx	r3
    }
    return;
 8003da0:	e03c      	b.n	8003e1c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003da2:	23a4      	movs	r3, #164	@ 0xa4
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2240      	movs	r2, #64	@ 0x40
 8003daa:	4013      	ands	r3, r2
 8003dac:	d00a      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x5e0>
 8003dae:	23a0      	movs	r3, #160	@ 0xa0
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2240      	movs	r2, #64	@ 0x40
 8003db6:	4013      	ands	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 fe80 	bl	8004ac2 <UART_EndTransmit_IT>
    return;
 8003dc2:	e02c      	b.n	8003e1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003dc4:	23a4      	movs	r3, #164	@ 0xa4
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <HAL_UART_IRQHandler+0x606>
 8003dd2:	23a0      	movs	r3, #160	@ 0xa0
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	05db      	lsls	r3, r3, #23
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f001 fbba 	bl	800555c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003de8:	e019      	b.n	8003e1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003dea:	23a4      	movs	r3, #164	@ 0xa4
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	2380      	movs	r3, #128	@ 0x80
 8003df2:	045b      	lsls	r3, r3, #17
 8003df4:	4013      	ands	r3, r2
 8003df6:	d012      	beq.n	8003e1e <HAL_UART_IRQHandler+0x63a>
 8003df8:	23a0      	movs	r3, #160	@ 0xa0
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da0d      	bge.n	8003e1e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f001 fba1 	bl	800554c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e0a:	e008      	b.n	8003e1e <HAL_UART_IRQHandler+0x63a>
      return;
 8003e0c:	46c0      	nop			@ (mov r8, r8)
 8003e0e:	e006      	b.n	8003e1e <HAL_UART_IRQHandler+0x63a>
    return;
 8003e10:	46c0      	nop			@ (mov r8, r8)
 8003e12:	e004      	b.n	8003e1e <HAL_UART_IRQHandler+0x63a>
      return;
 8003e14:	46c0      	nop			@ (mov r8, r8)
 8003e16:	e002      	b.n	8003e1e <HAL_UART_IRQHandler+0x63a>
      return;
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_IRQHandler+0x63a>
    return;
 8003e1c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b02a      	add	sp, #168	@ 0xa8
 8003e22:	bdb0      	pop	{r4, r5, r7, pc}
 8003e24:	fffffeff 	.word	0xfffffeff
 8003e28:	fffffedf 	.word	0xfffffedf
 8003e2c:	effffffe 	.word	0xeffffffe

08003e30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e48:	46c0      	nop			@ (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	000a      	movs	r2, r1
 8003e5a:	1cbb      	adds	r3, r7, #2
 8003e5c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b5b0      	push	{r4, r5, r7, lr}
 8003e6a:	b090      	sub	sp, #64	@ 0x40
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e70:	231a      	movs	r3, #26
 8003e72:	2220      	movs	r2, #32
 8003e74:	189b      	adds	r3, r3, r2
 8003e76:	19db      	adds	r3, r3, r7
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4aaf      	ldr	r2, [pc, #700]	@ (8004158 <UART_SetConfig+0x2f0>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4aaa      	ldr	r2, [pc, #680]	@ (800415c <UART_SetConfig+0x2f4>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	68d9      	ldr	r1, [r3, #12]
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4aa4      	ldr	r2, [pc, #656]	@ (8004160 <UART_SetConfig+0x2f8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eda:	4313      	orrs	r3, r2
 8003edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a9f      	ldr	r2, [pc, #636]	@ (8004164 <UART_SetConfig+0x2fc>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	220f      	movs	r2, #15
 8003efc:	4393      	bics	r3, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	0003      	movs	r3, r0
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a95      	ldr	r2, [pc, #596]	@ (8004168 <UART_SetConfig+0x300>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d131      	bne.n	8003f7c <UART_SetConfig+0x114>
 8003f18:	4b94      	ldr	r3, [pc, #592]	@ (800416c <UART_SetConfig+0x304>)
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d01d      	beq.n	8003f60 <UART_SetConfig+0xf8>
 8003f24:	d823      	bhi.n	8003f6e <UART_SetConfig+0x106>
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d00c      	beq.n	8003f44 <UART_SetConfig+0xdc>
 8003f2a:	d820      	bhi.n	8003f6e <UART_SetConfig+0x106>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <UART_SetConfig+0xce>
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d00e      	beq.n	8003f52 <UART_SetConfig+0xea>
 8003f34:	e01b      	b.n	8003f6e <UART_SetConfig+0x106>
 8003f36:	231b      	movs	r3, #27
 8003f38:	2220      	movs	r2, #32
 8003f3a:	189b      	adds	r3, r3, r2
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e0b4      	b.n	80040ae <UART_SetConfig+0x246>
 8003f44:	231b      	movs	r3, #27
 8003f46:	2220      	movs	r2, #32
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	19db      	adds	r3, r3, r7
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e0ad      	b.n	80040ae <UART_SetConfig+0x246>
 8003f52:	231b      	movs	r3, #27
 8003f54:	2220      	movs	r2, #32
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e0a6      	b.n	80040ae <UART_SetConfig+0x246>
 8003f60:	231b      	movs	r3, #27
 8003f62:	2220      	movs	r2, #32
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	2208      	movs	r2, #8
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e09f      	b.n	80040ae <UART_SetConfig+0x246>
 8003f6e:	231b      	movs	r3, #27
 8003f70:	2220      	movs	r2, #32
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	19db      	adds	r3, r3, r7
 8003f76:	2210      	movs	r2, #16
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e098      	b.n	80040ae <UART_SetConfig+0x246>
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7b      	ldr	r2, [pc, #492]	@ (8004170 <UART_SetConfig+0x308>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d131      	bne.n	8003fea <UART_SetConfig+0x182>
 8003f86:	4b79      	ldr	r3, [pc, #484]	@ (800416c <UART_SetConfig+0x304>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	220c      	movs	r2, #12
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d01d      	beq.n	8003fce <UART_SetConfig+0x166>
 8003f92:	d823      	bhi.n	8003fdc <UART_SetConfig+0x174>
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d00c      	beq.n	8003fb2 <UART_SetConfig+0x14a>
 8003f98:	d820      	bhi.n	8003fdc <UART_SetConfig+0x174>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <UART_SetConfig+0x13c>
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d00e      	beq.n	8003fc0 <UART_SetConfig+0x158>
 8003fa2:	e01b      	b.n	8003fdc <UART_SetConfig+0x174>
 8003fa4:	231b      	movs	r3, #27
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	189b      	adds	r3, r3, r2
 8003faa:	19db      	adds	r3, r3, r7
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e07d      	b.n	80040ae <UART_SetConfig+0x246>
 8003fb2:	231b      	movs	r3, #27
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	19db      	adds	r3, r3, r7
 8003fba:	2202      	movs	r2, #2
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e076      	b.n	80040ae <UART_SetConfig+0x246>
 8003fc0:	231b      	movs	r3, #27
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	189b      	adds	r3, r3, r2
 8003fc6:	19db      	adds	r3, r3, r7
 8003fc8:	2204      	movs	r2, #4
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	e06f      	b.n	80040ae <UART_SetConfig+0x246>
 8003fce:	231b      	movs	r3, #27
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	19db      	adds	r3, r3, r7
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e068      	b.n	80040ae <UART_SetConfig+0x246>
 8003fdc:	231b      	movs	r3, #27
 8003fde:	2220      	movs	r2, #32
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	19db      	adds	r3, r3, r7
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e061      	b.n	80040ae <UART_SetConfig+0x246>
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a61      	ldr	r2, [pc, #388]	@ (8004174 <UART_SetConfig+0x30c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d106      	bne.n	8004002 <UART_SetConfig+0x19a>
 8003ff4:	231b      	movs	r3, #27
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	189b      	adds	r3, r3, r2
 8003ffa:	19db      	adds	r3, r3, r7
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e055      	b.n	80040ae <UART_SetConfig+0x246>
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a5c      	ldr	r2, [pc, #368]	@ (8004178 <UART_SetConfig+0x310>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d106      	bne.n	800401a <UART_SetConfig+0x1b2>
 800400c:	231b      	movs	r3, #27
 800400e:	2220      	movs	r2, #32
 8004010:	189b      	adds	r3, r3, r2
 8004012:	19db      	adds	r3, r3, r7
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e049      	b.n	80040ae <UART_SetConfig+0x246>
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a50      	ldr	r2, [pc, #320]	@ (8004160 <UART_SetConfig+0x2f8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d13e      	bne.n	80040a2 <UART_SetConfig+0x23a>
 8004024:	4b51      	ldr	r3, [pc, #324]	@ (800416c <UART_SetConfig+0x304>)
 8004026:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004028:	23c0      	movs	r3, #192	@ 0xc0
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	4013      	ands	r3, r2
 800402e:	22c0      	movs	r2, #192	@ 0xc0
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	4293      	cmp	r3, r2
 8004034:	d027      	beq.n	8004086 <UART_SetConfig+0x21e>
 8004036:	22c0      	movs	r2, #192	@ 0xc0
 8004038:	0112      	lsls	r2, r2, #4
 800403a:	4293      	cmp	r3, r2
 800403c:	d82a      	bhi.n	8004094 <UART_SetConfig+0x22c>
 800403e:	2280      	movs	r2, #128	@ 0x80
 8004040:	0112      	lsls	r2, r2, #4
 8004042:	4293      	cmp	r3, r2
 8004044:	d011      	beq.n	800406a <UART_SetConfig+0x202>
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	0112      	lsls	r2, r2, #4
 800404a:	4293      	cmp	r3, r2
 800404c:	d822      	bhi.n	8004094 <UART_SetConfig+0x22c>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <UART_SetConfig+0x1f4>
 8004052:	2280      	movs	r2, #128	@ 0x80
 8004054:	00d2      	lsls	r2, r2, #3
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <UART_SetConfig+0x210>
 800405a:	e01b      	b.n	8004094 <UART_SetConfig+0x22c>
 800405c:	231b      	movs	r3, #27
 800405e:	2220      	movs	r2, #32
 8004060:	189b      	adds	r3, r3, r2
 8004062:	19db      	adds	r3, r3, r7
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	e021      	b.n	80040ae <UART_SetConfig+0x246>
 800406a:	231b      	movs	r3, #27
 800406c:	2220      	movs	r2, #32
 800406e:	189b      	adds	r3, r3, r2
 8004070:	19db      	adds	r3, r3, r7
 8004072:	2202      	movs	r2, #2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e01a      	b.n	80040ae <UART_SetConfig+0x246>
 8004078:	231b      	movs	r3, #27
 800407a:	2220      	movs	r2, #32
 800407c:	189b      	adds	r3, r3, r2
 800407e:	19db      	adds	r3, r3, r7
 8004080:	2204      	movs	r2, #4
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	e013      	b.n	80040ae <UART_SetConfig+0x246>
 8004086:	231b      	movs	r3, #27
 8004088:	2220      	movs	r2, #32
 800408a:	189b      	adds	r3, r3, r2
 800408c:	19db      	adds	r3, r3, r7
 800408e:	2208      	movs	r2, #8
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e00c      	b.n	80040ae <UART_SetConfig+0x246>
 8004094:	231b      	movs	r3, #27
 8004096:	2220      	movs	r2, #32
 8004098:	189b      	adds	r3, r3, r2
 800409a:	19db      	adds	r3, r3, r7
 800409c:	2210      	movs	r2, #16
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e005      	b.n	80040ae <UART_SetConfig+0x246>
 80040a2:	231b      	movs	r3, #27
 80040a4:	2220      	movs	r2, #32
 80040a6:	189b      	adds	r3, r3, r2
 80040a8:	19db      	adds	r3, r3, r7
 80040aa:	2210      	movs	r2, #16
 80040ac:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004160 <UART_SetConfig+0x2f8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d000      	beq.n	80040ba <UART_SetConfig+0x252>
 80040b8:	e0a9      	b.n	800420e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040ba:	231b      	movs	r3, #27
 80040bc:	2220      	movs	r2, #32
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	19db      	adds	r3, r3, r7
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d015      	beq.n	80040f4 <UART_SetConfig+0x28c>
 80040c8:	dc18      	bgt.n	80040fc <UART_SetConfig+0x294>
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d00d      	beq.n	80040ea <UART_SetConfig+0x282>
 80040ce:	dc15      	bgt.n	80040fc <UART_SetConfig+0x294>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <UART_SetConfig+0x272>
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d005      	beq.n	80040e4 <UART_SetConfig+0x27c>
 80040d8:	e010      	b.n	80040fc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040da:	f7fe f865 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 80040de:	0003      	movs	r3, r0
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040e2:	e014      	b.n	800410e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e4:	4b25      	ldr	r3, [pc, #148]	@ (800417c <UART_SetConfig+0x314>)
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040e8:	e011      	b.n	800410e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ea:	f7fd ffd1 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 80040ee:	0003      	movs	r3, r0
 80040f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040f2:	e00c      	b.n	800410e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f4:	2380      	movs	r3, #128	@ 0x80
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040fa:	e008      	b.n	800410e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004100:	231a      	movs	r3, #26
 8004102:	2220      	movs	r2, #32
 8004104:	189b      	adds	r3, r3, r2
 8004106:	19db      	adds	r3, r3, r7
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
        break;
 800410c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800410e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004110:	2b00      	cmp	r3, #0
 8004112:	d100      	bne.n	8004116 <UART_SetConfig+0x2ae>
 8004114:	e14b      	b.n	80043ae <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800411a:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <UART_SetConfig+0x318>)
 800411c:	0052      	lsls	r2, r2, #1
 800411e:	5ad3      	ldrh	r3, [r2, r3]
 8004120:	0019      	movs	r1, r3
 8004122:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004124:	f7fc f800 	bl	8000128 <__udivsi3>
 8004128:	0003      	movs	r3, r0
 800412a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	0013      	movs	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	189b      	adds	r3, r3, r2
 8004136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004138:	429a      	cmp	r2, r3
 800413a:	d305      	bcc.n	8004148 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004144:	429a      	cmp	r2, r3
 8004146:	d91d      	bls.n	8004184 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004148:	231a      	movs	r3, #26
 800414a:	2220      	movs	r2, #32
 800414c:	189b      	adds	r3, r3, r2
 800414e:	19db      	adds	r3, r3, r7
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e12b      	b.n	80043ae <UART_SetConfig+0x546>
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	cfff69f3 	.word	0xcfff69f3
 800415c:	ffffcfff 	.word	0xffffcfff
 8004160:	40008000 	.word	0x40008000
 8004164:	11fff4ff 	.word	0x11fff4ff
 8004168:	40013800 	.word	0x40013800
 800416c:	40021000 	.word	0x40021000
 8004170:	40004400 	.word	0x40004400
 8004174:	40004800 	.word	0x40004800
 8004178:	40004c00 	.word	0x40004c00
 800417c:	00f42400 	.word	0x00f42400
 8004180:	080063b8 	.word	0x080063b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004190:	4b92      	ldr	r3, [pc, #584]	@ (80043dc <UART_SetConfig+0x574>)
 8004192:	0052      	lsls	r2, r2, #1
 8004194:	5ad3      	ldrh	r3, [r2, r3]
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	69b8      	ldr	r0, [r7, #24]
 80041a2:	69f9      	ldr	r1, [r7, #28]
 80041a4:	f7fc f936 	bl	8000414 <__aeabi_uldivmod>
 80041a8:	0002      	movs	r2, r0
 80041aa:	000b      	movs	r3, r1
 80041ac:	0e11      	lsrs	r1, r2, #24
 80041ae:	021d      	lsls	r5, r3, #8
 80041b0:	430d      	orrs	r5, r1
 80041b2:	0214      	lsls	r4, r2, #8
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68b8      	ldr	r0, [r7, #8]
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	1900      	adds	r0, r0, r4
 80041c6:	4169      	adcs	r1, r5
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f7fc f91d 	bl	8000414 <__aeabi_uldivmod>
 80041da:	0002      	movs	r2, r0
 80041dc:	000b      	movs	r3, r1
 80041de:	0013      	movs	r3, r2
 80041e0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e4:	23c0      	movs	r3, #192	@ 0xc0
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d309      	bcc.n	8004200 <UART_SetConfig+0x398>
 80041ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	035b      	lsls	r3, r3, #13
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d204      	bcs.n	8004200 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e0d6      	b.n	80043ae <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004200:	231a      	movs	r3, #26
 8004202:	2220      	movs	r2, #32
 8004204:	189b      	adds	r3, r3, r2
 8004206:	19db      	adds	r3, r3, r7
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e0cf      	b.n	80043ae <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	2380      	movs	r3, #128	@ 0x80
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	429a      	cmp	r2, r3
 8004218:	d000      	beq.n	800421c <UART_SetConfig+0x3b4>
 800421a:	e070      	b.n	80042fe <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800421c:	231b      	movs	r3, #27
 800421e:	2220      	movs	r2, #32
 8004220:	189b      	adds	r3, r3, r2
 8004222:	19db      	adds	r3, r3, r7
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d015      	beq.n	8004256 <UART_SetConfig+0x3ee>
 800422a:	dc18      	bgt.n	800425e <UART_SetConfig+0x3f6>
 800422c:	2b04      	cmp	r3, #4
 800422e:	d00d      	beq.n	800424c <UART_SetConfig+0x3e4>
 8004230:	dc15      	bgt.n	800425e <UART_SetConfig+0x3f6>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <UART_SetConfig+0x3d4>
 8004236:	2b02      	cmp	r3, #2
 8004238:	d005      	beq.n	8004246 <UART_SetConfig+0x3de>
 800423a:	e010      	b.n	800425e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800423c:	f7fd ffb4 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8004240:	0003      	movs	r3, r0
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004244:	e014      	b.n	8004270 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004246:	4b66      	ldr	r3, [pc, #408]	@ (80043e0 <UART_SetConfig+0x578>)
 8004248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800424a:	e011      	b.n	8004270 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424c:	f7fd ff20 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8004250:	0003      	movs	r3, r0
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004254:	e00c      	b.n	8004270 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	2380      	movs	r3, #128	@ 0x80
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800425c:	e008      	b.n	8004270 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004262:	231a      	movs	r3, #26
 8004264:	2220      	movs	r2, #32
 8004266:	189b      	adds	r3, r3, r2
 8004268:	19db      	adds	r3, r3, r7
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
        break;
 800426e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d100      	bne.n	8004278 <UART_SetConfig+0x410>
 8004276:	e09a      	b.n	80043ae <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800427c:	4b57      	ldr	r3, [pc, #348]	@ (80043dc <UART_SetConfig+0x574>)
 800427e:	0052      	lsls	r2, r2, #1
 8004280:	5ad3      	ldrh	r3, [r2, r3]
 8004282:	0019      	movs	r1, r3
 8004284:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004286:	f7fb ff4f 	bl	8000128 <__udivsi3>
 800428a:	0003      	movs	r3, r0
 800428c:	005a      	lsls	r2, r3, #1
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	18d2      	adds	r2, r2, r3
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	0019      	movs	r1, r3
 800429c:	0010      	movs	r0, r2
 800429e:	f7fb ff43 	bl	8000128 <__udivsi3>
 80042a2:	0003      	movs	r3, r0
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d921      	bls.n	80042f0 <UART_SetConfig+0x488>
 80042ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	025b      	lsls	r3, r3, #9
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d21c      	bcs.n	80042f0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	200e      	movs	r0, #14
 80042bc:	2420      	movs	r4, #32
 80042be:	1903      	adds	r3, r0, r4
 80042c0:	19db      	adds	r3, r3, r7
 80042c2:	210f      	movs	r1, #15
 80042c4:	438a      	bics	r2, r1
 80042c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2207      	movs	r2, #7
 80042d0:	4013      	ands	r3, r2
 80042d2:	b299      	uxth	r1, r3
 80042d4:	1903      	adds	r3, r0, r4
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	1902      	adds	r2, r0, r4
 80042da:	19d2      	adds	r2, r2, r7
 80042dc:	8812      	ldrh	r2, [r2, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	1902      	adds	r2, r0, r4
 80042e8:	19d2      	adds	r2, r2, r7
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	e05e      	b.n	80043ae <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80042f0:	231a      	movs	r3, #26
 80042f2:	2220      	movs	r2, #32
 80042f4:	189b      	adds	r3, r3, r2
 80042f6:	19db      	adds	r3, r3, r7
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e057      	b.n	80043ae <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042fe:	231b      	movs	r3, #27
 8004300:	2220      	movs	r2, #32
 8004302:	189b      	adds	r3, r3, r2
 8004304:	19db      	adds	r3, r3, r7
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d015      	beq.n	8004338 <UART_SetConfig+0x4d0>
 800430c:	dc18      	bgt.n	8004340 <UART_SetConfig+0x4d8>
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00d      	beq.n	800432e <UART_SetConfig+0x4c6>
 8004312:	dc15      	bgt.n	8004340 <UART_SetConfig+0x4d8>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <UART_SetConfig+0x4b6>
 8004318:	2b02      	cmp	r3, #2
 800431a:	d005      	beq.n	8004328 <UART_SetConfig+0x4c0>
 800431c:	e010      	b.n	8004340 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7fd ff43 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8004322:	0003      	movs	r3, r0
 8004324:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004326:	e014      	b.n	8004352 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004328:	4b2d      	ldr	r3, [pc, #180]	@ (80043e0 <UART_SetConfig+0x578>)
 800432a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800432c:	e011      	b.n	8004352 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432e:	f7fd feaf 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8004332:	0003      	movs	r3, r0
 8004334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004336:	e00c      	b.n	8004352 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004338:	2380      	movs	r3, #128	@ 0x80
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800433e:	e008      	b.n	8004352 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004344:	231a      	movs	r3, #26
 8004346:	2220      	movs	r2, #32
 8004348:	189b      	adds	r3, r3, r2
 800434a:	19db      	adds	r3, r3, r7
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]
        break;
 8004350:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02a      	beq.n	80043ae <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800435c:	4b1f      	ldr	r3, [pc, #124]	@ (80043dc <UART_SetConfig+0x574>)
 800435e:	0052      	lsls	r2, r2, #1
 8004360:	5ad3      	ldrh	r3, [r2, r3]
 8004362:	0019      	movs	r1, r3
 8004364:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004366:	f7fb fedf 	bl	8000128 <__udivsi3>
 800436a:	0003      	movs	r3, r0
 800436c:	001a      	movs	r2, r3
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	18d2      	adds	r2, r2, r3
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	0019      	movs	r1, r3
 800437c:	0010      	movs	r0, r2
 800437e:	f7fb fed3 	bl	8000128 <__udivsi3>
 8004382:	0003      	movs	r3, r0
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	2b0f      	cmp	r3, #15
 800438a:	d90a      	bls.n	80043a2 <UART_SetConfig+0x53a>
 800438c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438e:	2380      	movs	r3, #128	@ 0x80
 8004390:	025b      	lsls	r3, r3, #9
 8004392:	429a      	cmp	r2, r3
 8004394:	d205      	bcs.n	80043a2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	b29a      	uxth	r2, r3
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60da      	str	r2, [r3, #12]
 80043a0:	e005      	b.n	80043ae <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80043a2:	231a      	movs	r3, #26
 80043a4:	2220      	movs	r2, #32
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	19db      	adds	r3, r3, r7
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	226a      	movs	r2, #106	@ 0x6a
 80043b2:	2101      	movs	r1, #1
 80043b4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	2268      	movs	r2, #104	@ 0x68
 80043ba:	2101      	movs	r1, #1
 80043bc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	2200      	movs	r2, #0
 80043c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	2200      	movs	r2, #0
 80043c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80043ca:	231a      	movs	r3, #26
 80043cc:	2220      	movs	r2, #32
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	19db      	adds	r3, r3, r7
 80043d2:	781b      	ldrb	r3, [r3, #0]
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b010      	add	sp, #64	@ 0x40
 80043da:	bdb0      	pop	{r4, r5, r7, pc}
 80043dc:	080063b8 	.word	0x080063b8
 80043e0:	00f42400 	.word	0x00f42400

080043e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	2208      	movs	r2, #8
 80043f2:	4013      	ands	r3, r2
 80043f4:	d00b      	beq.n	800440e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004528 <UART_AdvFeatureConfig+0x144>)
 80043fe:	4013      	ands	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	2201      	movs	r2, #1
 8004414:	4013      	ands	r3, r2
 8004416:	d00b      	beq.n	8004430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	4a43      	ldr	r2, [pc, #268]	@ (800452c <UART_AdvFeatureConfig+0x148>)
 8004420:	4013      	ands	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	2202      	movs	r2, #2
 8004436:	4013      	ands	r3, r2
 8004438:	d00b      	beq.n	8004452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a3b      	ldr	r2, [pc, #236]	@ (8004530 <UART_AdvFeatureConfig+0x14c>)
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	2204      	movs	r2, #4
 8004458:	4013      	ands	r3, r2
 800445a:	d00b      	beq.n	8004474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4a34      	ldr	r2, [pc, #208]	@ (8004534 <UART_AdvFeatureConfig+0x150>)
 8004464:	4013      	ands	r3, r2
 8004466:	0019      	movs	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	2210      	movs	r2, #16
 800447a:	4013      	ands	r3, r2
 800447c:	d00b      	beq.n	8004496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a2c      	ldr	r2, [pc, #176]	@ (8004538 <UART_AdvFeatureConfig+0x154>)
 8004486:	4013      	ands	r3, r2
 8004488:	0019      	movs	r1, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	2220      	movs	r2, #32
 800449c:	4013      	ands	r3, r2
 800449e:	d00b      	beq.n	80044b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4a25      	ldr	r2, [pc, #148]	@ (800453c <UART_AdvFeatureConfig+0x158>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	0019      	movs	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	2240      	movs	r2, #64	@ 0x40
 80044be:	4013      	ands	r3, r2
 80044c0:	d01d      	beq.n	80044fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004540 <UART_AdvFeatureConfig+0x15c>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044de:	2380      	movs	r3, #128	@ 0x80
 80044e0:	035b      	lsls	r3, r3, #13
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d10b      	bne.n	80044fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <UART_AdvFeatureConfig+0x160>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	0019      	movs	r1, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	2280      	movs	r2, #128	@ 0x80
 8004504:	4013      	ands	r3, r2
 8004506:	d00b      	beq.n	8004520 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4a0e      	ldr	r2, [pc, #56]	@ (8004548 <UART_AdvFeatureConfig+0x164>)
 8004510:	4013      	ands	r3, r2
 8004512:	0019      	movs	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	605a      	str	r2, [r3, #4]
  }
}
 8004520:	46c0      	nop			@ (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b002      	add	sp, #8
 8004526:	bd80      	pop	{r7, pc}
 8004528:	ffff7fff 	.word	0xffff7fff
 800452c:	fffdffff 	.word	0xfffdffff
 8004530:	fffeffff 	.word	0xfffeffff
 8004534:	fffbffff 	.word	0xfffbffff
 8004538:	ffffefff 	.word	0xffffefff
 800453c:	ffffdfff 	.word	0xffffdfff
 8004540:	ffefffff 	.word	0xffefffff
 8004544:	ff9fffff 	.word	0xff9fffff
 8004548:	fff7ffff 	.word	0xfff7ffff

0800454c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b092      	sub	sp, #72	@ 0x48
 8004550:	af02      	add	r7, sp, #8
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2290      	movs	r2, #144	@ 0x90
 8004558:	2100      	movs	r1, #0
 800455a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800455c:	f7fc fdf4 	bl	8001148 <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
 8004562:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2208      	movs	r2, #8
 800456c:	4013      	ands	r3, r2
 800456e:	2b08      	cmp	r3, #8
 8004570:	d12d      	bne.n	80045ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004574:	2280      	movs	r2, #128	@ 0x80
 8004576:	0391      	lsls	r1, r2, #14
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4a47      	ldr	r2, [pc, #284]	@ (8004698 <UART_CheckIdleState+0x14c>)
 800457c:	9200      	str	r2, [sp, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	f000 f88e 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8004584:	1e03      	subs	r3, r0, #0
 8004586:	d022      	beq.n	80045ce <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004588:	f3ef 8310 	mrs	r3, PRIMASK
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004590:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004592:	2301      	movs	r3, #1
 8004594:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004598:	f383 8810 	msr	PRIMASK, r3
}
 800459c:	46c0      	nop			@ (mov r8, r8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2180      	movs	r1, #128	@ 0x80
 80045aa:	438a      	bics	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b4:	f383 8810 	msr	PRIMASK, r3
}
 80045b8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2288      	movs	r2, #136	@ 0x88
 80045be:	2120      	movs	r1, #32
 80045c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2284      	movs	r2, #132	@ 0x84
 80045c6:	2100      	movs	r1, #0
 80045c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e060      	b.n	8004690 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2204      	movs	r2, #4
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d146      	bne.n	800466a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045de:	2280      	movs	r2, #128	@ 0x80
 80045e0:	03d1      	lsls	r1, r2, #15
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004698 <UART_CheckIdleState+0x14c>)
 80045e6:	9200      	str	r2, [sp, #0]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f000 f859 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d03b      	beq.n	800466a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80045f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fc:	2301      	movs	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4922      	ldr	r1, [pc, #136]	@ (800469c <UART_CheckIdleState+0x150>)
 8004614:	400a      	ands	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004624:	f3ef 8310 	mrs	r3, PRIMASK
 8004628:	61bb      	str	r3, [r7, #24]
  return(result);
 800462a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462c:	633b      	str	r3, [r7, #48]	@ 0x30
 800462e:	2301      	movs	r3, #1
 8004630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	46c0      	nop			@ (mov r8, r8)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2101      	movs	r1, #1
 8004646:	438a      	bics	r2, r1
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	228c      	movs	r2, #140	@ 0x8c
 800465a:	2120      	movs	r1, #32
 800465c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2284      	movs	r2, #132	@ 0x84
 8004662:	2100      	movs	r1, #0
 8004664:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e012      	b.n	8004690 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2288      	movs	r2, #136	@ 0x88
 800466e:	2120      	movs	r1, #32
 8004670:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	228c      	movs	r2, #140	@ 0x8c
 8004676:	2120      	movs	r1, #32
 8004678:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2284      	movs	r2, #132	@ 0x84
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b010      	add	sp, #64	@ 0x40
 8004696:	bd80      	pop	{r7, pc}
 8004698:	01ffffff 	.word	0x01ffffff
 800469c:	fffffedf 	.word	0xfffffedf

080046a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b0:	e051      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	3301      	adds	r3, #1
 80046b6:	d04e      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b8:	f7fc fd46 	bl	8001148 <HAL_GetTick>
 80046bc:	0002      	movs	r2, r0
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e051      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2204      	movs	r2, #4
 80046da:	4013      	ands	r3, r2
 80046dc:	d03b      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb6>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b80      	cmp	r3, #128	@ 0x80
 80046e2:	d038      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb6>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b40      	cmp	r3, #64	@ 0x40
 80046e8:	d035      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	2208      	movs	r2, #8
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d111      	bne.n	800471c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2208      	movs	r2, #8
 80046fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f960 	bl	80049c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2290      	movs	r2, #144	@ 0x90
 800470c:	2108      	movs	r1, #8
 800470e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2284      	movs	r2, #132	@ 0x84
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e02c      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	2380      	movs	r3, #128	@ 0x80
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	401a      	ands	r2, r3
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	429a      	cmp	r2, r3
 800472e:	d112      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2280      	movs	r2, #128	@ 0x80
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f943 	bl	80049c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2290      	movs	r2, #144	@ 0x90
 8004746:	2120      	movs	r1, #32
 8004748:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2284      	movs	r2, #132	@ 0x84
 800474e:	2100      	movs	r1, #0
 8004750:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e00f      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	425a      	negs	r2, r3
 8004766:	4153      	adcs	r3, r2
 8004768:	b2db      	uxtb	r3, r3
 800476a:	001a      	movs	r2, r3
 800476c:	1dfb      	adds	r3, r7, #7
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d09e      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b004      	add	sp, #16
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b098      	sub	sp, #96	@ 0x60
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	1dbb      	adds	r3, r7, #6
 800478c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1dba      	adds	r2, r7, #6
 8004798:	215c      	movs	r1, #92	@ 0x5c
 800479a:	8812      	ldrh	r2, [r2, #0]
 800479c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1dba      	adds	r2, r7, #6
 80047a2:	215e      	movs	r1, #94	@ 0x5e
 80047a4:	8812      	ldrh	r2, [r2, #0]
 80047a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	015b      	lsls	r3, r3, #5
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d10d      	bne.n	80047d6 <UART_Start_Receive_IT+0x56>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <UART_Start_Receive_IT+0x4c>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2260      	movs	r2, #96	@ 0x60
 80047c6:	497b      	ldr	r1, [pc, #492]	@ (80049b4 <UART_Start_Receive_IT+0x234>)
 80047c8:	5299      	strh	r1, [r3, r2]
 80047ca:	e02e      	b.n	800482a <UART_Start_Receive_IT+0xaa>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2260      	movs	r2, #96	@ 0x60
 80047d0:	21ff      	movs	r1, #255	@ 0xff
 80047d2:	5299      	strh	r1, [r3, r2]
 80047d4:	e029      	b.n	800482a <UART_Start_Receive_IT+0xaa>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10d      	bne.n	80047fa <UART_Start_Receive_IT+0x7a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <UART_Start_Receive_IT+0x70>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2260      	movs	r2, #96	@ 0x60
 80047ea:	21ff      	movs	r1, #255	@ 0xff
 80047ec:	5299      	strh	r1, [r3, r2]
 80047ee:	e01c      	b.n	800482a <UART_Start_Receive_IT+0xaa>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2260      	movs	r2, #96	@ 0x60
 80047f4:	217f      	movs	r1, #127	@ 0x7f
 80047f6:	5299      	strh	r1, [r3, r2]
 80047f8:	e017      	b.n	800482a <UART_Start_Receive_IT+0xaa>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	2380      	movs	r3, #128	@ 0x80
 8004800:	055b      	lsls	r3, r3, #21
 8004802:	429a      	cmp	r2, r3
 8004804:	d10d      	bne.n	8004822 <UART_Start_Receive_IT+0xa2>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d104      	bne.n	8004818 <UART_Start_Receive_IT+0x98>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2260      	movs	r2, #96	@ 0x60
 8004812:	217f      	movs	r1, #127	@ 0x7f
 8004814:	5299      	strh	r1, [r3, r2]
 8004816:	e008      	b.n	800482a <UART_Start_Receive_IT+0xaa>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2260      	movs	r2, #96	@ 0x60
 800481c:	213f      	movs	r1, #63	@ 0x3f
 800481e:	5299      	strh	r1, [r3, r2]
 8004820:	e003      	b.n	800482a <UART_Start_Receive_IT+0xaa>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2260      	movs	r2, #96	@ 0x60
 8004826:	2100      	movs	r1, #0
 8004828:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2290      	movs	r2, #144	@ 0x90
 800482e:	2100      	movs	r1, #0
 8004830:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	228c      	movs	r2, #140	@ 0x8c
 8004836:	2122      	movs	r1, #34	@ 0x22
 8004838:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483a:	f3ef 8310 	mrs	r3, PRIMASK
 800483e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004844:	2301      	movs	r3, #1
 8004846:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484a:	f383 8810 	msr	PRIMASK, r3
}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2101      	movs	r1, #1
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004862:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004866:	f383 8810 	msr	PRIMASK, r3
}
 800486a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004870:	2380      	movs	r3, #128	@ 0x80
 8004872:	059b      	lsls	r3, r3, #22
 8004874:	429a      	cmp	r2, r3
 8004876:	d150      	bne.n	800491a <UART_Start_Receive_IT+0x19a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2268      	movs	r2, #104	@ 0x68
 800487c:	5a9b      	ldrh	r3, [r3, r2]
 800487e:	1dba      	adds	r2, r7, #6
 8004880:	8812      	ldrh	r2, [r2, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d349      	bcc.n	800491a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	015b      	lsls	r3, r3, #5
 800488e:	429a      	cmp	r2, r3
 8004890:	d107      	bne.n	80048a2 <UART_Start_Receive_IT+0x122>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a46      	ldr	r2, [pc, #280]	@ (80049b8 <UART_Start_Receive_IT+0x238>)
 800489e:	675a      	str	r2, [r3, #116]	@ 0x74
 80048a0:	e002      	b.n	80048a8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a45      	ldr	r2, [pc, #276]	@ (80049bc <UART_Start_Receive_IT+0x23c>)
 80048a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d019      	beq.n	80048e4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b0:	f3ef 8310 	mrs	r3, PRIMASK
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80048b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ba:	2301      	movs	r3, #1
 80048bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	f383 8810 	msr	PRIMASK, r3
}
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2180      	movs	r1, #128	@ 0x80
 80048d2:	0049      	lsls	r1, r1, #1
 80048d4:	430a      	orrs	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048de:	f383 8810 	msr	PRIMASK, r3
}
 80048e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e4:	f3ef 8310 	mrs	r3, PRIMASK
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80048ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80048ee:	2301      	movs	r3, #1
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f4:	f383 8810 	msr	PRIMASK, r3
}
 80048f8:	46c0      	nop			@ (mov r8, r8)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2180      	movs	r1, #128	@ 0x80
 8004906:	0549      	lsls	r1, r1, #21
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	e047      	b.n	80049aa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	2380      	movs	r3, #128	@ 0x80
 8004920:	015b      	lsls	r3, r3, #5
 8004922:	429a      	cmp	r2, r3
 8004924:	d107      	bne.n	8004936 <UART_Start_Receive_IT+0x1b6>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a23      	ldr	r2, [pc, #140]	@ (80049c0 <UART_Start_Receive_IT+0x240>)
 8004932:	675a      	str	r2, [r3, #116]	@ 0x74
 8004934:	e002      	b.n	800493c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a22      	ldr	r2, [pc, #136]	@ (80049c4 <UART_Start_Receive_IT+0x244>)
 800493a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004944:	f3ef 8310 	mrs	r3, PRIMASK
 8004948:	61fb      	str	r3, [r7, #28]
  return(result);
 800494a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800494c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800494e:	2301      	movs	r3, #1
 8004950:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f383 8810 	msr	PRIMASK, r3
}
 8004958:	46c0      	nop			@ (mov r8, r8)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2190      	movs	r1, #144	@ 0x90
 8004966:	0049      	lsls	r1, r1, #1
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	f383 8810 	msr	PRIMASK, r3
}
 8004976:	e018      	b.n	80049aa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004978:	f3ef 8310 	mrs	r3, PRIMASK
 800497c:	613b      	str	r3, [r7, #16]
  return(result);
 800497e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004980:	653b      	str	r3, [r7, #80]	@ 0x50
 8004982:	2301      	movs	r3, #1
 8004984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			@ (mov r8, r8)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2120      	movs	r1, #32
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f383 8810 	msr	PRIMASK, r3
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b018      	add	sp, #96	@ 0x60
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	000001ff 	.word	0x000001ff
 80049b8:	080051e5 	.word	0x080051e5
 80049bc:	08004ea5 	.word	0x08004ea5
 80049c0:	08004ce1 	.word	0x08004ce1
 80049c4:	08004b1d 	.word	0x08004b1d

080049c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08e      	sub	sp, #56	@ 0x38
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d0:	f3ef 8310 	mrs	r3, PRIMASK
 80049d4:	617b      	str	r3, [r7, #20]
  return(result);
 80049d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049da:	2301      	movs	r3, #1
 80049dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f383 8810 	msr	PRIMASK, r3
}
 80049e4:	46c0      	nop			@ (mov r8, r8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4926      	ldr	r1, [pc, #152]	@ (8004a8c <UART_EndRxTransfer+0xc4>)
 80049f2:	400a      	ands	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f383 8810 	msr	PRIMASK, r3
}
 8004a00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a02:	f3ef 8310 	mrs	r3, PRIMASK
 8004a06:	623b      	str	r3, [r7, #32]
  return(result);
 8004a08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	491b      	ldr	r1, [pc, #108]	@ (8004a90 <UART_EndRxTransfer+0xc8>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	f383 8810 	msr	PRIMASK, r3
}
 8004a32:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d118      	bne.n	8004a6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a46:	2301      	movs	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f383 8810 	msr	PRIMASK, r3
}
 8004a50:	46c0      	nop			@ (mov r8, r8)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2110      	movs	r1, #16
 8004a5e:	438a      	bics	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f383 8810 	msr	PRIMASK, r3
}
 8004a6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	228c      	movs	r2, #140	@ 0x8c
 8004a72:	2120      	movs	r1, #32
 8004a74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b00e      	add	sp, #56	@ 0x38
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	fffffedf 	.word	0xfffffedf
 8004a90:	effffffe 	.word	0xeffffffe

08004a94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	225e      	movs	r2, #94	@ 0x5e
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2256      	movs	r2, #86	@ 0x56
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7ff f9c3 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ace:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	46c0      	nop			@ (mov r8, r8)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2140      	movs	r1, #64	@ 0x40
 8004aec:	438a      	bics	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f383 8810 	msr	PRIMASK, r3
}
 8004afa:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2288      	movs	r2, #136	@ 0x88
 8004b00:	2120      	movs	r1, #32
 8004b02:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7ff f98f 	bl	8003e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b006      	add	sp, #24
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b094      	sub	sp, #80	@ 0x50
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b24:	204e      	movs	r0, #78	@ 0x4e
 8004b26:	183b      	adds	r3, r7, r0
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	2160      	movs	r1, #96	@ 0x60
 8004b2c:	5a52      	ldrh	r2, [r2, r1]
 8004b2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	228c      	movs	r2, #140	@ 0x8c
 8004b34:	589b      	ldr	r3, [r3, r2]
 8004b36:	2b22      	cmp	r3, #34	@ 0x22
 8004b38:	d000      	beq.n	8004b3c <UART_RxISR_8BIT+0x20>
 8004b3a:	e0bf      	b.n	8004cbc <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b42:	214c      	movs	r1, #76	@ 0x4c
 8004b44:	187b      	adds	r3, r7, r1
 8004b46:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	183b      	adds	r3, r7, r0
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b2d9      	uxtb	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b58:	400a      	ands	r2, r1
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	225e      	movs	r2, #94	@ 0x5e
 8004b6c:	5a9b      	ldrh	r3, [r3, r2]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b299      	uxth	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	225e      	movs	r2, #94	@ 0x5e
 8004b78:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	225e      	movs	r2, #94	@ 0x5e
 8004b7e:	5a9b      	ldrh	r3, [r3, r2]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d000      	beq.n	8004b88 <UART_RxISR_8BIT+0x6c>
 8004b86:	e0a1      	b.n	8004ccc <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b92:	2301      	movs	r3, #1
 8004b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	f383 8810 	msr	PRIMASK, r3
}
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	494a      	ldr	r1, [pc, #296]	@ (8004cd4 <UART_RxISR_8BIT+0x1b8>)
 8004baa:	400a      	ands	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb4:	f383 8810 	msr	PRIMASK, r3
}
 8004bb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bba:	f3ef 8310 	mrs	r3, PRIMASK
 8004bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bca:	f383 8810 	msr	PRIMASK, r3
}
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2101      	movs	r1, #1
 8004bdc:	438a      	bics	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	f383 8810 	msr	PRIMASK, r3
}
 8004bea:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	228c      	movs	r2, #140	@ 0x8c
 8004bf0:	2120      	movs	r1, #32
 8004bf2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a34      	ldr	r2, [pc, #208]	@ (8004cd8 <UART_RxISR_8BIT+0x1bc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01f      	beq.n	8004c4a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	041b      	lsls	r3, r3, #16
 8004c14:	4013      	ands	r3, r2
 8004c16:	d018      	beq.n	8004c4a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c22:	2301      	movs	r3, #1
 8004c24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4928      	ldr	r1, [pc, #160]	@ (8004cdc <UART_RxISR_8BIT+0x1c0>)
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d12f      	bne.n	8004cb2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c58:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c5e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c62:	2301      	movs	r3, #1
 8004c64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f383 8810 	msr	PRIMASK, r3
}
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2110      	movs	r1, #16
 8004c7a:	438a      	bics	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f383 8810 	msr	PRIMASK, r3
}
 8004c88:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2210      	movs	r2, #16
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d103      	bne.n	8004ca0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	225c      	movs	r2, #92	@ 0x5c
 8004ca4:	5a9a      	ldrh	r2, [r3, r2]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0011      	movs	r1, r2
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7ff f8d0 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cb0:	e00c      	b.n	8004ccc <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7fb ffa5 	bl	8000c04 <HAL_UART_RxCpltCallback>
}
 8004cba:	e007      	b.n	8004ccc <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2108      	movs	r1, #8
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	619a      	str	r2, [r3, #24]
}
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b014      	add	sp, #80	@ 0x50
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	fffffedf 	.word	0xfffffedf
 8004cd8:	40008000 	.word	0x40008000
 8004cdc:	fbffffff 	.word	0xfbffffff

08004ce0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b094      	sub	sp, #80	@ 0x50
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ce8:	204e      	movs	r0, #78	@ 0x4e
 8004cea:	183b      	adds	r3, r7, r0
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	2160      	movs	r1, #96	@ 0x60
 8004cf0:	5a52      	ldrh	r2, [r2, r1]
 8004cf2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	228c      	movs	r2, #140	@ 0x8c
 8004cf8:	589b      	ldr	r3, [r3, r2]
 8004cfa:	2b22      	cmp	r3, #34	@ 0x22
 8004cfc:	d000      	beq.n	8004d00 <UART_RxISR_16BIT+0x20>
 8004cfe:	e0bf      	b.n	8004e80 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d06:	214c      	movs	r1, #76	@ 0x4c
 8004d08:	187b      	adds	r3, r7, r1
 8004d0a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d10:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d12:	187b      	adds	r3, r7, r1
 8004d14:	183a      	adds	r2, r7, r0
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	8812      	ldrh	r2, [r2, #0]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d26:	1c9a      	adds	r2, r3, #2
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	225e      	movs	r2, #94	@ 0x5e
 8004d30:	5a9b      	ldrh	r3, [r3, r2]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b299      	uxth	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	225e      	movs	r2, #94	@ 0x5e
 8004d3c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	225e      	movs	r2, #94	@ 0x5e
 8004d42:	5a9b      	ldrh	r3, [r3, r2]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d000      	beq.n	8004d4c <UART_RxISR_16BIT+0x6c>
 8004d4a:	e0a1      	b.n	8004e90 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d50:	623b      	str	r3, [r7, #32]
  return(result);
 8004d52:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d56:	2301      	movs	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	494a      	ldr	r1, [pc, #296]	@ (8004e98 <UART_RxISR_16BIT+0x1b8>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d88:	2301      	movs	r3, #1
 8004d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	f383 8810 	msr	PRIMASK, r3
}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2101      	movs	r1, #1
 8004da0:	438a      	bics	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004daa:	f383 8810 	msr	PRIMASK, r3
}
 8004dae:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	228c      	movs	r2, #140	@ 0x8c
 8004db4:	2120      	movs	r1, #32
 8004db6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a34      	ldr	r2, [pc, #208]	@ (8004e9c <UART_RxISR_16BIT+0x1bc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d01f      	beq.n	8004e0e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	2380      	movs	r3, #128	@ 0x80
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d018      	beq.n	8004e0e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8004de0:	617b      	str	r3, [r7, #20]
  return(result);
 8004de2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004de6:	2301      	movs	r3, #1
 8004de8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f383 8810 	msr	PRIMASK, r3
}
 8004df0:	46c0      	nop			@ (mov r8, r8)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4928      	ldr	r1, [pc, #160]	@ (8004ea0 <UART_RxISR_16BIT+0x1c0>)
 8004dfe:	400a      	ands	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f383 8810 	msr	PRIMASK, r3
}
 8004e0c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d12f      	bne.n	8004e76 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e22:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e26:	2301      	movs	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f383 8810 	msr	PRIMASK, r3
}
 8004e30:	46c0      	nop			@ (mov r8, r8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2110      	movs	r1, #16
 8004e3e:	438a      	bics	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f383 8810 	msr	PRIMASK, r3
}
 8004e4c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	2210      	movs	r2, #16
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d103      	bne.n	8004e64 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2210      	movs	r2, #16
 8004e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	225c      	movs	r2, #92	@ 0x5c
 8004e68:	5a9a      	ldrh	r2, [r3, r2]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0011      	movs	r1, r2
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f7fe ffee 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e74:	e00c      	b.n	8004e90 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f7fb fec3 	bl	8000c04 <HAL_UART_RxCpltCallback>
}
 8004e7e:	e007      	b.n	8004e90 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2108      	movs	r1, #8
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	619a      	str	r2, [r3, #24]
}
 8004e90:	46c0      	nop			@ (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b014      	add	sp, #80	@ 0x50
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	fffffedf 	.word	0xfffffedf
 8004e9c:	40008000 	.word	0x40008000
 8004ea0:	fbffffff 	.word	0xfbffffff

08004ea4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b0a0      	sub	sp, #128	@ 0x80
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004eac:	237a      	movs	r3, #122	@ 0x7a
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	2160      	movs	r1, #96	@ 0x60
 8004eb4:	5a52      	ldrh	r2, [r2, r1]
 8004eb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	228c      	movs	r2, #140	@ 0x8c
 8004ed4:	589b      	ldr	r3, [r3, r2]
 8004ed6:	2b22      	cmp	r3, #34	@ 0x22
 8004ed8:	d000      	beq.n	8004edc <UART_RxISR_8BIT_FIFOEN+0x38>
 8004eda:	e16a      	b.n	80051b2 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004edc:	236e      	movs	r3, #110	@ 0x6e
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	2168      	movs	r1, #104	@ 0x68
 8004ee4:	5a52      	ldrh	r2, [r2, r1]
 8004ee6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ee8:	e111      	b.n	800510e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ef0:	216c      	movs	r1, #108	@ 0x6c
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	237a      	movs	r3, #122	@ 0x7a
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b2d9      	uxtb	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f08:	400a      	ands	r2, r1
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	225e      	movs	r2, #94	@ 0x5e
 8004f1c:	5a9b      	ldrh	r3, [r3, r2]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b299      	uxth	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	225e      	movs	r2, #94	@ 0x5e
 8004f28:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f34:	2207      	movs	r2, #7
 8004f36:	4013      	ands	r3, r2
 8004f38:	d049      	beq.n	8004fce <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d010      	beq.n	8004f64 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004f42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f44:	2380      	movs	r3, #128	@ 0x80
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2201      	movs	r2, #1
 8004f52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2290      	movs	r2, #144	@ 0x90
 8004f58:	589b      	ldr	r3, [r3, r2]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2190      	movs	r1, #144	@ 0x90
 8004f62:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f66:	2202      	movs	r2, #2
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d00f      	beq.n	8004f8c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004f6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4013      	ands	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2290      	movs	r2, #144	@ 0x90
 8004f80:	589b      	ldr	r3, [r3, r2]
 8004f82:	2204      	movs	r2, #4
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2190      	movs	r1, #144	@ 0x90
 8004f8a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f8e:	2204      	movs	r2, #4
 8004f90:	4013      	ands	r3, r2
 8004f92:	d00f      	beq.n	8004fb4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f96:	2201      	movs	r2, #1
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2290      	movs	r2, #144	@ 0x90
 8004fa8:	589b      	ldr	r3, [r3, r2]
 8004faa:	2202      	movs	r2, #2
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2190      	movs	r1, #144	@ 0x90
 8004fb2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2290      	movs	r2, #144	@ 0x90
 8004fb8:	589b      	ldr	r3, [r3, r2]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f7fe ff3d 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2290      	movs	r2, #144	@ 0x90
 8004fca:	2100      	movs	r1, #0
 8004fcc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	225e      	movs	r2, #94	@ 0x5e
 8004fd2:	5a9b      	ldrh	r3, [r3, r2]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d000      	beq.n	8004fdc <UART_RxISR_8BIT_FIFOEN+0x138>
 8004fda:	e098      	b.n	800510e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fec:	f383 8810 	msr	PRIMASK, r3
}
 8004ff0:	46c0      	nop			@ (mov r8, r8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4973      	ldr	r1, [pc, #460]	@ (80051cc <UART_RxISR_8BIT_FIFOEN+0x328>)
 8004ffe:	400a      	ands	r2, r1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005004:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005008:	f383 8810 	msr	PRIMASK, r3
}
 800500c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500e:	f3ef 8310 	mrs	r3, PRIMASK
 8005012:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005016:	667b      	str	r3, [r7, #100]	@ 0x64
 8005018:	2301      	movs	r3, #1
 800501a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800501e:	f383 8810 	msr	PRIMASK, r3
}
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4968      	ldr	r1, [pc, #416]	@ (80051d0 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005030:	400a      	ands	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503a:	f383 8810 	msr	PRIMASK, r3
}
 800503e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	228c      	movs	r2, #140	@ 0x8c
 8005044:	2120      	movs	r1, #32
 8005046:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5e      	ldr	r2, [pc, #376]	@ (80051d4 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01f      	beq.n	800509e <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	2380      	movs	r3, #128	@ 0x80
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	4013      	ands	r3, r2
 800506a:	d018      	beq.n	800509e <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506c:	f3ef 8310 	mrs	r3, PRIMASK
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005074:	663b      	str	r3, [r7, #96]	@ 0x60
 8005076:	2301      	movs	r3, #1
 8005078:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	f383 8810 	msr	PRIMASK, r3
}
 8005080:	46c0      	nop			@ (mov r8, r8)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4952      	ldr	r1, [pc, #328]	@ (80051d8 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800508e:	400a      	ands	r2, r1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005094:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005098:	f383 8810 	msr	PRIMASK, r3
}
 800509c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d12f      	bne.n	8005106 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ac:	f3ef 8310 	mrs	r3, PRIMASK
 80050b0:	623b      	str	r3, [r7, #32]
  return(result);
 80050b2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050b6:	2301      	movs	r3, #1
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			@ (mov r8, r8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2110      	movs	r1, #16
 80050ce:	438a      	bics	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	2210      	movs	r2, #16
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d103      	bne.n	80050f4 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2210      	movs	r2, #16
 80050f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	225c      	movs	r2, #92	@ 0x5c
 80050f8:	5a9a      	ldrh	r2, [r3, r2]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0011      	movs	r1, r2
 80050fe:	0018      	movs	r0, r3
 8005100:	f7fe fea6 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
 8005104:	e003      	b.n	800510e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f7fb fd7b 	bl	8000c04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800510e:	236e      	movs	r3, #110	@ 0x6e
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005118:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800511a:	2220      	movs	r2, #32
 800511c:	4013      	ands	r3, r2
 800511e:	d000      	beq.n	8005122 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005120:	e6e3      	b.n	8004eea <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005122:	205a      	movs	r0, #90	@ 0x5a
 8005124:	183b      	adds	r3, r7, r0
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	215e      	movs	r1, #94	@ 0x5e
 800512a:	5a52      	ldrh	r2, [r2, r1]
 800512c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800512e:	0001      	movs	r1, r0
 8005130:	187b      	adds	r3, r7, r1
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d044      	beq.n	80051c2 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2268      	movs	r2, #104	@ 0x68
 800513c:	5a9b      	ldrh	r3, [r3, r2]
 800513e:	187a      	adds	r2, r7, r1
 8005140:	8812      	ldrh	r2, [r2, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d23d      	bcs.n	80051c2 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005146:	f3ef 8310 	mrs	r3, PRIMASK
 800514a:	60bb      	str	r3, [r7, #8]
  return(result);
 800514c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800514e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005150:	2301      	movs	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f383 8810 	msr	PRIMASK, r3
}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	491d      	ldr	r1, [pc, #116]	@ (80051dc <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005168:	400a      	ands	r2, r1
 800516a:	609a      	str	r2, [r3, #8]
 800516c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800516e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f383 8810 	msr	PRIMASK, r3
}
 8005176:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800517c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800517e:	f3ef 8310 	mrs	r3, PRIMASK
 8005182:	617b      	str	r3, [r7, #20]
  return(result);
 8005184:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005186:	653b      	str	r3, [r7, #80]	@ 0x50
 8005188:	2301      	movs	r3, #1
 800518a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f383 8810 	msr	PRIMASK, r3
}
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2120      	movs	r1, #32
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051b0:	e007      	b.n	80051c2 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2108      	movs	r1, #8
 80051be:	430a      	orrs	r2, r1
 80051c0:	619a      	str	r2, [r3, #24]
}
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b020      	add	sp, #128	@ 0x80
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	fffffeff 	.word	0xfffffeff
 80051d0:	effffffe 	.word	0xeffffffe
 80051d4:	40008000 	.word	0x40008000
 80051d8:	fbffffff 	.word	0xfbffffff
 80051dc:	efffffff 	.word	0xefffffff
 80051e0:	08004b1d 	.word	0x08004b1d

080051e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b0a2      	sub	sp, #136	@ 0x88
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80051ec:	2382      	movs	r3, #130	@ 0x82
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	2160      	movs	r1, #96	@ 0x60
 80051f4:	5a52      	ldrh	r2, [r2, r1]
 80051f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2284      	movs	r2, #132	@ 0x84
 8005200:	18ba      	adds	r2, r7, r2
 8005202:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	228c      	movs	r2, #140	@ 0x8c
 8005218:	589b      	ldr	r3, [r3, r2]
 800521a:	2b22      	cmp	r3, #34	@ 0x22
 800521c:	d000      	beq.n	8005220 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800521e:	e174      	b.n	800550a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005220:	2376      	movs	r3, #118	@ 0x76
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	2168      	movs	r1, #104	@ 0x68
 8005228:	5a52      	ldrh	r2, [r2, r1]
 800522a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800522c:	e119      	b.n	8005462 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005234:	2174      	movs	r1, #116	@ 0x74
 8005236:	187b      	adds	r3, r7, r1
 8005238:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005240:	187b      	adds	r3, r7, r1
 8005242:	2282      	movs	r2, #130	@ 0x82
 8005244:	18ba      	adds	r2, r7, r2
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	8812      	ldrh	r2, [r2, #0]
 800524a:	4013      	ands	r3, r2
 800524c:	b29a      	uxth	r2, r3
 800524e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005256:	1c9a      	adds	r2, r3, #2
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	225e      	movs	r2, #94	@ 0x5e
 8005260:	5a9b      	ldrh	r3, [r3, r2]
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b299      	uxth	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	225e      	movs	r2, #94	@ 0x5e
 800526c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2184      	movs	r1, #132	@ 0x84
 8005276:	187a      	adds	r2, r7, r1
 8005278:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800527a:	187b      	adds	r3, r7, r1
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2207      	movs	r2, #7
 8005280:	4013      	ands	r3, r2
 8005282:	d04e      	beq.n	8005322 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005284:	187b      	adds	r3, r7, r1
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
 800528c:	d010      	beq.n	80052b0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800528e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005290:	2380      	movs	r3, #128	@ 0x80
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4013      	ands	r3, r2
 8005296:	d00b      	beq.n	80052b0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2290      	movs	r2, #144	@ 0x90
 80052a4:	589b      	ldr	r3, [r3, r2]
 80052a6:	2201      	movs	r2, #1
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2190      	movs	r1, #144	@ 0x90
 80052ae:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052b0:	2384      	movs	r3, #132	@ 0x84
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2202      	movs	r2, #2
 80052b8:	4013      	ands	r3, r2
 80052ba:	d00f      	beq.n	80052dc <UART_RxISR_16BIT_FIFOEN+0xf8>
 80052bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052be:	2201      	movs	r2, #1
 80052c0:	4013      	ands	r3, r2
 80052c2:	d00b      	beq.n	80052dc <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2202      	movs	r2, #2
 80052ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2290      	movs	r2, #144	@ 0x90
 80052d0:	589b      	ldr	r3, [r3, r2]
 80052d2:	2204      	movs	r2, #4
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2190      	movs	r1, #144	@ 0x90
 80052da:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052dc:	2384      	movs	r3, #132	@ 0x84
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2204      	movs	r2, #4
 80052e4:	4013      	ands	r3, r2
 80052e6:	d00f      	beq.n	8005308 <UART_RxISR_16BIT_FIFOEN+0x124>
 80052e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052ea:	2201      	movs	r2, #1
 80052ec:	4013      	ands	r3, r2
 80052ee:	d00b      	beq.n	8005308 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2204      	movs	r2, #4
 80052f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2290      	movs	r2, #144	@ 0x90
 80052fc:	589b      	ldr	r3, [r3, r2]
 80052fe:	2202      	movs	r2, #2
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2190      	movs	r1, #144	@ 0x90
 8005306:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2290      	movs	r2, #144	@ 0x90
 800530c:	589b      	ldr	r3, [r3, r2]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f7fe fd93 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2290      	movs	r2, #144	@ 0x90
 800531e:	2100      	movs	r1, #0
 8005320:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	225e      	movs	r2, #94	@ 0x5e
 8005326:	5a9b      	ldrh	r3, [r3, r2]
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d000      	beq.n	8005330 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800532e:	e098      	b.n	8005462 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005330:	f3ef 8310 	mrs	r3, PRIMASK
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005338:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800533a:	2301      	movs	r3, #1
 800533c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005340:	f383 8810 	msr	PRIMASK, r3
}
 8005344:	46c0      	nop			@ (mov r8, r8)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4974      	ldr	r1, [pc, #464]	@ (8005524 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005352:	400a      	ands	r2, r1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005358:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800535c:	f383 8810 	msr	PRIMASK, r3
}
 8005360:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005362:	f3ef 8310 	mrs	r3, PRIMASK
 8005366:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800536a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800536c:	2301      	movs	r3, #1
 800536e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005372:	f383 8810 	msr	PRIMASK, r3
}
 8005376:	46c0      	nop			@ (mov r8, r8)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4969      	ldr	r1, [pc, #420]	@ (8005528 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005384:	400a      	ands	r2, r1
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800538a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800538e:	f383 8810 	msr	PRIMASK, r3
}
 8005392:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	228c      	movs	r2, #140	@ 0x8c
 8005398:	2120      	movs	r1, #32
 800539a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a5f      	ldr	r2, [pc, #380]	@ (800552c <UART_RxISR_16BIT_FIFOEN+0x348>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01f      	beq.n	80053f2 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	4013      	ands	r3, r2
 80053be:	d018      	beq.n	80053f2 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80053ca:	2301      	movs	r3, #1
 80053cc:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			@ (mov r8, r8)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4953      	ldr	r1, [pc, #332]	@ (8005530 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d12f      	bne.n	800545a <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005400:	f3ef 8310 	mrs	r3, PRIMASK
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005408:	663b      	str	r3, [r7, #96]	@ 0x60
 800540a:	2301      	movs	r3, #1
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005410:	f383 8810 	msr	PRIMASK, r3
}
 8005414:	46c0      	nop			@ (mov r8, r8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2110      	movs	r1, #16
 8005422:	438a      	bics	r2, r1
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	f383 8810 	msr	PRIMASK, r3
}
 8005430:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	2210      	movs	r2, #16
 800543a:	4013      	ands	r3, r2
 800543c:	2b10      	cmp	r3, #16
 800543e:	d103      	bne.n	8005448 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2210      	movs	r2, #16
 8005446:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	225c      	movs	r2, #92	@ 0x5c
 800544c:	5a9a      	ldrh	r2, [r3, r2]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0011      	movs	r1, r2
 8005452:	0018      	movs	r0, r3
 8005454:	f7fe fcfc 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
 8005458:	e003      	b.n	8005462 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	0018      	movs	r0, r3
 800545e:	f7fb fbd1 	bl	8000c04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005462:	2376      	movs	r3, #118	@ 0x76
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d006      	beq.n	800547a <UART_RxISR_16BIT_FIFOEN+0x296>
 800546c:	2384      	movs	r3, #132	@ 0x84
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2220      	movs	r2, #32
 8005474:	4013      	ands	r3, r2
 8005476:	d000      	beq.n	800547a <UART_RxISR_16BIT_FIFOEN+0x296>
 8005478:	e6d9      	b.n	800522e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800547a:	205e      	movs	r0, #94	@ 0x5e
 800547c:	183b      	adds	r3, r7, r0
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	215e      	movs	r1, #94	@ 0x5e
 8005482:	5a52      	ldrh	r2, [r2, r1]
 8005484:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005486:	0001      	movs	r1, r0
 8005488:	187b      	adds	r3, r7, r1
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d044      	beq.n	800551a <UART_RxISR_16BIT_FIFOEN+0x336>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2268      	movs	r2, #104	@ 0x68
 8005494:	5a9b      	ldrh	r3, [r3, r2]
 8005496:	187a      	adds	r2, r7, r1
 8005498:	8812      	ldrh	r2, [r2, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d23d      	bcs.n	800551a <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549e:	f3ef 8310 	mrs	r3, PRIMASK
 80054a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80054a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054a8:	2301      	movs	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			@ (mov r8, r8)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	491d      	ldr	r1, [pc, #116]	@ (8005534 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80054c0:	400a      	ands	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f383 8810 	msr	PRIMASK, r3
}
 80054ce:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a19      	ldr	r2, [pc, #100]	@ (8005538 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80054d4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d6:	f3ef 8310 	mrs	r3, PRIMASK
 80054da:	61bb      	str	r3, [r7, #24]
  return(result);
 80054dc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054de:	657b      	str	r3, [r7, #84]	@ 0x54
 80054e0:	2301      	movs	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f383 8810 	msr	PRIMASK, r3
}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2120      	movs	r1, #32
 80054f8:	430a      	orrs	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	f383 8810 	msr	PRIMASK, r3
}
 8005506:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005508:	e007      	b.n	800551a <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699a      	ldr	r2, [r3, #24]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2108      	movs	r1, #8
 8005516:	430a      	orrs	r2, r1
 8005518:	619a      	str	r2, [r3, #24]
}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b022      	add	sp, #136	@ 0x88
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	fffffeff 	.word	0xfffffeff
 8005528:	effffffe 	.word	0xeffffffe
 800552c:	40008000 	.word	0x40008000
 8005530:	fbffffff 	.word	0xfbffffff
 8005534:	efffffff 	.word	0xefffffff
 8005538:	08004ce1 	.word	0x08004ce1

0800553c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005544:	46c0      	nop			@ (mov r8, r8)
 8005546:	46bd      	mov	sp, r7
 8005548:	b002      	add	sp, #8
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005554:	46c0      	nop			@ (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	b002      	add	sp, #8
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005564:	46c0      	nop			@ (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	b002      	add	sp, #8
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2284      	movs	r2, #132	@ 0x84
 8005578:	5c9b      	ldrb	r3, [r3, r2]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_UARTEx_DisableFifoMode+0x16>
 800557e:	2302      	movs	r3, #2
 8005580:	e027      	b.n	80055d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2284      	movs	r2, #132	@ 0x84
 8005586:	2101      	movs	r1, #1
 8005588:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2288      	movs	r2, #136	@ 0x88
 800558e:	2124      	movs	r1, #36	@ 0x24
 8005590:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2101      	movs	r1, #1
 80055a6:	438a      	bics	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a0b      	ldr	r2, [pc, #44]	@ (80055dc <HAL_UARTEx_DisableFifoMode+0x70>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2288      	movs	r2, #136	@ 0x88
 80055c4:	2120      	movs	r1, #32
 80055c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2284      	movs	r2, #132	@ 0x84
 80055cc:	2100      	movs	r1, #0
 80055ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b004      	add	sp, #16
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	dfffffff 	.word	0xdfffffff

080055e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2284      	movs	r2, #132	@ 0x84
 80055ee:	5c9b      	ldrb	r3, [r3, r2]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e02e      	b.n	8005656 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2284      	movs	r2, #132	@ 0x84
 80055fc:	2101      	movs	r1, #1
 80055fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2288      	movs	r2, #136	@ 0x88
 8005604:	2124      	movs	r1, #36	@ 0x24
 8005606:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2101      	movs	r1, #1
 800561c:	438a      	bics	r2, r1
 800561e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	08d9      	lsrs	r1, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 f854 	bl	80056e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2288      	movs	r2, #136	@ 0x88
 8005648:	2120      	movs	r1, #32
 800564a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2284      	movs	r2, #132	@ 0x84
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b004      	add	sp, #16
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2284      	movs	r2, #132	@ 0x84
 800566e:	5c9b      	ldrb	r3, [r3, r2]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005674:	2302      	movs	r3, #2
 8005676:	e02f      	b.n	80056d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2284      	movs	r2, #132	@ 0x84
 800567c:	2101      	movs	r1, #1
 800567e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2288      	movs	r2, #136	@ 0x88
 8005684:	2124      	movs	r1, #36	@ 0x24
 8005686:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2101      	movs	r1, #1
 800569c:	438a      	bics	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4a0e      	ldr	r2, [pc, #56]	@ (80056e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 f813 	bl	80056e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2288      	movs	r2, #136	@ 0x88
 80056ca:	2120      	movs	r1, #32
 80056cc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2284      	movs	r2, #132	@ 0x84
 80056d2:	2100      	movs	r1, #0
 80056d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	0018      	movs	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	b004      	add	sp, #16
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	f1ffffff 	.word	0xf1ffffff

080056e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	226a      	movs	r2, #106	@ 0x6a
 80056f8:	2101      	movs	r1, #1
 80056fa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2268      	movs	r2, #104	@ 0x68
 8005700:	2101      	movs	r1, #1
 8005702:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005704:	e043      	b.n	800578e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005706:	260f      	movs	r6, #15
 8005708:	19bb      	adds	r3, r7, r6
 800570a:	2208      	movs	r2, #8
 800570c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800570e:	200e      	movs	r0, #14
 8005710:	183b      	adds	r3, r7, r0
 8005712:	2208      	movs	r2, #8
 8005714:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	0e5b      	lsrs	r3, r3, #25
 800571e:	b2da      	uxtb	r2, r3
 8005720:	240d      	movs	r4, #13
 8005722:	193b      	adds	r3, r7, r4
 8005724:	2107      	movs	r1, #7
 8005726:	400a      	ands	r2, r1
 8005728:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	0f5b      	lsrs	r3, r3, #29
 8005732:	b2da      	uxtb	r2, r3
 8005734:	250c      	movs	r5, #12
 8005736:	197b      	adds	r3, r7, r5
 8005738:	2107      	movs	r1, #7
 800573a:	400a      	ands	r2, r1
 800573c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800573e:	183b      	adds	r3, r7, r0
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	197a      	adds	r2, r7, r5
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	4914      	ldr	r1, [pc, #80]	@ (8005798 <UARTEx_SetNbDataToProcess+0xb4>)
 8005748:	5c8a      	ldrb	r2, [r1, r2]
 800574a:	435a      	muls	r2, r3
 800574c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800574e:	197b      	adds	r3, r7, r5
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	4a12      	ldr	r2, [pc, #72]	@ (800579c <UARTEx_SetNbDataToProcess+0xb8>)
 8005754:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005756:	0019      	movs	r1, r3
 8005758:	f7fa fd70 	bl	800023c <__divsi3>
 800575c:	0003      	movs	r3, r0
 800575e:	b299      	uxth	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	226a      	movs	r2, #106	@ 0x6a
 8005764:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005766:	19bb      	adds	r3, r7, r6
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	193a      	adds	r2, r7, r4
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	490a      	ldr	r1, [pc, #40]	@ (8005798 <UARTEx_SetNbDataToProcess+0xb4>)
 8005770:	5c8a      	ldrb	r2, [r1, r2]
 8005772:	435a      	muls	r2, r3
 8005774:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005776:	193b      	adds	r3, r7, r4
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	4a08      	ldr	r2, [pc, #32]	@ (800579c <UARTEx_SetNbDataToProcess+0xb8>)
 800577c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800577e:	0019      	movs	r1, r3
 8005780:	f7fa fd5c 	bl	800023c <__divsi3>
 8005784:	0003      	movs	r3, r0
 8005786:	b299      	uxth	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2268      	movs	r2, #104	@ 0x68
 800578c:	5299      	strh	r1, [r3, r2]
}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b005      	add	sp, #20
 8005794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	080063d0 	.word	0x080063d0
 800579c:	080063d8 	.word	0x080063d8

080057a0 <atoi>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	220a      	movs	r2, #10
 80057a4:	2100      	movs	r1, #0
 80057a6:	f000 f88b 	bl	80058c0 <strtol>
 80057aa:	bd10      	pop	{r4, pc}

080057ac <_strtol_l.isra.0>:
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ae:	b085      	sub	sp, #20
 80057b0:	0017      	movs	r7, r2
 80057b2:	001e      	movs	r6, r3
 80057b4:	9003      	str	r0, [sp, #12]
 80057b6:	9101      	str	r1, [sp, #4]
 80057b8:	2b24      	cmp	r3, #36	@ 0x24
 80057ba:	d823      	bhi.n	8005804 <_strtol_l.isra.0+0x58>
 80057bc:	000c      	movs	r4, r1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d020      	beq.n	8005804 <_strtol_l.isra.0+0x58>
 80057c2:	4b3d      	ldr	r3, [pc, #244]	@ (80058b8 <_strtol_l.isra.0+0x10c>)
 80057c4:	2208      	movs	r2, #8
 80057c6:	469c      	mov	ip, r3
 80057c8:	0023      	movs	r3, r4
 80057ca:	4661      	mov	r1, ip
 80057cc:	781d      	ldrb	r5, [r3, #0]
 80057ce:	3401      	adds	r4, #1
 80057d0:	5d48      	ldrb	r0, [r1, r5]
 80057d2:	0001      	movs	r1, r0
 80057d4:	4011      	ands	r1, r2
 80057d6:	4210      	tst	r0, r2
 80057d8:	d1f6      	bne.n	80057c8 <_strtol_l.isra.0+0x1c>
 80057da:	2d2d      	cmp	r5, #45	@ 0x2d
 80057dc:	d119      	bne.n	8005812 <_strtol_l.isra.0+0x66>
 80057de:	7825      	ldrb	r5, [r4, #0]
 80057e0:	1c9c      	adds	r4, r3, #2
 80057e2:	2301      	movs	r3, #1
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2210      	movs	r2, #16
 80057e8:	0033      	movs	r3, r6
 80057ea:	4393      	bics	r3, r2
 80057ec:	d11d      	bne.n	800582a <_strtol_l.isra.0+0x7e>
 80057ee:	2d30      	cmp	r5, #48	@ 0x30
 80057f0:	d115      	bne.n	800581e <_strtol_l.isra.0+0x72>
 80057f2:	2120      	movs	r1, #32
 80057f4:	7823      	ldrb	r3, [r4, #0]
 80057f6:	438b      	bics	r3, r1
 80057f8:	2b58      	cmp	r3, #88	@ 0x58
 80057fa:	d110      	bne.n	800581e <_strtol_l.isra.0+0x72>
 80057fc:	7865      	ldrb	r5, [r4, #1]
 80057fe:	3402      	adds	r4, #2
 8005800:	2610      	movs	r6, #16
 8005802:	e012      	b.n	800582a <_strtol_l.isra.0+0x7e>
 8005804:	f000 f892 	bl	800592c <__errno>
 8005808:	2316      	movs	r3, #22
 800580a:	6003      	str	r3, [r0, #0]
 800580c:	2000      	movs	r0, #0
 800580e:	b005      	add	sp, #20
 8005810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005812:	9100      	str	r1, [sp, #0]
 8005814:	2d2b      	cmp	r5, #43	@ 0x2b
 8005816:	d1e6      	bne.n	80057e6 <_strtol_l.isra.0+0x3a>
 8005818:	7825      	ldrb	r5, [r4, #0]
 800581a:	1c9c      	adds	r4, r3, #2
 800581c:	e7e3      	b.n	80057e6 <_strtol_l.isra.0+0x3a>
 800581e:	2e00      	cmp	r6, #0
 8005820:	d1ee      	bne.n	8005800 <_strtol_l.isra.0+0x54>
 8005822:	360a      	adds	r6, #10
 8005824:	2d30      	cmp	r5, #48	@ 0x30
 8005826:	d100      	bne.n	800582a <_strtol_l.isra.0+0x7e>
 8005828:	3e02      	subs	r6, #2
 800582a:	4a24      	ldr	r2, [pc, #144]	@ (80058bc <_strtol_l.isra.0+0x110>)
 800582c:	9b00      	ldr	r3, [sp, #0]
 800582e:	4694      	mov	ip, r2
 8005830:	4463      	add	r3, ip
 8005832:	0031      	movs	r1, r6
 8005834:	0018      	movs	r0, r3
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	f7fa fcfc 	bl	8000234 <__aeabi_uidivmod>
 800583c:	2200      	movs	r2, #0
 800583e:	4684      	mov	ip, r0
 8005840:	0010      	movs	r0, r2
 8005842:	002b      	movs	r3, r5
 8005844:	3b30      	subs	r3, #48	@ 0x30
 8005846:	2b09      	cmp	r3, #9
 8005848:	d811      	bhi.n	800586e <_strtol_l.isra.0+0xc2>
 800584a:	001d      	movs	r5, r3
 800584c:	42ae      	cmp	r6, r5
 800584e:	dd1d      	ble.n	800588c <_strtol_l.isra.0+0xe0>
 8005850:	1c53      	adds	r3, r2, #1
 8005852:	d009      	beq.n	8005868 <_strtol_l.isra.0+0xbc>
 8005854:	2201      	movs	r2, #1
 8005856:	4252      	negs	r2, r2
 8005858:	4584      	cmp	ip, r0
 800585a:	d305      	bcc.n	8005868 <_strtol_l.isra.0+0xbc>
 800585c:	d101      	bne.n	8005862 <_strtol_l.isra.0+0xb6>
 800585e:	42a9      	cmp	r1, r5
 8005860:	db11      	blt.n	8005886 <_strtol_l.isra.0+0xda>
 8005862:	2201      	movs	r2, #1
 8005864:	4370      	muls	r0, r6
 8005866:	1828      	adds	r0, r5, r0
 8005868:	7825      	ldrb	r5, [r4, #0]
 800586a:	3401      	adds	r4, #1
 800586c:	e7e9      	b.n	8005842 <_strtol_l.isra.0+0x96>
 800586e:	002b      	movs	r3, r5
 8005870:	3b41      	subs	r3, #65	@ 0x41
 8005872:	2b19      	cmp	r3, #25
 8005874:	d801      	bhi.n	800587a <_strtol_l.isra.0+0xce>
 8005876:	3d37      	subs	r5, #55	@ 0x37
 8005878:	e7e8      	b.n	800584c <_strtol_l.isra.0+0xa0>
 800587a:	002b      	movs	r3, r5
 800587c:	3b61      	subs	r3, #97	@ 0x61
 800587e:	2b19      	cmp	r3, #25
 8005880:	d804      	bhi.n	800588c <_strtol_l.isra.0+0xe0>
 8005882:	3d57      	subs	r5, #87	@ 0x57
 8005884:	e7e2      	b.n	800584c <_strtol_l.isra.0+0xa0>
 8005886:	2201      	movs	r2, #1
 8005888:	4252      	negs	r2, r2
 800588a:	e7ed      	b.n	8005868 <_strtol_l.isra.0+0xbc>
 800588c:	1c53      	adds	r3, r2, #1
 800588e:	d108      	bne.n	80058a2 <_strtol_l.isra.0+0xf6>
 8005890:	2322      	movs	r3, #34	@ 0x22
 8005892:	9a03      	ldr	r2, [sp, #12]
 8005894:	9802      	ldr	r0, [sp, #8]
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	2f00      	cmp	r7, #0
 800589a:	d0b8      	beq.n	800580e <_strtol_l.isra.0+0x62>
 800589c:	1e63      	subs	r3, r4, #1
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	e007      	b.n	80058b2 <_strtol_l.isra.0+0x106>
 80058a2:	9b00      	ldr	r3, [sp, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d000      	beq.n	80058aa <_strtol_l.isra.0+0xfe>
 80058a8:	4240      	negs	r0, r0
 80058aa:	2f00      	cmp	r7, #0
 80058ac:	d0af      	beq.n	800580e <_strtol_l.isra.0+0x62>
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	d1f4      	bne.n	800589c <_strtol_l.isra.0+0xf0>
 80058b2:	9b01      	ldr	r3, [sp, #4]
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	e7aa      	b.n	800580e <_strtol_l.isra.0+0x62>
 80058b8:	080063e1 	.word	0x080063e1
 80058bc:	7fffffff 	.word	0x7fffffff

080058c0 <strtol>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	4c04      	ldr	r4, [pc, #16]	@ (80058d4 <strtol+0x14>)
 80058c4:	0013      	movs	r3, r2
 80058c6:	000a      	movs	r2, r1
 80058c8:	0001      	movs	r1, r0
 80058ca:	6820      	ldr	r0, [r4, #0]
 80058cc:	f7ff ff6e 	bl	80057ac <_strtol_l.isra.0>
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	20000010 	.word	0x20000010

080058d8 <siprintf>:
 80058d8:	b40e      	push	{r1, r2, r3}
 80058da:	b510      	push	{r4, lr}
 80058dc:	2400      	movs	r4, #0
 80058de:	490c      	ldr	r1, [pc, #48]	@ (8005910 <siprintf+0x38>)
 80058e0:	b09d      	sub	sp, #116	@ 0x74
 80058e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80058e4:	9002      	str	r0, [sp, #8]
 80058e6:	9006      	str	r0, [sp, #24]
 80058e8:	9107      	str	r1, [sp, #28]
 80058ea:	9104      	str	r1, [sp, #16]
 80058ec:	4809      	ldr	r0, [pc, #36]	@ (8005914 <siprintf+0x3c>)
 80058ee:	490a      	ldr	r1, [pc, #40]	@ (8005918 <siprintf+0x40>)
 80058f0:	cb04      	ldmia	r3!, {r2}
 80058f2:	9105      	str	r1, [sp, #20]
 80058f4:	6800      	ldr	r0, [r0, #0]
 80058f6:	a902      	add	r1, sp, #8
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80058fc:	f000 f99e 	bl	8005c3c <_svfiprintf_r>
 8005900:	9b02      	ldr	r3, [sp, #8]
 8005902:	701c      	strb	r4, [r3, #0]
 8005904:	b01d      	add	sp, #116	@ 0x74
 8005906:	bc10      	pop	{r4}
 8005908:	bc08      	pop	{r3}
 800590a:	b003      	add	sp, #12
 800590c:	4718      	bx	r3
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	7fffffff 	.word	0x7fffffff
 8005914:	20000010 	.word	0x20000010
 8005918:	ffff0208 	.word	0xffff0208

0800591c <memset>:
 800591c:	0003      	movs	r3, r0
 800591e:	1882      	adds	r2, r0, r2
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	7019      	strb	r1, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <__errno>:
 800592c:	4b01      	ldr	r3, [pc, #4]	@ (8005934 <__errno+0x8>)
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	4770      	bx	lr
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	20000010 	.word	0x20000010

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	2600      	movs	r6, #0
 800593c:	4c0c      	ldr	r4, [pc, #48]	@ (8005970 <__libc_init_array+0x38>)
 800593e:	4d0d      	ldr	r5, [pc, #52]	@ (8005974 <__libc_init_array+0x3c>)
 8005940:	1b64      	subs	r4, r4, r5
 8005942:	10a4      	asrs	r4, r4, #2
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	2600      	movs	r6, #0
 800594a:	f000 fc61 	bl	8006210 <_init>
 800594e:	4c0a      	ldr	r4, [pc, #40]	@ (8005978 <__libc_init_array+0x40>)
 8005950:	4d0a      	ldr	r5, [pc, #40]	@ (800597c <__libc_init_array+0x44>)
 8005952:	1b64      	subs	r4, r4, r5
 8005954:	10a4      	asrs	r4, r4, #2
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	00b3      	lsls	r3, r6, #2
 800595e:	58eb      	ldr	r3, [r5, r3]
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	00b3      	lsls	r3, r6, #2
 8005968:	58eb      	ldr	r3, [r5, r3]
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	0800651c 	.word	0x0800651c
 8005974:	0800651c 	.word	0x0800651c
 8005978:	08006520 	.word	0x08006520
 800597c:	0800651c 	.word	0x0800651c

08005980 <__retarget_lock_acquire_recursive>:
 8005980:	4770      	bx	lr

08005982 <__retarget_lock_release_recursive>:
 8005982:	4770      	bx	lr

08005984 <_free_r>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	0005      	movs	r5, r0
 8005988:	1e0c      	subs	r4, r1, #0
 800598a:	d010      	beq.n	80059ae <_free_r+0x2a>
 800598c:	3c04      	subs	r4, #4
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	da00      	bge.n	8005996 <_free_r+0x12>
 8005994:	18e4      	adds	r4, r4, r3
 8005996:	0028      	movs	r0, r5
 8005998:	f000 f8e0 	bl	8005b5c <__malloc_lock>
 800599c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a14 <_free_r+0x90>)
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <_free_r+0x2c>
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	6014      	str	r4, [r2, #0]
 80059a8:	0028      	movs	r0, r5
 80059aa:	f000 f8df 	bl	8005b6c <__malloc_unlock>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d908      	bls.n	80059c6 <_free_r+0x42>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	1821      	adds	r1, r4, r0
 80059b8:	428b      	cmp	r3, r1
 80059ba:	d1f3      	bne.n	80059a4 <_free_r+0x20>
 80059bc:	6819      	ldr	r1, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	1809      	adds	r1, r1, r0
 80059c2:	6021      	str	r1, [r4, #0]
 80059c4:	e7ee      	b.n	80059a4 <_free_r+0x20>
 80059c6:	001a      	movs	r2, r3
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <_free_r+0x4e>
 80059ce:	42a3      	cmp	r3, r4
 80059d0:	d9f9      	bls.n	80059c6 <_free_r+0x42>
 80059d2:	6811      	ldr	r1, [r2, #0]
 80059d4:	1850      	adds	r0, r2, r1
 80059d6:	42a0      	cmp	r0, r4
 80059d8:	d10b      	bne.n	80059f2 <_free_r+0x6e>
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	1809      	adds	r1, r1, r0
 80059de:	1850      	adds	r0, r2, r1
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	4283      	cmp	r3, r0
 80059e4:	d1e0      	bne.n	80059a8 <_free_r+0x24>
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	1841      	adds	r1, r0, r1
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	6053      	str	r3, [r2, #4]
 80059f0:	e7da      	b.n	80059a8 <_free_r+0x24>
 80059f2:	42a0      	cmp	r0, r4
 80059f4:	d902      	bls.n	80059fc <_free_r+0x78>
 80059f6:	230c      	movs	r3, #12
 80059f8:	602b      	str	r3, [r5, #0]
 80059fa:	e7d5      	b.n	80059a8 <_free_r+0x24>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	1821      	adds	r1, r4, r0
 8005a00:	428b      	cmp	r3, r1
 8005a02:	d103      	bne.n	8005a0c <_free_r+0x88>
 8005a04:	6819      	ldr	r1, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	1809      	adds	r1, r1, r0
 8005a0a:	6021      	str	r1, [r4, #0]
 8005a0c:	6063      	str	r3, [r4, #4]
 8005a0e:	6054      	str	r4, [r2, #4]
 8005a10:	e7ca      	b.n	80059a8 <_free_r+0x24>
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	2000034c 	.word	0x2000034c

08005a18 <sbrk_aligned>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005a58 <sbrk_aligned+0x40>)
 8005a1c:	000d      	movs	r5, r1
 8005a1e:	6831      	ldr	r1, [r6, #0]
 8005a20:	0004      	movs	r4, r0
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d102      	bne.n	8005a2c <sbrk_aligned+0x14>
 8005a26:	f000 fb95 	bl	8006154 <_sbrk_r>
 8005a2a:	6030      	str	r0, [r6, #0]
 8005a2c:	0029      	movs	r1, r5
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f000 fb90 	bl	8006154 <_sbrk_r>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d103      	bne.n	8005a40 <sbrk_aligned+0x28>
 8005a38:	2501      	movs	r5, #1
 8005a3a:	426d      	negs	r5, r5
 8005a3c:	0028      	movs	r0, r5
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	2303      	movs	r3, #3
 8005a42:	1cc5      	adds	r5, r0, #3
 8005a44:	439d      	bics	r5, r3
 8005a46:	42a8      	cmp	r0, r5
 8005a48:	d0f8      	beq.n	8005a3c <sbrk_aligned+0x24>
 8005a4a:	1a29      	subs	r1, r5, r0
 8005a4c:	0020      	movs	r0, r4
 8005a4e:	f000 fb81 	bl	8006154 <_sbrk_r>
 8005a52:	3001      	adds	r0, #1
 8005a54:	d1f2      	bne.n	8005a3c <sbrk_aligned+0x24>
 8005a56:	e7ef      	b.n	8005a38 <sbrk_aligned+0x20>
 8005a58:	20000348 	.word	0x20000348

08005a5c <_malloc_r>:
 8005a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a5e:	2203      	movs	r2, #3
 8005a60:	1ccb      	adds	r3, r1, #3
 8005a62:	4393      	bics	r3, r2
 8005a64:	3308      	adds	r3, #8
 8005a66:	0005      	movs	r5, r0
 8005a68:	001f      	movs	r7, r3
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d234      	bcs.n	8005ad8 <_malloc_r+0x7c>
 8005a6e:	270c      	movs	r7, #12
 8005a70:	42b9      	cmp	r1, r7
 8005a72:	d833      	bhi.n	8005adc <_malloc_r+0x80>
 8005a74:	0028      	movs	r0, r5
 8005a76:	f000 f871 	bl	8005b5c <__malloc_lock>
 8005a7a:	4e37      	ldr	r6, [pc, #220]	@ (8005b58 <_malloc_r+0xfc>)
 8005a7c:	6833      	ldr	r3, [r6, #0]
 8005a7e:	001c      	movs	r4, r3
 8005a80:	2c00      	cmp	r4, #0
 8005a82:	d12f      	bne.n	8005ae4 <_malloc_r+0x88>
 8005a84:	0039      	movs	r1, r7
 8005a86:	0028      	movs	r0, r5
 8005a88:	f7ff ffc6 	bl	8005a18 <sbrk_aligned>
 8005a8c:	0004      	movs	r4, r0
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	d15f      	bne.n	8005b52 <_malloc_r+0xf6>
 8005a92:	6834      	ldr	r4, [r6, #0]
 8005a94:	9400      	str	r4, [sp, #0]
 8005a96:	9b00      	ldr	r3, [sp, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d14a      	bne.n	8005b32 <_malloc_r+0xd6>
 8005a9c:	2c00      	cmp	r4, #0
 8005a9e:	d052      	beq.n	8005b46 <_malloc_r+0xea>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	0028      	movs	r0, r5
 8005aa4:	18e3      	adds	r3, r4, r3
 8005aa6:	9900      	ldr	r1, [sp, #0]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	f000 fb53 	bl	8006154 <_sbrk_r>
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	4283      	cmp	r3, r0
 8005ab2:	d148      	bne.n	8005b46 <_malloc_r+0xea>
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	0028      	movs	r0, r5
 8005ab8:	1aff      	subs	r7, r7, r3
 8005aba:	0039      	movs	r1, r7
 8005abc:	f7ff ffac 	bl	8005a18 <sbrk_aligned>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d040      	beq.n	8005b46 <_malloc_r+0xea>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	19db      	adds	r3, r3, r7
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	6833      	ldr	r3, [r6, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	d133      	bne.n	8005b3a <_malloc_r+0xde>
 8005ad2:	9b00      	ldr	r3, [sp, #0]
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	e019      	b.n	8005b0c <_malloc_r+0xb0>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	dac9      	bge.n	8005a70 <_malloc_r+0x14>
 8005adc:	230c      	movs	r3, #12
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ae4:	6821      	ldr	r1, [r4, #0]
 8005ae6:	1bc9      	subs	r1, r1, r7
 8005ae8:	d420      	bmi.n	8005b2c <_malloc_r+0xd0>
 8005aea:	290b      	cmp	r1, #11
 8005aec:	d90a      	bls.n	8005b04 <_malloc_r+0xa8>
 8005aee:	19e2      	adds	r2, r4, r7
 8005af0:	6027      	str	r7, [r4, #0]
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	d104      	bne.n	8005b00 <_malloc_r+0xa4>
 8005af6:	6032      	str	r2, [r6, #0]
 8005af8:	6863      	ldr	r3, [r4, #4]
 8005afa:	6011      	str	r1, [r2, #0]
 8005afc:	6053      	str	r3, [r2, #4]
 8005afe:	e005      	b.n	8005b0c <_malloc_r+0xb0>
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	e7f9      	b.n	8005af8 <_malloc_r+0x9c>
 8005b04:	6862      	ldr	r2, [r4, #4]
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	d10e      	bne.n	8005b28 <_malloc_r+0xcc>
 8005b0a:	6032      	str	r2, [r6, #0]
 8005b0c:	0028      	movs	r0, r5
 8005b0e:	f000 f82d 	bl	8005b6c <__malloc_unlock>
 8005b12:	0020      	movs	r0, r4
 8005b14:	2207      	movs	r2, #7
 8005b16:	300b      	adds	r0, #11
 8005b18:	1d23      	adds	r3, r4, #4
 8005b1a:	4390      	bics	r0, r2
 8005b1c:	1ac2      	subs	r2, r0, r3
 8005b1e:	4298      	cmp	r0, r3
 8005b20:	d0df      	beq.n	8005ae2 <_malloc_r+0x86>
 8005b22:	1a1b      	subs	r3, r3, r0
 8005b24:	50a3      	str	r3, [r4, r2]
 8005b26:	e7dc      	b.n	8005ae2 <_malloc_r+0x86>
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	e7ef      	b.n	8005b0c <_malloc_r+0xb0>
 8005b2c:	0023      	movs	r3, r4
 8005b2e:	6864      	ldr	r4, [r4, #4]
 8005b30:	e7a6      	b.n	8005a80 <_malloc_r+0x24>
 8005b32:	9c00      	ldr	r4, [sp, #0]
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	e7ad      	b.n	8005a96 <_malloc_r+0x3a>
 8005b3a:	001a      	movs	r2, r3
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	42a3      	cmp	r3, r4
 8005b40:	d1fb      	bne.n	8005b3a <_malloc_r+0xde>
 8005b42:	2300      	movs	r3, #0
 8005b44:	e7da      	b.n	8005afc <_malloc_r+0xa0>
 8005b46:	230c      	movs	r3, #12
 8005b48:	0028      	movs	r0, r5
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f000 f80e 	bl	8005b6c <__malloc_unlock>
 8005b50:	e7c6      	b.n	8005ae0 <_malloc_r+0x84>
 8005b52:	6007      	str	r7, [r0, #0]
 8005b54:	e7da      	b.n	8005b0c <_malloc_r+0xb0>
 8005b56:	46c0      	nop			@ (mov r8, r8)
 8005b58:	2000034c 	.word	0x2000034c

08005b5c <__malloc_lock>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	4802      	ldr	r0, [pc, #8]	@ (8005b68 <__malloc_lock+0xc>)
 8005b60:	f7ff ff0e 	bl	8005980 <__retarget_lock_acquire_recursive>
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	20000344 	.word	0x20000344

08005b6c <__malloc_unlock>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4802      	ldr	r0, [pc, #8]	@ (8005b78 <__malloc_unlock+0xc>)
 8005b70:	f7ff ff07 	bl	8005982 <__retarget_lock_release_recursive>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	46c0      	nop			@ (mov r8, r8)
 8005b78:	20000344 	.word	0x20000344

08005b7c <__ssputs_r>:
 8005b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7e:	688e      	ldr	r6, [r1, #8]
 8005b80:	b085      	sub	sp, #20
 8005b82:	001f      	movs	r7, r3
 8005b84:	000c      	movs	r4, r1
 8005b86:	680b      	ldr	r3, [r1, #0]
 8005b88:	9002      	str	r0, [sp, #8]
 8005b8a:	9203      	str	r2, [sp, #12]
 8005b8c:	42be      	cmp	r6, r7
 8005b8e:	d830      	bhi.n	8005bf2 <__ssputs_r+0x76>
 8005b90:	210c      	movs	r1, #12
 8005b92:	5e62      	ldrsh	r2, [r4, r1]
 8005b94:	2190      	movs	r1, #144	@ 0x90
 8005b96:	00c9      	lsls	r1, r1, #3
 8005b98:	420a      	tst	r2, r1
 8005b9a:	d028      	beq.n	8005bee <__ssputs_r+0x72>
 8005b9c:	2003      	movs	r0, #3
 8005b9e:	6921      	ldr	r1, [r4, #16]
 8005ba0:	1a5b      	subs	r3, r3, r1
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	6963      	ldr	r3, [r4, #20]
 8005ba6:	4343      	muls	r3, r0
 8005ba8:	9801      	ldr	r0, [sp, #4]
 8005baa:	0fdd      	lsrs	r5, r3, #31
 8005bac:	18ed      	adds	r5, r5, r3
 8005bae:	1c7b      	adds	r3, r7, #1
 8005bb0:	181b      	adds	r3, r3, r0
 8005bb2:	106d      	asrs	r5, r5, #1
 8005bb4:	42ab      	cmp	r3, r5
 8005bb6:	d900      	bls.n	8005bba <__ssputs_r+0x3e>
 8005bb8:	001d      	movs	r5, r3
 8005bba:	0552      	lsls	r2, r2, #21
 8005bbc:	d528      	bpl.n	8005c10 <__ssputs_r+0x94>
 8005bbe:	0029      	movs	r1, r5
 8005bc0:	9802      	ldr	r0, [sp, #8]
 8005bc2:	f7ff ff4b 	bl	8005a5c <_malloc_r>
 8005bc6:	1e06      	subs	r6, r0, #0
 8005bc8:	d02c      	beq.n	8005c24 <__ssputs_r+0xa8>
 8005bca:	9a01      	ldr	r2, [sp, #4]
 8005bcc:	6921      	ldr	r1, [r4, #16]
 8005bce:	f000 fade 	bl	800618e <memcpy>
 8005bd2:	89a2      	ldrh	r2, [r4, #12]
 8005bd4:	4b18      	ldr	r3, [pc, #96]	@ (8005c38 <__ssputs_r+0xbc>)
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	2380      	movs	r3, #128	@ 0x80
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	6126      	str	r6, [r4, #16]
 8005be2:	18f6      	adds	r6, r6, r3
 8005be4:	6026      	str	r6, [r4, #0]
 8005be6:	003e      	movs	r6, r7
 8005be8:	6165      	str	r5, [r4, #20]
 8005bea:	1aed      	subs	r5, r5, r3
 8005bec:	60a5      	str	r5, [r4, #8]
 8005bee:	42be      	cmp	r6, r7
 8005bf0:	d900      	bls.n	8005bf4 <__ssputs_r+0x78>
 8005bf2:	003e      	movs	r6, r7
 8005bf4:	0032      	movs	r2, r6
 8005bf6:	9903      	ldr	r1, [sp, #12]
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	f000 fa99 	bl	8006130 <memmove>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	68a3      	ldr	r3, [r4, #8]
 8005c02:	1b9b      	subs	r3, r3, r6
 8005c04:	60a3      	str	r3, [r4, #8]
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	199b      	adds	r3, r3, r6
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	b005      	add	sp, #20
 8005c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c10:	002a      	movs	r2, r5
 8005c12:	9802      	ldr	r0, [sp, #8]
 8005c14:	f000 fac4 	bl	80061a0 <_realloc_r>
 8005c18:	1e06      	subs	r6, r0, #0
 8005c1a:	d1e0      	bne.n	8005bde <__ssputs_r+0x62>
 8005c1c:	6921      	ldr	r1, [r4, #16]
 8005c1e:	9802      	ldr	r0, [sp, #8]
 8005c20:	f7ff feb0 	bl	8005984 <_free_r>
 8005c24:	230c      	movs	r3, #12
 8005c26:	2001      	movs	r0, #1
 8005c28:	9a02      	ldr	r2, [sp, #8]
 8005c2a:	4240      	negs	r0, r0
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	89a2      	ldrh	r2, [r4, #12]
 8005c30:	3334      	adds	r3, #52	@ 0x34
 8005c32:	4313      	orrs	r3, r2
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	e7e9      	b.n	8005c0c <__ssputs_r+0x90>
 8005c38:	fffffb7f 	.word	0xfffffb7f

08005c3c <_svfiprintf_r>:
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b0a1      	sub	sp, #132	@ 0x84
 8005c40:	9003      	str	r0, [sp, #12]
 8005c42:	001d      	movs	r5, r3
 8005c44:	898b      	ldrh	r3, [r1, #12]
 8005c46:	000f      	movs	r7, r1
 8005c48:	0016      	movs	r6, r2
 8005c4a:	061b      	lsls	r3, r3, #24
 8005c4c:	d511      	bpl.n	8005c72 <_svfiprintf_r+0x36>
 8005c4e:	690b      	ldr	r3, [r1, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10e      	bne.n	8005c72 <_svfiprintf_r+0x36>
 8005c54:	2140      	movs	r1, #64	@ 0x40
 8005c56:	f7ff ff01 	bl	8005a5c <_malloc_r>
 8005c5a:	6038      	str	r0, [r7, #0]
 8005c5c:	6138      	str	r0, [r7, #16]
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d105      	bne.n	8005c6e <_svfiprintf_r+0x32>
 8005c62:	230c      	movs	r3, #12
 8005c64:	9a03      	ldr	r2, [sp, #12]
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	2001      	movs	r0, #1
 8005c6a:	4240      	negs	r0, r0
 8005c6c:	e0cf      	b.n	8005e0e <_svfiprintf_r+0x1d2>
 8005c6e:	2340      	movs	r3, #64	@ 0x40
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	2300      	movs	r3, #0
 8005c74:	ac08      	add	r4, sp, #32
 8005c76:	6163      	str	r3, [r4, #20]
 8005c78:	3320      	adds	r3, #32
 8005c7a:	7663      	strb	r3, [r4, #25]
 8005c7c:	3310      	adds	r3, #16
 8005c7e:	76a3      	strb	r3, [r4, #26]
 8005c80:	9507      	str	r5, [sp, #28]
 8005c82:	0035      	movs	r5, r6
 8005c84:	782b      	ldrb	r3, [r5, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <_svfiprintf_r+0x52>
 8005c8a:	2b25      	cmp	r3, #37	@ 0x25
 8005c8c:	d148      	bne.n	8005d20 <_svfiprintf_r+0xe4>
 8005c8e:	1bab      	subs	r3, r5, r6
 8005c90:	9305      	str	r3, [sp, #20]
 8005c92:	42b5      	cmp	r5, r6
 8005c94:	d00b      	beq.n	8005cae <_svfiprintf_r+0x72>
 8005c96:	0032      	movs	r2, r6
 8005c98:	0039      	movs	r1, r7
 8005c9a:	9803      	ldr	r0, [sp, #12]
 8005c9c:	f7ff ff6e 	bl	8005b7c <__ssputs_r>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d100      	bne.n	8005ca6 <_svfiprintf_r+0x6a>
 8005ca4:	e0ae      	b.n	8005e04 <_svfiprintf_r+0x1c8>
 8005ca6:	6963      	ldr	r3, [r4, #20]
 8005ca8:	9a05      	ldr	r2, [sp, #20]
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	6163      	str	r3, [r4, #20]
 8005cae:	782b      	ldrb	r3, [r5, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d100      	bne.n	8005cb6 <_svfiprintf_r+0x7a>
 8005cb4:	e0a6      	b.n	8005e04 <_svfiprintf_r+0x1c8>
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4252      	negs	r2, r2
 8005cbc:	6062      	str	r2, [r4, #4]
 8005cbe:	a904      	add	r1, sp, #16
 8005cc0:	3254      	adds	r2, #84	@ 0x54
 8005cc2:	1852      	adds	r2, r2, r1
 8005cc4:	1c6e      	adds	r6, r5, #1
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	60e3      	str	r3, [r4, #12]
 8005cca:	60a3      	str	r3, [r4, #8]
 8005ccc:	7013      	strb	r3, [r2, #0]
 8005cce:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005cd0:	4b54      	ldr	r3, [pc, #336]	@ (8005e24 <_svfiprintf_r+0x1e8>)
 8005cd2:	2205      	movs	r2, #5
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	7831      	ldrb	r1, [r6, #0]
 8005cd8:	9305      	str	r3, [sp, #20]
 8005cda:	f000 fa4d 	bl	8006178 <memchr>
 8005cde:	1c75      	adds	r5, r6, #1
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d11f      	bne.n	8005d24 <_svfiprintf_r+0xe8>
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	06d3      	lsls	r3, r2, #27
 8005ce8:	d504      	bpl.n	8005cf4 <_svfiprintf_r+0xb8>
 8005cea:	2353      	movs	r3, #83	@ 0x53
 8005cec:	a904      	add	r1, sp, #16
 8005cee:	185b      	adds	r3, r3, r1
 8005cf0:	2120      	movs	r1, #32
 8005cf2:	7019      	strb	r1, [r3, #0]
 8005cf4:	0713      	lsls	r3, r2, #28
 8005cf6:	d504      	bpl.n	8005d02 <_svfiprintf_r+0xc6>
 8005cf8:	2353      	movs	r3, #83	@ 0x53
 8005cfa:	a904      	add	r1, sp, #16
 8005cfc:	185b      	adds	r3, r3, r1
 8005cfe:	212b      	movs	r1, #43	@ 0x2b
 8005d00:	7019      	strb	r1, [r3, #0]
 8005d02:	7833      	ldrb	r3, [r6, #0]
 8005d04:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d06:	d016      	beq.n	8005d36 <_svfiprintf_r+0xfa>
 8005d08:	0035      	movs	r5, r6
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	200a      	movs	r0, #10
 8005d0e:	68e3      	ldr	r3, [r4, #12]
 8005d10:	782a      	ldrb	r2, [r5, #0]
 8005d12:	1c6e      	adds	r6, r5, #1
 8005d14:	3a30      	subs	r2, #48	@ 0x30
 8005d16:	2a09      	cmp	r2, #9
 8005d18:	d950      	bls.n	8005dbc <_svfiprintf_r+0x180>
 8005d1a:	2900      	cmp	r1, #0
 8005d1c:	d111      	bne.n	8005d42 <_svfiprintf_r+0x106>
 8005d1e:	e017      	b.n	8005d50 <_svfiprintf_r+0x114>
 8005d20:	3501      	adds	r5, #1
 8005d22:	e7af      	b.n	8005c84 <_svfiprintf_r+0x48>
 8005d24:	9b05      	ldr	r3, [sp, #20]
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	1ac0      	subs	r0, r0, r3
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4083      	lsls	r3, r0
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	002e      	movs	r6, r5
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	e7cc      	b.n	8005cd0 <_svfiprintf_r+0x94>
 8005d36:	9b07      	ldr	r3, [sp, #28]
 8005d38:	1d19      	adds	r1, r3, #4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	9107      	str	r1, [sp, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	db01      	blt.n	8005d46 <_svfiprintf_r+0x10a>
 8005d42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d44:	e004      	b.n	8005d50 <_svfiprintf_r+0x114>
 8005d46:	425b      	negs	r3, r3
 8005d48:	60e3      	str	r3, [r4, #12]
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	782b      	ldrb	r3, [r5, #0]
 8005d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d54:	d10c      	bne.n	8005d70 <_svfiprintf_r+0x134>
 8005d56:	786b      	ldrb	r3, [r5, #1]
 8005d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d5a:	d134      	bne.n	8005dc6 <_svfiprintf_r+0x18a>
 8005d5c:	9b07      	ldr	r3, [sp, #28]
 8005d5e:	3502      	adds	r5, #2
 8005d60:	1d1a      	adds	r2, r3, #4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	9207      	str	r2, [sp, #28]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da01      	bge.n	8005d6e <_svfiprintf_r+0x132>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	425b      	negs	r3, r3
 8005d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d70:	4e2d      	ldr	r6, [pc, #180]	@ (8005e28 <_svfiprintf_r+0x1ec>)
 8005d72:	2203      	movs	r2, #3
 8005d74:	0030      	movs	r0, r6
 8005d76:	7829      	ldrb	r1, [r5, #0]
 8005d78:	f000 f9fe 	bl	8006178 <memchr>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d006      	beq.n	8005d8e <_svfiprintf_r+0x152>
 8005d80:	2340      	movs	r3, #64	@ 0x40
 8005d82:	1b80      	subs	r0, r0, r6
 8005d84:	4083      	lsls	r3, r0
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	3501      	adds	r5, #1
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	7829      	ldrb	r1, [r5, #0]
 8005d90:	2206      	movs	r2, #6
 8005d92:	4826      	ldr	r0, [pc, #152]	@ (8005e2c <_svfiprintf_r+0x1f0>)
 8005d94:	1c6e      	adds	r6, r5, #1
 8005d96:	7621      	strb	r1, [r4, #24]
 8005d98:	f000 f9ee 	bl	8006178 <memchr>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d038      	beq.n	8005e12 <_svfiprintf_r+0x1d6>
 8005da0:	4b23      	ldr	r3, [pc, #140]	@ (8005e30 <_svfiprintf_r+0x1f4>)
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d122      	bne.n	8005dec <_svfiprintf_r+0x1b0>
 8005da6:	2207      	movs	r2, #7
 8005da8:	9b07      	ldr	r3, [sp, #28]
 8005daa:	3307      	adds	r3, #7
 8005dac:	4393      	bics	r3, r2
 8005dae:	3308      	adds	r3, #8
 8005db0:	9307      	str	r3, [sp, #28]
 8005db2:	6963      	ldr	r3, [r4, #20]
 8005db4:	9a04      	ldr	r2, [sp, #16]
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	6163      	str	r3, [r4, #20]
 8005dba:	e762      	b.n	8005c82 <_svfiprintf_r+0x46>
 8005dbc:	4343      	muls	r3, r0
 8005dbe:	0035      	movs	r5, r6
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	189b      	adds	r3, r3, r2
 8005dc4:	e7a4      	b.n	8005d10 <_svfiprintf_r+0xd4>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	200a      	movs	r0, #10
 8005dca:	0019      	movs	r1, r3
 8005dcc:	3501      	adds	r5, #1
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	782a      	ldrb	r2, [r5, #0]
 8005dd2:	1c6e      	adds	r6, r5, #1
 8005dd4:	3a30      	subs	r2, #48	@ 0x30
 8005dd6:	2a09      	cmp	r2, #9
 8005dd8:	d903      	bls.n	8005de2 <_svfiprintf_r+0x1a6>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0c8      	beq.n	8005d70 <_svfiprintf_r+0x134>
 8005dde:	9109      	str	r1, [sp, #36]	@ 0x24
 8005de0:	e7c6      	b.n	8005d70 <_svfiprintf_r+0x134>
 8005de2:	4341      	muls	r1, r0
 8005de4:	0035      	movs	r5, r6
 8005de6:	2301      	movs	r3, #1
 8005de8:	1889      	adds	r1, r1, r2
 8005dea:	e7f1      	b.n	8005dd0 <_svfiprintf_r+0x194>
 8005dec:	aa07      	add	r2, sp, #28
 8005dee:	9200      	str	r2, [sp, #0]
 8005df0:	0021      	movs	r1, r4
 8005df2:	003a      	movs	r2, r7
 8005df4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e34 <_svfiprintf_r+0x1f8>)
 8005df6:	9803      	ldr	r0, [sp, #12]
 8005df8:	e000      	b.n	8005dfc <_svfiprintf_r+0x1c0>
 8005dfa:	bf00      	nop
 8005dfc:	9004      	str	r0, [sp, #16]
 8005dfe:	9b04      	ldr	r3, [sp, #16]
 8005e00:	3301      	adds	r3, #1
 8005e02:	d1d6      	bne.n	8005db2 <_svfiprintf_r+0x176>
 8005e04:	89bb      	ldrh	r3, [r7, #12]
 8005e06:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005e08:	065b      	lsls	r3, r3, #25
 8005e0a:	d500      	bpl.n	8005e0e <_svfiprintf_r+0x1d2>
 8005e0c:	e72c      	b.n	8005c68 <_svfiprintf_r+0x2c>
 8005e0e:	b021      	add	sp, #132	@ 0x84
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e12:	aa07      	add	r2, sp, #28
 8005e14:	9200      	str	r2, [sp, #0]
 8005e16:	0021      	movs	r1, r4
 8005e18:	003a      	movs	r2, r7
 8005e1a:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <_svfiprintf_r+0x1f8>)
 8005e1c:	9803      	ldr	r0, [sp, #12]
 8005e1e:	f000 f87b 	bl	8005f18 <_printf_i>
 8005e22:	e7eb      	b.n	8005dfc <_svfiprintf_r+0x1c0>
 8005e24:	080064e1 	.word	0x080064e1
 8005e28:	080064e7 	.word	0x080064e7
 8005e2c:	080064eb 	.word	0x080064eb
 8005e30:	00000000 	.word	0x00000000
 8005e34:	08005b7d 	.word	0x08005b7d

08005e38 <_printf_common>:
 8005e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e3a:	0016      	movs	r6, r2
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	688a      	ldr	r2, [r1, #8]
 8005e40:	690b      	ldr	r3, [r1, #16]
 8005e42:	000c      	movs	r4, r1
 8005e44:	9000      	str	r0, [sp, #0]
 8005e46:	4293      	cmp	r3, r2
 8005e48:	da00      	bge.n	8005e4c <_printf_common+0x14>
 8005e4a:	0013      	movs	r3, r2
 8005e4c:	0022      	movs	r2, r4
 8005e4e:	6033      	str	r3, [r6, #0]
 8005e50:	3243      	adds	r2, #67	@ 0x43
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	d001      	beq.n	8005e5c <_printf_common+0x24>
 8005e58:	3301      	adds	r3, #1
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	069b      	lsls	r3, r3, #26
 8005e60:	d502      	bpl.n	8005e68 <_printf_common+0x30>
 8005e62:	6833      	ldr	r3, [r6, #0]
 8005e64:	3302      	adds	r3, #2
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	2306      	movs	r3, #6
 8005e6c:	0015      	movs	r5, r2
 8005e6e:	401d      	ands	r5, r3
 8005e70:	421a      	tst	r2, r3
 8005e72:	d027      	beq.n	8005ec4 <_printf_common+0x8c>
 8005e74:	0023      	movs	r3, r4
 8005e76:	3343      	adds	r3, #67	@ 0x43
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	1e5a      	subs	r2, r3, #1
 8005e7c:	4193      	sbcs	r3, r2
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	0692      	lsls	r2, r2, #26
 8005e82:	d430      	bmi.n	8005ee6 <_printf_common+0xae>
 8005e84:	0022      	movs	r2, r4
 8005e86:	9901      	ldr	r1, [sp, #4]
 8005e88:	9800      	ldr	r0, [sp, #0]
 8005e8a:	9d08      	ldr	r5, [sp, #32]
 8005e8c:	3243      	adds	r2, #67	@ 0x43
 8005e8e:	47a8      	blx	r5
 8005e90:	3001      	adds	r0, #1
 8005e92:	d025      	beq.n	8005ee0 <_printf_common+0xa8>
 8005e94:	2206      	movs	r2, #6
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	2500      	movs	r5, #0
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d105      	bne.n	8005eac <_printf_common+0x74>
 8005ea0:	6833      	ldr	r3, [r6, #0]
 8005ea2:	68e5      	ldr	r5, [r4, #12]
 8005ea4:	1aed      	subs	r5, r5, r3
 8005ea6:	43eb      	mvns	r3, r5
 8005ea8:	17db      	asrs	r3, r3, #31
 8005eaa:	401d      	ands	r5, r3
 8005eac:	68a3      	ldr	r3, [r4, #8]
 8005eae:	6922      	ldr	r2, [r4, #16]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	dd01      	ble.n	8005eb8 <_printf_common+0x80>
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	18ed      	adds	r5, r5, r3
 8005eb8:	2600      	movs	r6, #0
 8005eba:	42b5      	cmp	r5, r6
 8005ebc:	d120      	bne.n	8005f00 <_printf_common+0xc8>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e010      	b.n	8005ee4 <_printf_common+0xac>
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	68e3      	ldr	r3, [r4, #12]
 8005ec6:	6832      	ldr	r2, [r6, #0]
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	ddd2      	ble.n	8005e74 <_printf_common+0x3c>
 8005ece:	0022      	movs	r2, r4
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	9901      	ldr	r1, [sp, #4]
 8005ed4:	9800      	ldr	r0, [sp, #0]
 8005ed6:	9f08      	ldr	r7, [sp, #32]
 8005ed8:	3219      	adds	r2, #25
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	d1f0      	bne.n	8005ec2 <_printf_common+0x8a>
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	4240      	negs	r0, r0
 8005ee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ee6:	2030      	movs	r0, #48	@ 0x30
 8005ee8:	18e1      	adds	r1, r4, r3
 8005eea:	3143      	adds	r1, #67	@ 0x43
 8005eec:	7008      	strb	r0, [r1, #0]
 8005eee:	0021      	movs	r1, r4
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	3145      	adds	r1, #69	@ 0x45
 8005ef4:	7809      	ldrb	r1, [r1, #0]
 8005ef6:	18a2      	adds	r2, r4, r2
 8005ef8:	3243      	adds	r2, #67	@ 0x43
 8005efa:	3302      	adds	r3, #2
 8005efc:	7011      	strb	r1, [r2, #0]
 8005efe:	e7c1      	b.n	8005e84 <_printf_common+0x4c>
 8005f00:	0022      	movs	r2, r4
 8005f02:	2301      	movs	r3, #1
 8005f04:	9901      	ldr	r1, [sp, #4]
 8005f06:	9800      	ldr	r0, [sp, #0]
 8005f08:	9f08      	ldr	r7, [sp, #32]
 8005f0a:	321a      	adds	r2, #26
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d0e6      	beq.n	8005ee0 <_printf_common+0xa8>
 8005f12:	3601      	adds	r6, #1
 8005f14:	e7d1      	b.n	8005eba <_printf_common+0x82>
	...

08005f18 <_printf_i>:
 8005f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f1a:	b08b      	sub	sp, #44	@ 0x2c
 8005f1c:	9206      	str	r2, [sp, #24]
 8005f1e:	000a      	movs	r2, r1
 8005f20:	3243      	adds	r2, #67	@ 0x43
 8005f22:	9307      	str	r3, [sp, #28]
 8005f24:	9005      	str	r0, [sp, #20]
 8005f26:	9203      	str	r2, [sp, #12]
 8005f28:	7e0a      	ldrb	r2, [r1, #24]
 8005f2a:	000c      	movs	r4, r1
 8005f2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f2e:	2a78      	cmp	r2, #120	@ 0x78
 8005f30:	d809      	bhi.n	8005f46 <_printf_i+0x2e>
 8005f32:	2a62      	cmp	r2, #98	@ 0x62
 8005f34:	d80b      	bhi.n	8005f4e <_printf_i+0x36>
 8005f36:	2a00      	cmp	r2, #0
 8005f38:	d100      	bne.n	8005f3c <_printf_i+0x24>
 8005f3a:	e0ba      	b.n	80060b2 <_printf_i+0x19a>
 8005f3c:	497a      	ldr	r1, [pc, #488]	@ (8006128 <_printf_i+0x210>)
 8005f3e:	9104      	str	r1, [sp, #16]
 8005f40:	2a58      	cmp	r2, #88	@ 0x58
 8005f42:	d100      	bne.n	8005f46 <_printf_i+0x2e>
 8005f44:	e08e      	b.n	8006064 <_printf_i+0x14c>
 8005f46:	0025      	movs	r5, r4
 8005f48:	3542      	adds	r5, #66	@ 0x42
 8005f4a:	702a      	strb	r2, [r5, #0]
 8005f4c:	e022      	b.n	8005f94 <_printf_i+0x7c>
 8005f4e:	0010      	movs	r0, r2
 8005f50:	3863      	subs	r0, #99	@ 0x63
 8005f52:	2815      	cmp	r0, #21
 8005f54:	d8f7      	bhi.n	8005f46 <_printf_i+0x2e>
 8005f56:	f7fa f8dd 	bl	8000114 <__gnu_thumb1_case_shi>
 8005f5a:	0016      	.short	0x0016
 8005f5c:	fff6001f 	.word	0xfff6001f
 8005f60:	fff6fff6 	.word	0xfff6fff6
 8005f64:	001ffff6 	.word	0x001ffff6
 8005f68:	fff6fff6 	.word	0xfff6fff6
 8005f6c:	fff6fff6 	.word	0xfff6fff6
 8005f70:	0036009f 	.word	0x0036009f
 8005f74:	fff6007e 	.word	0xfff6007e
 8005f78:	00b0fff6 	.word	0x00b0fff6
 8005f7c:	0036fff6 	.word	0x0036fff6
 8005f80:	fff6fff6 	.word	0xfff6fff6
 8005f84:	0082      	.short	0x0082
 8005f86:	0025      	movs	r5, r4
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	3542      	adds	r5, #66	@ 0x42
 8005f8c:	1d11      	adds	r1, r2, #4
 8005f8e:	6019      	str	r1, [r3, #0]
 8005f90:	6813      	ldr	r3, [r2, #0]
 8005f92:	702b      	strb	r3, [r5, #0]
 8005f94:	2301      	movs	r3, #1
 8005f96:	e09e      	b.n	80060d6 <_printf_i+0x1be>
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	6809      	ldr	r1, [r1, #0]
 8005f9c:	1d02      	adds	r2, r0, #4
 8005f9e:	060d      	lsls	r5, r1, #24
 8005fa0:	d50b      	bpl.n	8005fba <_printf_i+0xa2>
 8005fa2:	6806      	ldr	r6, [r0, #0]
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	da03      	bge.n	8005fb2 <_printf_i+0x9a>
 8005faa:	232d      	movs	r3, #45	@ 0x2d
 8005fac:	9a03      	ldr	r2, [sp, #12]
 8005fae:	4276      	negs	r6, r6
 8005fb0:	7013      	strb	r3, [r2, #0]
 8005fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8006128 <_printf_i+0x210>)
 8005fb4:	270a      	movs	r7, #10
 8005fb6:	9304      	str	r3, [sp, #16]
 8005fb8:	e018      	b.n	8005fec <_printf_i+0xd4>
 8005fba:	6806      	ldr	r6, [r0, #0]
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	0649      	lsls	r1, r1, #25
 8005fc0:	d5f1      	bpl.n	8005fa6 <_printf_i+0x8e>
 8005fc2:	b236      	sxth	r6, r6
 8005fc4:	e7ef      	b.n	8005fa6 <_printf_i+0x8e>
 8005fc6:	6808      	ldr	r0, [r1, #0]
 8005fc8:	6819      	ldr	r1, [r3, #0]
 8005fca:	c940      	ldmia	r1!, {r6}
 8005fcc:	0605      	lsls	r5, r0, #24
 8005fce:	d402      	bmi.n	8005fd6 <_printf_i+0xbe>
 8005fd0:	0640      	lsls	r0, r0, #25
 8005fd2:	d500      	bpl.n	8005fd6 <_printf_i+0xbe>
 8005fd4:	b2b6      	uxth	r6, r6
 8005fd6:	6019      	str	r1, [r3, #0]
 8005fd8:	4b53      	ldr	r3, [pc, #332]	@ (8006128 <_printf_i+0x210>)
 8005fda:	270a      	movs	r7, #10
 8005fdc:	9304      	str	r3, [sp, #16]
 8005fde:	2a6f      	cmp	r2, #111	@ 0x6f
 8005fe0:	d100      	bne.n	8005fe4 <_printf_i+0xcc>
 8005fe2:	3f02      	subs	r7, #2
 8005fe4:	0023      	movs	r3, r4
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	3343      	adds	r3, #67	@ 0x43
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	6863      	ldr	r3, [r4, #4]
 8005fee:	60a3      	str	r3, [r4, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	db06      	blt.n	8006002 <_printf_i+0xea>
 8005ff4:	2104      	movs	r1, #4
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	9d03      	ldr	r5, [sp, #12]
 8005ffa:	438a      	bics	r2, r1
 8005ffc:	6022      	str	r2, [r4, #0]
 8005ffe:	4333      	orrs	r3, r6
 8006000:	d00c      	beq.n	800601c <_printf_i+0x104>
 8006002:	9d03      	ldr	r5, [sp, #12]
 8006004:	0030      	movs	r0, r6
 8006006:	0039      	movs	r1, r7
 8006008:	f7fa f914 	bl	8000234 <__aeabi_uidivmod>
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	3d01      	subs	r5, #1
 8006010:	5c5b      	ldrb	r3, [r3, r1]
 8006012:	702b      	strb	r3, [r5, #0]
 8006014:	0033      	movs	r3, r6
 8006016:	0006      	movs	r6, r0
 8006018:	429f      	cmp	r7, r3
 800601a:	d9f3      	bls.n	8006004 <_printf_i+0xec>
 800601c:	2f08      	cmp	r7, #8
 800601e:	d109      	bne.n	8006034 <_printf_i+0x11c>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	07db      	lsls	r3, r3, #31
 8006024:	d506      	bpl.n	8006034 <_printf_i+0x11c>
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	429a      	cmp	r2, r3
 800602c:	dc02      	bgt.n	8006034 <_printf_i+0x11c>
 800602e:	2330      	movs	r3, #48	@ 0x30
 8006030:	3d01      	subs	r5, #1
 8006032:	702b      	strb	r3, [r5, #0]
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	1b5b      	subs	r3, r3, r5
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	9b07      	ldr	r3, [sp, #28]
 800603c:	0021      	movs	r1, r4
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	9805      	ldr	r0, [sp, #20]
 8006042:	9b06      	ldr	r3, [sp, #24]
 8006044:	aa09      	add	r2, sp, #36	@ 0x24
 8006046:	f7ff fef7 	bl	8005e38 <_printf_common>
 800604a:	3001      	adds	r0, #1
 800604c:	d148      	bne.n	80060e0 <_printf_i+0x1c8>
 800604e:	2001      	movs	r0, #1
 8006050:	4240      	negs	r0, r0
 8006052:	b00b      	add	sp, #44	@ 0x2c
 8006054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006056:	2220      	movs	r2, #32
 8006058:	6809      	ldr	r1, [r1, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	6022      	str	r2, [r4, #0]
 800605e:	2278      	movs	r2, #120	@ 0x78
 8006060:	4932      	ldr	r1, [pc, #200]	@ (800612c <_printf_i+0x214>)
 8006062:	9104      	str	r1, [sp, #16]
 8006064:	0021      	movs	r1, r4
 8006066:	3145      	adds	r1, #69	@ 0x45
 8006068:	700a      	strb	r2, [r1, #0]
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	6822      	ldr	r2, [r4, #0]
 800606e:	c940      	ldmia	r1!, {r6}
 8006070:	0610      	lsls	r0, r2, #24
 8006072:	d402      	bmi.n	800607a <_printf_i+0x162>
 8006074:	0650      	lsls	r0, r2, #25
 8006076:	d500      	bpl.n	800607a <_printf_i+0x162>
 8006078:	b2b6      	uxth	r6, r6
 800607a:	6019      	str	r1, [r3, #0]
 800607c:	07d3      	lsls	r3, r2, #31
 800607e:	d502      	bpl.n	8006086 <_printf_i+0x16e>
 8006080:	2320      	movs	r3, #32
 8006082:	4313      	orrs	r3, r2
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	2e00      	cmp	r6, #0
 8006088:	d001      	beq.n	800608e <_printf_i+0x176>
 800608a:	2710      	movs	r7, #16
 800608c:	e7aa      	b.n	8005fe4 <_printf_i+0xcc>
 800608e:	2220      	movs	r2, #32
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	4393      	bics	r3, r2
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	e7f8      	b.n	800608a <_printf_i+0x172>
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	680d      	ldr	r5, [r1, #0]
 800609c:	1d10      	adds	r0, r2, #4
 800609e:	6949      	ldr	r1, [r1, #20]
 80060a0:	6018      	str	r0, [r3, #0]
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	062e      	lsls	r6, r5, #24
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0x194>
 80060a8:	6019      	str	r1, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0x19a>
 80060ac:	066d      	lsls	r5, r5, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0x190>
 80060b0:	8019      	strh	r1, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9d03      	ldr	r5, [sp, #12]
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	e7bf      	b.n	800603a <_printf_i+0x122>
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	1d11      	adds	r1, r2, #4
 80060be:	6019      	str	r1, [r3, #0]
 80060c0:	6815      	ldr	r5, [r2, #0]
 80060c2:	2100      	movs	r1, #0
 80060c4:	0028      	movs	r0, r5
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	f000 f856 	bl	8006178 <memchr>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d001      	beq.n	80060d4 <_printf_i+0x1bc>
 80060d0:	1b40      	subs	r0, r0, r5
 80060d2:	6060      	str	r0, [r4, #4]
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	2300      	movs	r3, #0
 80060da:	9a03      	ldr	r2, [sp, #12]
 80060dc:	7013      	strb	r3, [r2, #0]
 80060de:	e7ac      	b.n	800603a <_printf_i+0x122>
 80060e0:	002a      	movs	r2, r5
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	9906      	ldr	r1, [sp, #24]
 80060e6:	9805      	ldr	r0, [sp, #20]
 80060e8:	9d07      	ldr	r5, [sp, #28]
 80060ea:	47a8      	blx	r5
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0ae      	beq.n	800604e <_printf_i+0x136>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	079b      	lsls	r3, r3, #30
 80060f4:	d415      	bmi.n	8006122 <_printf_i+0x20a>
 80060f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f8:	68e0      	ldr	r0, [r4, #12]
 80060fa:	4298      	cmp	r0, r3
 80060fc:	daa9      	bge.n	8006052 <_printf_i+0x13a>
 80060fe:	0018      	movs	r0, r3
 8006100:	e7a7      	b.n	8006052 <_printf_i+0x13a>
 8006102:	0022      	movs	r2, r4
 8006104:	2301      	movs	r3, #1
 8006106:	9906      	ldr	r1, [sp, #24]
 8006108:	9805      	ldr	r0, [sp, #20]
 800610a:	9e07      	ldr	r6, [sp, #28]
 800610c:	3219      	adds	r2, #25
 800610e:	47b0      	blx	r6
 8006110:	3001      	adds	r0, #1
 8006112:	d09c      	beq.n	800604e <_printf_i+0x136>
 8006114:	3501      	adds	r5, #1
 8006116:	68e3      	ldr	r3, [r4, #12]
 8006118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	42ab      	cmp	r3, r5
 800611e:	dcf0      	bgt.n	8006102 <_printf_i+0x1ea>
 8006120:	e7e9      	b.n	80060f6 <_printf_i+0x1de>
 8006122:	2500      	movs	r5, #0
 8006124:	e7f7      	b.n	8006116 <_printf_i+0x1fe>
 8006126:	46c0      	nop			@ (mov r8, r8)
 8006128:	080064f2 	.word	0x080064f2
 800612c:	08006503 	.word	0x08006503

08006130 <memmove>:
 8006130:	b510      	push	{r4, lr}
 8006132:	4288      	cmp	r0, r1
 8006134:	d902      	bls.n	800613c <memmove+0xc>
 8006136:	188b      	adds	r3, r1, r2
 8006138:	4298      	cmp	r0, r3
 800613a:	d308      	bcc.n	800614e <memmove+0x1e>
 800613c:	2300      	movs	r3, #0
 800613e:	429a      	cmp	r2, r3
 8006140:	d007      	beq.n	8006152 <memmove+0x22>
 8006142:	5ccc      	ldrb	r4, [r1, r3]
 8006144:	54c4      	strb	r4, [r0, r3]
 8006146:	3301      	adds	r3, #1
 8006148:	e7f9      	b.n	800613e <memmove+0xe>
 800614a:	5c8b      	ldrb	r3, [r1, r2]
 800614c:	5483      	strb	r3, [r0, r2]
 800614e:	3a01      	subs	r2, #1
 8006150:	d2fb      	bcs.n	800614a <memmove+0x1a>
 8006152:	bd10      	pop	{r4, pc}

08006154 <_sbrk_r>:
 8006154:	2300      	movs	r3, #0
 8006156:	b570      	push	{r4, r5, r6, lr}
 8006158:	4d06      	ldr	r5, [pc, #24]	@ (8006174 <_sbrk_r+0x20>)
 800615a:	0004      	movs	r4, r0
 800615c:	0008      	movs	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f7fa ff10 	bl	8000f84 <_sbrk>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d103      	bne.n	8006170 <_sbrk_r+0x1c>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d000      	beq.n	8006170 <_sbrk_r+0x1c>
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	bd70      	pop	{r4, r5, r6, pc}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	20000340 	.word	0x20000340

08006178 <memchr>:
 8006178:	b2c9      	uxtb	r1, r1
 800617a:	1882      	adds	r2, r0, r2
 800617c:	4290      	cmp	r0, r2
 800617e:	d101      	bne.n	8006184 <memchr+0xc>
 8006180:	2000      	movs	r0, #0
 8006182:	4770      	bx	lr
 8006184:	7803      	ldrb	r3, [r0, #0]
 8006186:	428b      	cmp	r3, r1
 8006188:	d0fb      	beq.n	8006182 <memchr+0xa>
 800618a:	3001      	adds	r0, #1
 800618c:	e7f6      	b.n	800617c <memchr+0x4>

0800618e <memcpy>:
 800618e:	2300      	movs	r3, #0
 8006190:	b510      	push	{r4, lr}
 8006192:	429a      	cmp	r2, r3
 8006194:	d100      	bne.n	8006198 <memcpy+0xa>
 8006196:	bd10      	pop	{r4, pc}
 8006198:	5ccc      	ldrb	r4, [r1, r3]
 800619a:	54c4      	strb	r4, [r0, r3]
 800619c:	3301      	adds	r3, #1
 800619e:	e7f8      	b.n	8006192 <memcpy+0x4>

080061a0 <_realloc_r>:
 80061a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061a2:	0006      	movs	r6, r0
 80061a4:	000c      	movs	r4, r1
 80061a6:	0015      	movs	r5, r2
 80061a8:	2900      	cmp	r1, #0
 80061aa:	d105      	bne.n	80061b8 <_realloc_r+0x18>
 80061ac:	0011      	movs	r1, r2
 80061ae:	f7ff fc55 	bl	8005a5c <_malloc_r>
 80061b2:	0004      	movs	r4, r0
 80061b4:	0020      	movs	r0, r4
 80061b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	d103      	bne.n	80061c4 <_realloc_r+0x24>
 80061bc:	f7ff fbe2 	bl	8005984 <_free_r>
 80061c0:	002c      	movs	r4, r5
 80061c2:	e7f7      	b.n	80061b4 <_realloc_r+0x14>
 80061c4:	f000 f81c 	bl	8006200 <_malloc_usable_size_r>
 80061c8:	0007      	movs	r7, r0
 80061ca:	4285      	cmp	r5, r0
 80061cc:	d802      	bhi.n	80061d4 <_realloc_r+0x34>
 80061ce:	0843      	lsrs	r3, r0, #1
 80061d0:	42ab      	cmp	r3, r5
 80061d2:	d3ef      	bcc.n	80061b4 <_realloc_r+0x14>
 80061d4:	0029      	movs	r1, r5
 80061d6:	0030      	movs	r0, r6
 80061d8:	f7ff fc40 	bl	8005a5c <_malloc_r>
 80061dc:	9001      	str	r0, [sp, #4]
 80061de:	2800      	cmp	r0, #0
 80061e0:	d101      	bne.n	80061e6 <_realloc_r+0x46>
 80061e2:	9c01      	ldr	r4, [sp, #4]
 80061e4:	e7e6      	b.n	80061b4 <_realloc_r+0x14>
 80061e6:	002a      	movs	r2, r5
 80061e8:	42bd      	cmp	r5, r7
 80061ea:	d900      	bls.n	80061ee <_realloc_r+0x4e>
 80061ec:	003a      	movs	r2, r7
 80061ee:	0021      	movs	r1, r4
 80061f0:	9801      	ldr	r0, [sp, #4]
 80061f2:	f7ff ffcc 	bl	800618e <memcpy>
 80061f6:	0021      	movs	r1, r4
 80061f8:	0030      	movs	r0, r6
 80061fa:	f7ff fbc3 	bl	8005984 <_free_r>
 80061fe:	e7f0      	b.n	80061e2 <_realloc_r+0x42>

08006200 <_malloc_usable_size_r>:
 8006200:	1f0b      	subs	r3, r1, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	1f18      	subs	r0, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	da01      	bge.n	800620e <_malloc_usable_size_r+0xe>
 800620a:	580b      	ldr	r3, [r1, r0]
 800620c:	18c0      	adds	r0, r0, r3
 800620e:	4770      	bx	lr

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
