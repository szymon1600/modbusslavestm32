
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006200  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080062bc  080062bc  000072bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080065a8  080065a8  000075a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b0  080065b0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b0  080065b0  000075b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065b4  080065b4  000075b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080065b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000060  08006618  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006618  00008358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c68  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002483  00000000  00000000  00018cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0001b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b86  00000000  00000000  0001c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d92  00000000  00000000  0001cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001220c  00000000  00000000  00035930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a12b6  00000000  00000000  00047b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8df2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000e8e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ec8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080062a4 	.word	0x080062a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	080062a4 	.word	0x080062a4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fd4d 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f87f 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f9e1 	bl	8000a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f991 	bl	8000978 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000656:	f000 f941 	bl	80008dc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800065a:	f000 f8bf 	bl	80007dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx1, 1);
 800065e:	492e      	ldr	r1, [pc, #184]	@ (8000718 <main+0xd8>)
 8000660:	4b2e      	ldr	r3, [pc, #184]	@ (800071c <main+0xdc>)
 8000662:	2201      	movs	r2, #1
 8000664:	0018      	movs	r0, r3
 8000666:	f003 f8a9 	bl	80037bc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx2, 1);
 800066a:	492d      	ldr	r1, [pc, #180]	@ (8000720 <main+0xe0>)
 800066c:	4b2d      	ldr	r3, [pc, #180]	@ (8000724 <main+0xe4>)
 800066e:	2201      	movs	r2, #1
 8000670:	0018      	movs	r0, r3
 8000672:	f003 f8a3 	bl	80037bc <HAL_UART_Receive_IT>

  // Uruchomienie PWM na kanale 1 (dioda)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000676:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <main+0xe8>)
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f002 f864 	bl	8002748 <HAL_TIM_PWM_Start>

  // Wyślij instrukcje na start
  char* welcome_msg = "Wpisz liczbe 0-100 i nacisnij Enter aby ustawic jasnosc LED\r\nWpisz 'b' aby wlaczyc tryb oddychania\r\n";
 8000680:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <main+0xec>)
 8000682:	607b      	str	r3, [r7, #4]
  //HAL_UART_Transmit(&huart1, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff fd3c 	bl	8000104 <strlen>
 800068c:	0003      	movs	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	4823      	ldr	r0, [pc, #140]	@ (8000724 <main+0xe4>)
 8000698:	f002 ffec 	bl	8003674 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (breathing_mode)
 800069c:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <main+0xf0>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0fb      	beq.n	800069c <main+0x5c>
    {
      // Efekt oddychania diody
      breathing_counter++;
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <main+0xf4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <main+0xf4>)
 80006ac:	601a      	str	r2, [r3, #0]
      if (breathing_counter >= 3000) // Opóźnienie dla płynnego efektu
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <main+0xf4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <main+0xf8>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d9f1      	bls.n	800069c <main+0x5c>
      {
        breathing_counter = 0;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <main+0xf4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]

        if (breathing_direction == 1) // Zwiększanie jasności
 80006be:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <main+0xfc>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d111      	bne.n	80006ea <main+0xaa>
        {
          pwm_value += 200; // Krok zwiększania
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <main+0x100>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	33c8      	adds	r3, #200	@ 0xc8
 80006cc:	001a      	movs	r2, r3
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <main+0x100>)
 80006d0:	601a      	str	r2, [r3, #0]
          if (pwm_value >= 50000) // Maksymalna wartość PWM
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <main+0x100>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <main+0x104>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d917      	bls.n	800070c <main+0xcc>
          {
            pwm_value = 50000;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <main+0x100>)
 80006de:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <main+0x108>)
 80006e0:	601a      	str	r2, [r3, #0]
            breathing_direction = 0; // Zmieniamy kierunek na zmniejszanie
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <main+0xfc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e010      	b.n	800070c <main+0xcc>
          }
        }
        else // Zmniejszanie jasności
        {
          if (pwm_value >= 200)
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <main+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80006f0:	d906      	bls.n	8000700 <main+0xc0>
          {
            pwm_value -= 200; // Krok zmniejszania
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <main+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3bc8      	subs	r3, #200	@ 0xc8
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <main+0x100>)
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e005      	b.n	800070c <main+0xcc>
          }
          else
          {
            pwm_value = 0;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <main+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
            breathing_direction = 1; // Zmieniamy kierunek na zwiększanie
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <main+0xfc>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
          }
        }

        // Ustawienie nowej wartości PWM
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <main+0xe8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <main+0x100>)
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
    if (breathing_mode)
 8000716:	e7c1      	b.n	800069c <main+0x5c>
 8000718:	200001f0 	.word	0x200001f0
 800071c:	200000c8 	.word	0x200000c8
 8000720:	200001f1 	.word	0x200001f1
 8000724:	2000015c 	.word	0x2000015c
 8000728:	2000007c 	.word	0x2000007c
 800072c:	080062bc 	.word	0x080062bc
 8000730:	20000001 	.word	0x20000001
 8000734:	200001f8 	.word	0x200001f8
 8000738:	00000bb7 	.word	0x00000bb7
 800073c:	20000000 	.word	0x20000000
 8000740:	200001f4 	.word	0x200001f4
 8000744:	0000c34f 	.word	0x0000c34f
 8000748:	0000c350 	.word	0x0000c350

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b093      	sub	sp, #76	@ 0x4c
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	2410      	movs	r4, #16
 8000754:	193b      	adds	r3, r7, r4
 8000756:	0018      	movs	r0, r3
 8000758:	2338      	movs	r3, #56	@ 0x38
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f005 f927 	bl	80059b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000762:	003b      	movs	r3, r7
 8000764:	0018      	movs	r0, r3
 8000766:	2310      	movs	r3, #16
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f005 f920 	bl	80059b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2380      	movs	r3, #128	@ 0x80
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f001 f867 	bl	8001848 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2202      	movs	r2, #2
 800077e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	0052      	lsls	r2, r2, #1
 8000786:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2240      	movs	r2, #64	@ 0x40
 8000792:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	193b      	adds	r3, r7, r4
 800079c:	0018      	movs	r0, r3
 800079e:	f001 f89f 	bl	80018e0 <HAL_RCC_OscConfig>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007a6:	f000 fac9 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	003b      	movs	r3, r7
 80007ac:	2207      	movs	r2, #7
 80007ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c2:	003b      	movs	r3, r7
 80007c4:	2100      	movs	r1, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fba4 	bl	8001f14 <HAL_RCC_ClockConfig>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007d0:	f000 fab4 	bl	8000d3c <Error_Handler>
  }
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b013      	add	sp, #76	@ 0x4c
 80007da:	bd90      	pop	{r4, r7, pc}

080007dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	@ 0x38
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	2328      	movs	r3, #40	@ 0x28
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f005 f8df 	bl	80059b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f2:	231c      	movs	r3, #28
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	230c      	movs	r3, #12
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f005 f8d7 	bl	80059b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	231c      	movs	r3, #28
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f005 f8d0 	bl	80059b0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000810:	4b30      	ldr	r3, [pc, #192]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	05d2      	lsls	r2, r2, #23
 8000816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000818:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000824:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000826:	4a2c      	ldr	r2, [pc, #176]	@ (80008d8 <MX_TIM2_Init+0xfc>)
 8000828:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b28      	ldr	r3, [pc, #160]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000836:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fecd 	bl	80025d8 <HAL_TIM_Base_Init>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 fa7b 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000846:	2128      	movs	r1, #40	@ 0x28
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2280      	movs	r2, #128	@ 0x80
 800084c:	0152      	lsls	r2, r2, #5
 800084e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000850:	187a      	adds	r2, r7, r1
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f002 f960 	bl	8002b1c <HAL_TIM_ConfigClockSource>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000860:	f000 fa6c 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000866:	0018      	movs	r0, r3
 8000868:	f001 ff0e 	bl	8002688 <HAL_TIM_PWM_Init>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000870:	f000 fa64 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	211c      	movs	r1, #28
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000882:	187a      	adds	r2, r7, r1
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f002 fe2f 	bl	80034ec <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000892:	f000 fa53 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000896:	003b      	movs	r3, r7
 8000898:	2260      	movs	r2, #96	@ 0x60
 800089a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800089c:	003b      	movs	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	003b      	movs	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ae:	0039      	movs	r1, r7
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 f831 	bl	800291c <HAL_TIM_PWM_ConfigChannel>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80008be:	f000 fa3d 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fa7f 	bl	8000dc8 <HAL_TIM_MspPostInit>

}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b00e      	add	sp, #56	@ 0x38
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	2000007c 	.word	0x2000007c
 80008d8:	0000c350 	.word	0x0000c350

080008dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e0:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008e2:	4a24      	ldr	r2, [pc, #144]	@ (8000974 <MX_USART1_UART_Init+0x98>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008e8:	22e1      	movs	r2, #225	@ 0xe1
 80008ea:	0252      	lsls	r2, r2, #9
 80008ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fe4e 	bl	80035c8 <HAL_UART_Init>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000930:	f000 fa04 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000936:	2100      	movs	r1, #0
 8000938:	0018      	movs	r0, r3
 800093a:	f004 fe9b 	bl	8005674 <HAL_UARTEx_SetTxFifoThreshold>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000942:	f000 f9fb 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000948:	2100      	movs	r1, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f004 fed2 	bl	80056f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000954:	f000 f9f2 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 800095a:	0018      	movs	r0, r3
 800095c:	f004 fe50 	bl	8005600 <HAL_UARTEx_DisableFifoMode>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 f9ea 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	200000c8 	.word	0x200000c8
 8000974:	40013800 	.word	0x40013800

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b23      	ldr	r3, [pc, #140]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 800097e:	4a24      	ldr	r2, [pc, #144]	@ (8000a10 <MX_USART2_UART_Init+0x98>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000982:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 8000984:	22e1      	movs	r2, #225	@ 0xe1
 8000986:	0252      	lsls	r2, r2, #9
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 fe00 	bl	80035c8 <HAL_UART_Init>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f9b6 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f004 fe4d 	bl	8005674 <HAL_UARTEx_SetTxFifoThreshold>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f9ad 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f004 fe84 	bl	80056f4 <HAL_UARTEx_SetRxFifoThreshold>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f9a4 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f004 fe02 	bl	8005600 <HAL_UARTEx_DisableFifoMode>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f99c 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	2000015c 	.word	0x2000015c
 8000a10:	40004400 	.word	0x40004400

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b089      	sub	sp, #36	@ 0x24
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	240c      	movs	r4, #12
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2314      	movs	r3, #20
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f004 ffc3 	bl	80059b0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2e:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a30:	2104      	movs	r1, #4
 8000a32:	430a      	orrs	r2, r1
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a42:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a48:	2120      	movs	r1, #32
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a52:	2220      	movs	r2, #32
 8000a54:	4013      	ands	r3, r2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a66:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_Pin_GPIO_Port, LED_GREEN_Pin_Pin, GPIO_PIN_RESET);
 8000a72:	23a0      	movs	r3, #160	@ 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fec6 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin_Pin;
 8000a80:	0021      	movs	r1, r4
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2240      	movs	r2, #64	@ 0x40
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_Pin_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	187a      	adds	r2, r7, r1
 8000a9c:	23a0      	movs	r3, #160	@ 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fd4e 	bl	8001544 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b009      	add	sp, #36	@ 0x24
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <SetBrightness>:

/* USER CODE BEGIN 4 */
void SetBrightness(uint8_t percent)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b091      	sub	sp, #68	@ 0x44
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	701a      	strb	r2, [r3, #0]
  if (percent > 100) percent = 100;
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b64      	cmp	r3, #100	@ 0x64
 8000ac6:	d902      	bls.n	8000ace <SetBrightness+0x1a>
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	2264      	movs	r2, #100	@ 0x64
 8000acc:	701a      	strb	r2, [r3, #0]

  // Przelicz procent na wartość PWM (0-50000)
  uint32_t pwm_val = (uint32_t)((percent * 50000) / 100);
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	0013      	movs	r3, r2
 8000ad4:	015b      	lsls	r3, r3, #5
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	189b      	adds	r3, r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Ustaw PWM
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_val);
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <SetBrightness+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ae6:	635a      	str	r2, [r3, #52]	@ 0x34

  // Wyślij potwierdzenie
  char response[50];
  sprintf(response, "Jasnosc ustawiona na: %d%%\r\n", percent);
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	490b      	ldr	r1, [pc, #44]	@ (8000b1c <SetBrightness+0x68>)
 8000aee:	2408      	movs	r4, #8
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	0018      	movs	r0, r3
 8000af4:	f004 ff3a 	bl	800596c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff fb02 	bl	8000104 <strlen>
 8000b00:	0003      	movs	r3, r0
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	2301      	movs	r3, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	1939      	adds	r1, r7, r4
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <SetBrightness+0x6c>)
 8000b0c:	f002 fdb2 	bl	8003674 <HAL_UART_Transmit>
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b011      	add	sp, #68	@ 0x44
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	2000007c 	.word	0x2000007c
 8000b1c:	08006324 	.word	0x08006324
 8000b20:	200000c8 	.word	0x200000c8

08000b24 <ProcessInput>:

void ProcessInput(uint8_t data)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	701a      	strb	r2, [r3, #0]
  // Echo znaku
  HAL_UART_Transmit(&huart1, &data, 1, HAL_MAX_DELAY);
 8000b30:	2301      	movs	r3, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	1df9      	adds	r1, r7, #7
 8000b36:	484f      	ldr	r0, [pc, #316]	@ (8000c74 <ProcessInput+0x150>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f002 fd9b 	bl	8003674 <HAL_UART_Transmit>

  if (data == '\r' || data == '\n') // Enter
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b0d      	cmp	r3, #13
 8000b44:	d003      	beq.n	8000b4e <ProcessInput+0x2a>
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b0a      	cmp	r3, #10
 8000b4c:	d147      	bne.n	8000bde <ProcessInput+0xba>
  {
    if (input_index > 0)
 8000b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c78 <ProcessInput+0x154>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d03b      	beq.n	8000bce <ProcessInput+0xaa>
    {
      input_buffer[input_index] = '\0'; // Zakończ string
 8000b56:	4b48      	ldr	r3, [pc, #288]	@ (8000c78 <ProcessInput+0x154>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	4b47      	ldr	r3, [pc, #284]	@ (8000c7c <ProcessInput+0x158>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	5499      	strb	r1, [r3, r2]

      // Sprawdź czy to komenda 'b' dla trybu oddychania
      if (input_buffer[0] == 'b' && input_index == 1)
 8000b62:	4b46      	ldr	r3, [pc, #280]	@ (8000c7c <ProcessInput+0x158>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b62      	cmp	r3, #98	@ 0x62
 8000b68:	d10e      	bne.n	8000b88 <ProcessInput+0x64>
 8000b6a:	4b43      	ldr	r3, [pc, #268]	@ (8000c78 <ProcessInput+0x154>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10a      	bne.n	8000b88 <ProcessInput+0x64>
      {
        breathing_mode = 1;
 8000b72:	4b43      	ldr	r3, [pc, #268]	@ (8000c80 <ProcessInput+0x15c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nTryb oddychania wlaczony\r\n", 28, HAL_MAX_DELAY);
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	4941      	ldr	r1, [pc, #260]	@ (8000c84 <ProcessInput+0x160>)
 8000b7e:	483d      	ldr	r0, [pc, #244]	@ (8000c74 <ProcessInput+0x150>)
 8000b80:	221c      	movs	r2, #28
 8000b82:	f002 fd77 	bl	8003674 <HAL_UART_Transmit>
 8000b86:	e01f      	b.n	8000bc8 <ProcessInput+0xa4>
      }
      else
      {
        // Konwertuj na liczbę
        int value = atoi((char*)input_buffer);
 8000b88:	4b3c      	ldr	r3, [pc, #240]	@ (8000c7c <ProcessInput+0x158>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f004 fe52 	bl	8005834 <atoi>
 8000b90:	0003      	movs	r3, r0
 8000b92:	60fb      	str	r3, [r7, #12]
        if (value >= 0 && value <= 100)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0f      	blt.n	8000bba <ProcessInput+0x96>
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b64      	cmp	r3, #100	@ 0x64
 8000b9e:	dc0c      	bgt.n	8000bba <ProcessInput+0x96>
        {
          breathing_mode = 0; // Wyłącz tryb oddychania
 8000ba0:	4b37      	ldr	r3, [pc, #220]	@ (8000c80 <ProcessInput+0x15c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
          brightness_percent = value;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b37      	ldr	r3, [pc, #220]	@ (8000c88 <ProcessInput+0x164>)
 8000bac:	701a      	strb	r2, [r3, #0]
          SetBrightness(brightness_percent);
 8000bae:	4b36      	ldr	r3, [pc, #216]	@ (8000c88 <ProcessInput+0x164>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff7e 	bl	8000ab4 <SetBrightness>
 8000bb8:	e006      	b.n	8000bc8 <ProcessInput+0xa4>
        }
        else
        {
          HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nBledna wartosc! Wpisz liczbe 0-100\r\n", 38, HAL_MAX_DELAY);
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	4933      	ldr	r1, [pc, #204]	@ (8000c8c <ProcessInput+0x168>)
 8000bc0:	482c      	ldr	r0, [pc, #176]	@ (8000c74 <ProcessInput+0x150>)
 8000bc2:	2226      	movs	r2, #38	@ 0x26
 8000bc4:	f002 fd56 	bl	8003674 <HAL_UART_Transmit>
        }
      }

      input_index = 0; // Resetuj bufor
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <ProcessInput+0x154>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n> ", 4, HAL_MAX_DELAY);
 8000bce:	2301      	movs	r3, #1
 8000bd0:	425b      	negs	r3, r3
 8000bd2:	492f      	ldr	r1, [pc, #188]	@ (8000c90 <ProcessInput+0x16c>)
 8000bd4:	4827      	ldr	r0, [pc, #156]	@ (8000c74 <ProcessInput+0x150>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	f002 fd4c 	bl	8003674 <HAL_UART_Transmit>
 8000bdc:	e045      	b.n	8000c6a <ProcessInput+0x146>
  }
  else if (data == 8 || data == 127) // Backspace
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d003      	beq.n	8000bee <ProcessInput+0xca>
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bec:	d111      	bne.n	8000c12 <ProcessInput+0xee>
  {
    if (input_index > 0)
 8000bee:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <ProcessInput+0x154>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d039      	beq.n	8000c6a <ProcessInput+0x146>
    {
      input_index--;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <ProcessInput+0x154>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <ProcessInput+0x154>)
 8000c00:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)" \b", 2, HAL_MAX_DELAY);
 8000c02:	2301      	movs	r3, #1
 8000c04:	425b      	negs	r3, r3
 8000c06:	4923      	ldr	r1, [pc, #140]	@ (8000c94 <ProcessInput+0x170>)
 8000c08:	481a      	ldr	r0, [pc, #104]	@ (8000c74 <ProcessInput+0x150>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	f002 fd32 	bl	8003674 <HAL_UART_Transmit>
    if (input_index > 0)
 8000c10:	e02b      	b.n	8000c6a <ProcessInput+0x146>
    }
  }
  else if (data >= '0' && data <= '9' && input_index < sizeof(input_buffer) - 1)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c18:	d913      	bls.n	8000c42 <ProcessInput+0x11e>
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b39      	cmp	r3, #57	@ 0x39
 8000c20:	d80f      	bhi.n	8000c42 <ProcessInput+0x11e>
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <ProcessInput+0x154>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d80b      	bhi.n	8000c42 <ProcessInput+0x11e>
  {
    input_buffer[input_index++] = data;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <ProcessInput+0x154>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	b2d1      	uxtb	r1, r2
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <ProcessInput+0x154>)
 8000c34:	7011      	strb	r1, [r2, #0]
 8000c36:	001a      	movs	r2, r3
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	7819      	ldrb	r1, [r3, #0]
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <ProcessInput+0x158>)
 8000c3e:	5499      	strb	r1, [r3, r2]
 8000c40:	e013      	b.n	8000c6a <ProcessInput+0x146>
  }
  else if (data == 'b' && input_index < sizeof(input_buffer) - 1)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b62      	cmp	r3, #98	@ 0x62
 8000c48:	d10f      	bne.n	8000c6a <ProcessInput+0x146>
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <ProcessInput+0x154>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d80b      	bhi.n	8000c6a <ProcessInput+0x146>
  {
    input_buffer[input_index++] = data;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <ProcessInput+0x154>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	b2d1      	uxtb	r1, r2
 8000c5a:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <ProcessInput+0x154>)
 8000c5c:	7011      	strb	r1, [r2, #0]
 8000c5e:	001a      	movs	r2, r3
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	7819      	ldrb	r1, [r3, #0]
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <ProcessInput+0x158>)
 8000c66:	5499      	strb	r1, [r3, r2]
  }
}
 8000c68:	e7ff      	b.n	8000c6a <ProcessInput+0x146>
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	200000c8 	.word	0x200000c8
 8000c78:	20000206 	.word	0x20000206
 8000c7c:	200001fc 	.word	0x200001fc
 8000c80:	20000001 	.word	0x20000001
 8000c84:	08006344 	.word	0x08006344
 8000c88:	20000002 	.word	0x20000002
 8000c8c:	08006364 	.word	0x08006364
 8000c90:	0800638c 	.word	0x0800638c
 8000c94:	08006394 	.word	0x08006394

08000c98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d24 <HAL_UART_RxCpltCallback+0x8c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_UART_RxCpltCallback+0x2a>
  {
    ProcessInput(rx2);
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <HAL_UART_RxCpltCallback+0x90>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff ff38 	bl	8000b24 <ProcessInput>
    HAL_UART_Receive_IT(&huart1, &rx2, 1);
 8000cb4:	491c      	ldr	r1, [pc, #112]	@ (8000d28 <HAL_UART_RxCpltCallback+0x90>)
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <HAL_UART_RxCpltCallback+0x94>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f002 fd7e 	bl	80037bc <HAL_UART_Receive_IT>
    }

    HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
    HAL_UART_Receive_IT(&huart2, &rx1, 1);
  }
}
 8000cc0:	e02c      	b.n	8000d1c <HAL_UART_RxCpltCallback+0x84>
  else if (huart->Instance == USART2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d30 <HAL_UART_RxCpltCallback+0x98>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d127      	bne.n	8000d1c <HAL_UART_RxCpltCallback+0x84>
    if (rx1 >= '0' && rx1 <= '9')
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_UART_RxCpltCallback+0x9c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cd2:	d911      	bls.n	8000cf8 <HAL_UART_RxCpltCallback+0x60>
 8000cd4:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <HAL_UART_RxCpltCallback+0x9c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b39      	cmp	r3, #57	@ 0x39
 8000cda:	d80d      	bhi.n	8000cf8 <HAL_UART_RxCpltCallback+0x60>
      tx = rx1;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_UART_RxCpltCallback+0x9c>)
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
      if (tx > '9') tx = '0';
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	18bb      	adds	r3, r7, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b39      	cmp	r3, #57	@ 0x39
 8000cee:	d907      	bls.n	8000d00 <HAL_UART_RxCpltCallback+0x68>
 8000cf0:	18bb      	adds	r3, r7, r2
 8000cf2:	2230      	movs	r2, #48	@ 0x30
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e003      	b.n	8000d00 <HAL_UART_RxCpltCallback+0x68>
      tx = '!';
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2221      	movs	r2, #33	@ 0x21
 8000cfe:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
 8000d00:	2301      	movs	r3, #1
 8000d02:	425b      	negs	r3, r3
 8000d04:	220f      	movs	r2, #15
 8000d06:	18b9      	adds	r1, r7, r2
 8000d08:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <HAL_UART_RxCpltCallback+0x94>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f002 fcb2 	bl	8003674 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, &rx1, 1);
 8000d10:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <HAL_UART_RxCpltCallback+0x9c>)
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_UART_RxCpltCallback+0xa0>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	0018      	movs	r0, r3
 8000d18:	f002 fd50 	bl	80037bc <HAL_UART_Receive_IT>
}
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013800 	.word	0x40013800
 8000d28:	200001f1 	.word	0x200001f1
 8000d2c:	200000c8 	.word	0x200000c8
 8000d30:	40004400 	.word	0x40004400
 8000d34:	200001f0 	.word	0x200001f0
 8000d38:	2000015c 	.word	0x2000015c

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	430a      	orrs	r2, r1
 8000d58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4013      	ands	r3, r2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	0549      	lsls	r1, r1, #21
 8000d70:	430a      	orrs	r2, r1
 8000d72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	055b      	lsls	r3, r3, #21
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d10b      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x34>)
 8000da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x34>)
 8000daa:	2101      	movs	r1, #1
 8000dac:	430a      	orrs	r2, r1
 8000dae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x34>)
 8000db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000db4:	2201      	movs	r2, #1
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b004      	add	sp, #16
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	240c      	movs	r4, #12
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	001a      	movs	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f004 fde8 	bl	80059b0 <memset>
  if(htim->Instance==TIM2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	05db      	lsls	r3, r3, #23
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d122      	bne.n	8000e32 <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <HAL_TIM_MspPostInit+0x74>)
 8000dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_TIM_MspPostInit+0x74>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	430a      	orrs	r2, r1
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000df8:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <HAL_TIM_MspPostInit+0x74>)
 8000dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4013      	ands	r3, r2
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2220      	movs	r2, #32
 8000e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2202      	movs	r2, #2
 8000e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2202      	movs	r2, #2
 8000e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	187a      	adds	r2, r7, r1
 8000e26:	23a0      	movs	r3, #160	@ 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 fb89 	bl	8001544 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b009      	add	sp, #36	@ 0x24
 8000e38:	bd90      	pop	{r4, r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b099      	sub	sp, #100	@ 0x64
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	234c      	movs	r3, #76	@ 0x4c
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f004 fdac 	bl	80059b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	2418      	movs	r4, #24
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	2334      	movs	r3, #52	@ 0x34
 8000e60:	001a      	movs	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	f004 fda4 	bl	80059b0 <memset>
  if(huart->Instance==USART1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa4 <HAL_UART_MspInit+0x164>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d146      	bne.n	8000f00 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 f9f1 	bl	8002268 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e8a:	f7ff ff57 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8e:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e92:	4b45      	ldr	r3, [pc, #276]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	01c9      	lsls	r1, r1, #7
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e9c:	4b42      	ldr	r3, [pc, #264]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	01db      	lsls	r3, r3, #7
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eae:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ec2:	214c      	movs	r1, #76	@ 0x4c
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2230      	movs	r2, #48	@ 0x30
 8000ec8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2202      	movs	r2, #2
 8000ece:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2201      	movs	r2, #1
 8000ee0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	4a31      	ldr	r2, [pc, #196]	@ (8000fac <HAL_UART_MspInit+0x16c>)
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	0010      	movs	r0, r2
 8000eea:	f000 fb2b 	bl	8001544 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	201b      	movs	r0, #27
 8000ef4:	f000 fa28 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ef8:	201b      	movs	r0, #27
 8000efa:	f000 fa3a 	bl	8001372 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000efe:	e04c      	b.n	8000f9a <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb0 <HAL_UART_MspInit+0x170>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d147      	bne.n	8000f9a <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f0a:	2118      	movs	r1, #24
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2202      	movs	r2, #2
 8000f10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f001 f9a4 	bl	8002268 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000f24:	f7ff ff0a 	bl	8000d3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f28:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000f2e:	2180      	movs	r1, #128	@ 0x80
 8000f30:	0289      	lsls	r1, r1, #10
 8000f32:	430a      	orrs	r2, r1
 8000f34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f3a:	2380      	movs	r3, #128	@ 0x80
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_UART_MspInit+0x168>)
 8000f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f54:	2201      	movs	r2, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f5c:	214c      	movs	r1, #76	@ 0x4c
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	220c      	movs	r2, #12
 8000f62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2202      	movs	r2, #2
 8000f68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2201      	movs	r2, #1
 8000f7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	187a      	adds	r2, r7, r1
 8000f7e:	23a0      	movs	r3, #160	@ 0xa0
 8000f80:	05db      	lsls	r3, r3, #23
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 fadd 	bl	8001544 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201c      	movs	r0, #28
 8000f90:	f000 f9da 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f94:	201c      	movs	r0, #28
 8000f96:	f000 f9ec 	bl	8001372 <HAL_NVIC_EnableIRQ>
}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b019      	add	sp, #100	@ 0x64
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	50000800 	.word	0x50000800
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	e7fd      	b.n	8000fb8 <NMI_Handler+0x4>

08000fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	e7fd      	b.n	8000fc0 <HardFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8ec 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <USART1_IRQHandler+0x14>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f002 fc42 	bl	8003878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	200000c8 	.word	0x200000c8

08001000 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <USART2_IRQHandler+0x14>)
 8001006:	0018      	movs	r0, r3
 8001008:	f002 fc36 	bl	8003878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	2000015c 	.word	0x2000015c

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	18d3      	adds	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f004 fcba 	bl	80059c0 <__errno>
 800104c:	0003      	movs	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	2301      	movs	r3, #1
 8001054:	425b      	negs	r3, r3
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	18d2      	adds	r2, r2, r3
 8001066:	4b05      	ldr	r3, [pc, #20]	@ (800107c <_sbrk+0x64>)
 8001068:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b006      	add	sp, #24
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20009000 	.word	0x20009000
 8001078:	00000400 	.word	0x00000400
 800107c:	20000208 	.word	0x20000208
 8001080:	20000358 	.word	0x20000358

08001084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001092:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001094:	f7ff fff6 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LoopForever+0x6>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	@ (80010d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <LoopForever+0xe>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	@ (80010dc <LoopForever+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010be:	f004 fc85 	bl	80059cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010c2:	f7ff fabd 	bl	8000640 <main>

080010c6 <LoopForever>:

LoopForever:
  b LoopForever
 80010c6:	e7fe      	b.n	80010c6 <LoopForever>
  ldr   r0, =_estack
 80010c8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010d4:	080065b8 	.word	0x080065b8
  ldr r2, =_sbss
 80010d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010dc:	20000358 	.word	0x20000358

080010e0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_COMP_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <HAL_Init+0x3c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_Init+0x3c>)
 80010f6:	2180      	movs	r1, #128	@ 0x80
 80010f8:	0049      	lsls	r1, r1, #1
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f810 	bl	8001124 <HAL_InitTick>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d003      	beq.n	8001110 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	e001      	b.n	8001114 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff fe1a 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40022000 	.word	0x40022000

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001134:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <HAL_InitTick+0x88>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d02b      	beq.n	8001194 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800113c:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_InitTick+0x8c>)
 800113e:	681c      	ldr	r4, [r3, #0]
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <HAL_InitTick+0x88>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	0019      	movs	r1, r3
 8001146:	23fa      	movs	r3, #250	@ 0xfa
 8001148:	0098      	lsls	r0, r3, #2
 800114a:	f7fe ffed 	bl	8000128 <__udivsi3>
 800114e:	0003      	movs	r3, r0
 8001150:	0019      	movs	r1, r3
 8001152:	0020      	movs	r0, r4
 8001154:	f7fe ffe8 	bl	8000128 <__udivsi3>
 8001158:	0003      	movs	r3, r0
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f919 	bl	8001392 <HAL_SYSTICK_Config>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d112      	bne.n	800118a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d80a      	bhi.n	8001180 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	2301      	movs	r3, #1
 800116e:	425b      	negs	r3, r3
 8001170:	2200      	movs	r2, #0
 8001172:	0018      	movs	r0, r3
 8001174:	f000 f8e8 	bl	8001348 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_InitTick+0x90>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e00d      	b.n	800119c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e008      	b.n	800119c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118a:	230f      	movs	r3, #15
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e003      	b.n	800119c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001194:	230f      	movs	r3, #15
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800119c:	230f      	movs	r3, #15
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	781b      	ldrb	r3, [r3, #0]
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b005      	add	sp, #20
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	20000004 	.word	0x20000004
 80011b4:	20000008 	.word	0x20000008

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_IncTick+0x1c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	001a      	movs	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_IncTick+0x20>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	18d2      	adds	r2, r2, r3
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_IncTick+0x20>)
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	2000020c 	.word	0x2000020c

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b02      	ldr	r3, [pc, #8]	@ (80011ec <HAL_GetTick+0x10>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	2000020c 	.word	0x2000020c

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	0002      	movs	r2, r0
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b7f      	cmp	r3, #127	@ 0x7f
 8001202:	d809      	bhi.n	8001218 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	001a      	movs	r2, r3
 800120a:	231f      	movs	r3, #31
 800120c:	401a      	ands	r2, r3
 800120e:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__NVIC_EnableIRQ+0x30>)
 8001210:	2101      	movs	r1, #1
 8001212:	4091      	lsls	r1, r2
 8001214:	000a      	movs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	0002      	movs	r2, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b7f      	cmp	r3, #127	@ 0x7f
 8001238:	d828      	bhi.n	800128c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123a:	4a2f      	ldr	r2, [pc, #188]	@ (80012f8 <__NVIC_SetPriority+0xd4>)
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	33c0      	adds	r3, #192	@ 0xc0
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	589b      	ldr	r3, [r3, r2]
 800124a:	1dfa      	adds	r2, r7, #7
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	0011      	movs	r1, r2
 8001250:	2203      	movs	r2, #3
 8001252:	400a      	ands	r2, r1
 8001254:	00d2      	lsls	r2, r2, #3
 8001256:	21ff      	movs	r1, #255	@ 0xff
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	43d2      	mvns	r2, r2
 800125e:	401a      	ands	r2, r3
 8001260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	22ff      	movs	r2, #255	@ 0xff
 8001268:	401a      	ands	r2, r3
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	0018      	movs	r0, r3
 8001270:	2303      	movs	r3, #3
 8001272:	4003      	ands	r3, r0
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	481f      	ldr	r0, [pc, #124]	@ (80012f8 <__NVIC_SetPriority+0xd4>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b25b      	sxtb	r3, r3
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	430a      	orrs	r2, r1
 8001284:	33c0      	adds	r3, #192	@ 0xc0
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800128a:	e031      	b.n	80012f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128c:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <__NVIC_SetPriority+0xd8>)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	0019      	movs	r1, r3
 8001294:	230f      	movs	r3, #15
 8001296:	400b      	ands	r3, r1
 8001298:	3b08      	subs	r3, #8
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3306      	adds	r3, #6
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	3304      	adds	r3, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1dfa      	adds	r2, r7, #7
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	0011      	movs	r1, r2
 80012ac:	2203      	movs	r2, #3
 80012ae:	400a      	ands	r2, r1
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	21ff      	movs	r1, #255	@ 0xff
 80012b4:	4091      	lsls	r1, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	401a      	ands	r2, r3
 80012bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	22ff      	movs	r2, #255	@ 0xff
 80012c4:	401a      	ands	r2, r3
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	0018      	movs	r0, r3
 80012cc:	2303      	movs	r3, #3
 80012ce:	4003      	ands	r3, r0
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d4:	4809      	ldr	r0, [pc, #36]	@ (80012fc <__NVIC_SetPriority+0xd8>)
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	001c      	movs	r4, r3
 80012dc:	230f      	movs	r3, #15
 80012de:	4023      	ands	r3, r4
 80012e0:	3b08      	subs	r3, #8
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	430a      	orrs	r2, r1
 80012e6:	3306      	adds	r3, #6
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	18c3      	adds	r3, r0, r3
 80012ec:	3304      	adds	r3, #4
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b003      	add	sp, #12
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	045b      	lsls	r3, r3, #17
 8001310:	429a      	cmp	r2, r3
 8001312:	d301      	bcc.n	8001318 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001314:	2301      	movs	r3, #1
 8001316:	e010      	b.n	800133a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <SysTick_Config+0x44>)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	3a01      	subs	r2, #1
 800131e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001320:	2301      	movs	r3, #1
 8001322:	425b      	negs	r3, r3
 8001324:	2103      	movs	r1, #3
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff ff7c 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <SysTick_Config+0x44>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <SysTick_Config+0x44>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	210f      	movs	r1, #15
 8001354:	187b      	adds	r3, r7, r1
 8001356:	1c02      	adds	r2, r0, #0
 8001358:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	187b      	adds	r3, r7, r1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	0011      	movs	r1, r2
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	0002      	movs	r2, r0
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ff33 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ffaf 	bl	8001300 <SysTick_Config>
 80013a2:	0003      	movs	r3, r0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e050      	b.n	8001460 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2225      	movs	r2, #37	@ 0x25
 80013c2:	5c9b      	ldrb	r3, [r3, r2]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d008      	beq.n	80013dc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2204      	movs	r2, #4
 80013ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2224      	movs	r2, #36	@ 0x24
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e041      	b.n	8001460 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	210e      	movs	r1, #14
 80013e8:	438a      	bics	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	491c      	ldr	r1, [pc, #112]	@ (8001468 <HAL_DMA_Abort+0xbc>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2101      	movs	r1, #1
 8001408:	438a      	bics	r2, r1
 800140a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <HAL_DMA_Abort+0xc0>)
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	221c      	movs	r2, #28
 8001416:	4013      	ands	r3, r2
 8001418:	2201      	movs	r2, #1
 800141a:	409a      	lsls	r2, r3
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_DMA_Abort+0xc0>)
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800142a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800143e:	490a      	ldr	r1, [pc, #40]	@ (8001468 <HAL_DMA_Abort+0xbc>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800144c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2225      	movs	r2, #37	@ 0x25
 8001452:	2101      	movs	r1, #1
 8001454:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2224      	movs	r2, #36	@ 0x24
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}
 8001468:	fffffeff 	.word	0xfffffeff
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001478:	210f      	movs	r1, #15
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2225      	movs	r2, #37	@ 0x25
 8001484:	5c9b      	ldrb	r3, [r3, r2]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d006      	beq.n	800149a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2204      	movs	r2, #4
 8001490:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001492:	187b      	adds	r3, r7, r1
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e049      	b.n	800152e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	210e      	movs	r1, #14
 80014a6:	438a      	bics	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	438a      	bics	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c4:	491d      	ldr	r1, [pc, #116]	@ (800153c <HAL_DMA_Abort_IT+0xcc>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80014ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001540 <HAL_DMA_Abort_IT+0xd0>)
 80014cc:	6859      	ldr	r1, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	221c      	movs	r2, #28
 80014d4:	4013      	ands	r3, r2
 80014d6:	2201      	movs	r2, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_DMA_Abort_IT+0xd0>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014fc:	490f      	ldr	r1, [pc, #60]	@ (800153c <HAL_DMA_Abort_IT+0xcc>)
 80014fe:	400a      	ands	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800150a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2225      	movs	r2, #37	@ 0x25
 8001510:	2101      	movs	r1, #1
 8001512:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2224      	movs	r2, #36	@ 0x24
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	0010      	movs	r0, r2
 800152c:	4798      	blx	r3
    }
  }
  return status;
 800152e:	230f      	movs	r3, #15
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	781b      	ldrb	r3, [r3, #0]
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bd80      	pop	{r7, pc}
 800153c:	fffffeff 	.word	0xfffffeff
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e147      	b.n	80017e4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4091      	lsls	r1, r2
 800155e:	000a      	movs	r2, r1
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d100      	bne.n	800156c <HAL_GPIO_Init+0x28>
 800156a:	e138      	b.n	80017de <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2203      	movs	r2, #3
 8001572:	4013      	ands	r3, r2
 8001574:	2b01      	cmp	r3, #1
 8001576:	d005      	beq.n	8001584 <HAL_GPIO_Init+0x40>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	4013      	ands	r3, r2
 8001580:	2b02      	cmp	r3, #2
 8001582:	d130      	bne.n	80015e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	409a      	lsls	r2, r3
 8001592:	0013      	movs	r3, r2
 8001594:	43da      	mvns	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	0013      	movs	r3, r2
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ba:	2201      	movs	r2, #1
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	2201      	movs	r2, #1
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d017      	beq.n	8001622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	409a      	lsls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	43da      	mvns	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2203      	movs	r2, #3
 8001628:	4013      	ands	r3, r2
 800162a:	2b02      	cmp	r3, #2
 800162c:	d123      	bne.n	8001676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	58d3      	ldr	r3, [r2, r3]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2207      	movs	r2, #7
 8001640:	4013      	ands	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	43da      	mvns	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2107      	movs	r1, #7
 800165a:	400b      	ands	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	409a      	lsls	r2, r3
 8001684:	0013      	movs	r3, r2
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2203      	movs	r2, #3
 8001694:	401a      	ands	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	23c0      	movs	r3, #192	@ 0xc0
 80016b0:	029b      	lsls	r3, r3, #10
 80016b2:	4013      	ands	r3, r2
 80016b4:	d100      	bne.n	80016b8 <HAL_GPIO_Init+0x174>
 80016b6:	e092      	b.n	80017de <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016b8:	4a50      	ldr	r2, [pc, #320]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3318      	adds	r3, #24
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	589b      	ldr	r3, [r3, r2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2203      	movs	r2, #3
 80016ca:	4013      	ands	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	220f      	movs	r2, #15
 80016d0:	409a      	lsls	r2, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	43da      	mvns	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	23a0      	movs	r3, #160	@ 0xa0
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x1ca>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a45      	ldr	r2, [pc, #276]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x1c6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a44      	ldr	r2, [pc, #272]	@ (8001804 <HAL_GPIO_Init+0x2c0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x1c2>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a43      	ldr	r2, [pc, #268]	@ (8001808 <HAL_GPIO_Init+0x2c4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x1be>
 80016fe:	2303      	movs	r3, #3
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x1cc>
 8001702:	2305      	movs	r3, #5
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x1cc>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x1cc>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x1cc>
 800170e:	2300      	movs	r3, #0
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	2103      	movs	r1, #3
 8001714:	400a      	ands	r2, r1
 8001716:	00d2      	lsls	r2, r2, #3
 8001718:	4093      	lsls	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001720:	4936      	ldr	r1, [pc, #216]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3318      	adds	r3, #24
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800172e:	4b33      	ldr	r3, [pc, #204]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	035b      	lsls	r3, r3, #13
 8001746:	4013      	ands	r3, r2
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001758:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	039b      	lsls	r3, r3, #14
 8001770:	4013      	ands	r3, r2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001782:	4a1e      	ldr	r2, [pc, #120]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 8001784:	2384      	movs	r3, #132	@ 0x84
 8001786:	58d3      	ldr	r3, [r2, r3]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43da      	mvns	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a8:	4914      	ldr	r1, [pc, #80]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 80017aa:	2284      	movs	r2, #132	@ 0x84
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	58d3      	ldr	r3, [r2, r3]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	4013      	ands	r3, r2
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d6:	4909      	ldr	r1, [pc, #36]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	1e13      	subs	r3, r2, #0
 80017ee:	d000      	beq.n	80017f2 <HAL_GPIO_Init+0x2ae>
 80017f0:	e6b0      	b.n	8001554 <HAL_GPIO_Init+0x10>
  }
}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	46c0      	nop			@ (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b006      	add	sp, #24
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021800 	.word	0x40021800
 8001800:	50000400 	.word	0x50000400
 8001804:	50000800 	.word	0x50000800
 8001808:	50000c00 	.word	0x50000c00

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	0008      	movs	r0, r1
 8001816:	0011      	movs	r1, r2
 8001818:	1cbb      	adds	r3, r7, #2
 800181a:	1c02      	adds	r2, r0, #0
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	1c7b      	adds	r3, r7, #1
 8001820:	1c0a      	adds	r2, r1, #0
 8001822:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001824:	1c7b      	adds	r3, r7, #1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182c:	1cbb      	adds	r3, r7, #2
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001836:	1cbb      	adds	r3, r7, #2
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001856:	4013      	ands	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d11f      	bne.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	0013      	movs	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	189b      	adds	r3, r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4912      	ldr	r1, [pc, #72]	@ (80018c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800187a:	0018      	movs	r0, r3
 800187c:	f7fe fc54 	bl	8000128 <__udivsi3>
 8001880:	0003      	movs	r3, r0
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001886:	e008      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3b01      	subs	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e001      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e009      	b.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189a:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	401a      	ands	r2, r3
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d0ed      	beq.n	8001888 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b004      	add	sp, #16
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	40007000 	.word	0x40007000
 80018bc:	fffff9ff 	.word	0xfffff9ff
 80018c0:	20000004 	.word	0x20000004
 80018c4:	000f4240 	.word	0x000f4240

080018c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	23e0      	movs	r3, #224	@ 0xe0
 80018d2:	01db      	lsls	r3, r3, #7
 80018d4:	4013      	ands	r3, r2
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e2fe      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4013      	ands	r3, r2
 80018fa:	d100      	bne.n	80018fe <HAL_RCC_OscConfig+0x1e>
 80018fc:	e07c      	b.n	80019f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fe:	4bc3      	ldr	r3, [pc, #780]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2238      	movs	r2, #56	@ 0x38
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001908:	4bc0      	ldr	r3, [pc, #768]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2203      	movs	r2, #3
 800190e:	4013      	ands	r3, r2
 8001910:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b10      	cmp	r3, #16
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0x3e>
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d002      	beq.n	8001924 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b08      	cmp	r3, #8
 8001922:	d10b      	bne.n	800193c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	4bb9      	ldr	r3, [pc, #740]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	029b      	lsls	r3, r3, #10
 800192c:	4013      	ands	r3, r2
 800192e:	d062      	beq.n	80019f6 <HAL_RCC_OscConfig+0x116>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d15e      	bne.n	80019f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e2d9      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	025b      	lsls	r3, r3, #9
 8001944:	429a      	cmp	r2, r3
 8001946:	d107      	bne.n	8001958 <HAL_RCC_OscConfig+0x78>
 8001948:	4bb0      	ldr	r3, [pc, #704]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4baf      	ldr	r3, [pc, #700]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	0249      	lsls	r1, r1, #9
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e020      	b.n	800199a <HAL_RCC_OscConfig+0xba>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	23a0      	movs	r3, #160	@ 0xa0
 800195e:	02db      	lsls	r3, r3, #11
 8001960:	429a      	cmp	r2, r3
 8001962:	d10e      	bne.n	8001982 <HAL_RCC_OscConfig+0xa2>
 8001964:	4ba9      	ldr	r3, [pc, #676]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4ba8      	ldr	r3, [pc, #672]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 800196a:	2180      	movs	r1, #128	@ 0x80
 800196c:	02c9      	lsls	r1, r1, #11
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	4ba6      	ldr	r3, [pc, #664]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4ba5      	ldr	r3, [pc, #660]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	0249      	lsls	r1, r1, #9
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0xba>
 8001982:	4ba2      	ldr	r3, [pc, #648]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4ba1      	ldr	r3, [pc, #644]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001988:	49a1      	ldr	r1, [pc, #644]	@ (8001c10 <HAL_RCC_OscConfig+0x330>)
 800198a:	400a      	ands	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b9f      	ldr	r3, [pc, #636]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b9e      	ldr	r3, [pc, #632]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001994:	499f      	ldr	r1, [pc, #636]	@ (8001c14 <HAL_RCC_OscConfig+0x334>)
 8001996:	400a      	ands	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d014      	beq.n	80019cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff fc1b 	bl	80011dc <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fc16 	bl	80011dc <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	@ 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e298      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019be:	4b93      	ldr	r3, [pc, #588]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	4013      	ands	r3, r2
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0xcc>
 80019ca:	e015      	b.n	80019f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc06 	bl	80011dc <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d6:	f7ff fc01 	bl	80011dc <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	@ 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e283      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e8:	4b88      	ldr	r3, [pc, #544]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	029b      	lsls	r3, r3, #10
 80019f0:	4013      	ands	r3, r2
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0xf6>
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2202      	movs	r2, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d100      	bne.n	8001a04 <HAL_RCC_OscConfig+0x124>
 8001a02:	e099      	b.n	8001b38 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a04:	4b81      	ldr	r3, [pc, #516]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2238      	movs	r2, #56	@ 0x38
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2203      	movs	r2, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0x144>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d002      	beq.n	8001a2a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d135      	bne.n	8001a96 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2a:	4b78      	ldr	r3, [pc, #480]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4013      	ands	r3, r2
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x162>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e256      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b72      	ldr	r3, [pc, #456]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a74      	ldr	r2, [pc, #464]	@ (8001c18 <HAL_RCC_OscConfig+0x338>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	021a      	lsls	r2, r3, #8
 8001a52:	4b6e      	ldr	r3, [pc, #440]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d112      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6e      	ldr	r2, [pc, #440]	@ (8001c1c <HAL_RCC_OscConfig+0x33c>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	4b67      	ldr	r3, [pc, #412]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a72:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0adb      	lsrs	r3, r3, #11
 8001a78:	2207      	movs	r2, #7
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	4a68      	ldr	r2, [pc, #416]	@ (8001c20 <HAL_RCC_OscConfig+0x340>)
 8001a7e:	40da      	lsrs	r2, r3
 8001a80:	4b68      	ldr	r3, [pc, #416]	@ (8001c24 <HAL_RCC_OscConfig+0x344>)
 8001a82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a84:	4b68      	ldr	r3, [pc, #416]	@ (8001c28 <HAL_RCC_OscConfig+0x348>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fb4b 	bl	8001124 <HAL_InitTick>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d051      	beq.n	8001b36 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e22c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d030      	beq.n	8001b00 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c1c <HAL_RCC_OscConfig+0x33c>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ab2:	4b56      	ldr	r3, [pc, #344]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b55      	ldr	r3, [pc, #340]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	2180      	movs	r1, #128	@ 0x80
 8001aba:	0049      	lsls	r1, r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fb8c 	bl	80011dc <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fb87 	bl	80011dc <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e209      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	4b4b      	ldr	r3, [pc, #300]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b48      	ldr	r3, [pc, #288]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a4a      	ldr	r2, [pc, #296]	@ (8001c18 <HAL_RCC_OscConfig+0x338>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	021a      	lsls	r2, r3, #8
 8001af8:	4b44      	ldr	r3, [pc, #272]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	e01b      	b.n	8001b38 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b00:	4b42      	ldr	r3, [pc, #264]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b41      	ldr	r3, [pc, #260]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001b06:	4949      	ldr	r1, [pc, #292]	@ (8001c2c <HAL_RCC_OscConfig+0x34c>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb66 	bl	80011dc <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff fb61 	bl	80011dc <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1e3      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b28:	4b38      	ldr	r3, [pc, #224]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4013      	ands	r3, r2
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x236>
 8001b34:	e000      	b.n	8001b38 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d047      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b42:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2238      	movs	r2, #56	@ 0x38
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b18      	cmp	r3, #24
 8001b4c:	d10a      	bne.n	8001b64 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d03c      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2f2>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d138      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e1c5      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d019      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b70:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fb30 	bl	80011dc <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff fb2b 	bl	80011dc <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1ad      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d0f1      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2a2>
 8001b9e:	e018      	b.n	8001bd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	438a      	bics	r2, r1
 8001baa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fb16 	bl	80011dc <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fb11 	bl	80011dc <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e193      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d1f1      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d100      	bne.n	8001bde <HAL_RCC_OscConfig+0x2fe>
 8001bdc:	e0c6      	b.n	8001d6c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bde:	231f      	movs	r3, #31
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2238      	movs	r2, #56	@ 0x38
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d11e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d100      	bne.n	8001bfe <HAL_RCC_OscConfig+0x31e>
 8001bfc:	e0b6      	b.n	8001d6c <HAL_RCC_OscConfig+0x48c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d000      	beq.n	8001c08 <HAL_RCC_OscConfig+0x328>
 8001c06:	e0b1      	b.n	8001d6c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e171      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	fffeffff 	.word	0xfffeffff
 8001c14:	fffbffff 	.word	0xfffbffff
 8001c18:	ffff80ff 	.word	0xffff80ff
 8001c1c:	ffffc7ff 	.word	0xffffc7ff
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	20000004 	.word	0x20000004
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c30:	4bb1      	ldr	r3, [pc, #708]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001c32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	055b      	lsls	r3, r3, #21
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_OscConfig+0x360>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x362>
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d011      	beq.n	8001c6a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4bac      	ldr	r3, [pc, #688]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c4a:	4bab      	ldr	r3, [pc, #684]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	2180      	movs	r1, #128	@ 0x80
 8001c4e:	0549      	lsls	r1, r1, #21
 8001c50:	430a      	orrs	r2, r1
 8001c52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c54:	4ba8      	ldr	r3, [pc, #672]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	055b      	lsls	r3, r3, #21
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c62:	231f      	movs	r3, #31
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6a:	4ba4      	ldr	r3, [pc, #656]	@ (8001efc <HAL_RCC_OscConfig+0x61c>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2380      	movs	r3, #128	@ 0x80
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	d11a      	bne.n	8001cac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c76:	4ba1      	ldr	r3, [pc, #644]	@ (8001efc <HAL_RCC_OscConfig+0x61c>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4ba0      	ldr	r3, [pc, #640]	@ (8001efc <HAL_RCC_OscConfig+0x61c>)
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0049      	lsls	r1, r1, #1
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c84:	f7ff faaa 	bl	80011dc <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8e:	f7ff faa5 	bl	80011dc <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e127      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca0:	4b96      	ldr	r3, [pc, #600]	@ (8001efc <HAL_RCC_OscConfig+0x61c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	@ 0x80
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3e2>
 8001cb4:	4b90      	ldr	r3, [pc, #576]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001cb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0x41c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x404>
 8001cca:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001ccc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cce:	4b8a      	ldr	r3, [pc, #552]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cd6:	4b88      	ldr	r3, [pc, #544]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001cd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cda:	4b87      	ldr	r3, [pc, #540]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0x41c>
 8001ce4:	4b84      	ldr	r3, [pc, #528]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001ce6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ce8:	4b83      	ldr	r3, [pc, #524]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	438a      	bics	r2, r1
 8001cee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cf0:	4b81      	ldr	r3, [pc, #516]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001cf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cf4:	4b80      	ldr	r3, [pc, #512]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fa6a 	bl	80011dc <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fa65 	bl	80011dc <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a79      	ldr	r2, [pc, #484]	@ (8001f00 <HAL_RCC_OscConfig+0x620>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e0e6      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d22:	4b75      	ldr	r3, [pc, #468]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	2202      	movs	r2, #2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x42e>
 8001d2c:	e013      	b.n	8001d56 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fa55 	bl	80011dc <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d36:	e009      	b.n	8001d4c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7ff fa50 	bl	80011dc <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	4a6f      	ldr	r2, [pc, #444]	@ (8001f00 <HAL_RCC_OscConfig+0x620>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0d1      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d56:	231f      	movs	r3, #31
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d60:	4b65      	ldr	r3, [pc, #404]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d64:	4b64      	ldr	r3, [pc, #400]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001d66:	4967      	ldr	r1, [pc, #412]	@ (8001f04 <HAL_RCC_OscConfig+0x624>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d100      	bne.n	8001d76 <HAL_RCC_OscConfig+0x496>
 8001d74:	e0bb      	b.n	8001eee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d76:	4b60      	ldr	r3, [pc, #384]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2238      	movs	r2, #56	@ 0x38
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d100      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4a4>
 8001d82:	e07b      	b.n	8001e7c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d156      	bne.n	8001e3a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b59      	ldr	r3, [pc, #356]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001d92:	495d      	ldr	r1, [pc, #372]	@ (8001f08 <HAL_RCC_OscConfig+0x628>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fa20 	bl	80011dc <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fa1b 	bl	80011dc <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e09d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db4:	4b50      	ldr	r3, [pc, #320]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	049b      	lsls	r3, r3, #18
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a51      	ldr	r2, [pc, #324]	@ (8001f0c <HAL_RCC_OscConfig+0x62c>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dec:	431a      	orrs	r2, r3
 8001dee:	4b42      	ldr	r3, [pc, #264]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b40      	ldr	r3, [pc, #256]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001dfa:	2180      	movs	r1, #128	@ 0x80
 8001dfc:	0449      	lsls	r1, r1, #17
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e08:	2180      	movs	r1, #128	@ 0x80
 8001e0a:	0549      	lsls	r1, r1, #21
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f9e4 	bl	80011dc <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff f9df 	bl	80011dc <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e061      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2c:	4b32      	ldr	r3, [pc, #200]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	049b      	lsls	r3, r3, #18
 8001e34:	4013      	ands	r3, r2
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x53a>
 8001e38:	e059      	b.n	8001eee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e40:	4931      	ldr	r1, [pc, #196]	@ (8001f08 <HAL_RCC_OscConfig+0x628>)
 8001e42:	400a      	ands	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff f9c9 	bl	80011dc <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff f9c4 	bl	80011dc <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e046      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	049b      	lsls	r3, r3, #18
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e74:	4926      	ldr	r1, [pc, #152]	@ (8001f10 <HAL_RCC_OscConfig+0x630>)
 8001e76:	400a      	ands	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	e038      	b.n	8001eee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e033      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x618>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2203      	movs	r2, #3
 8001e92:	401a      	ands	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d126      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2270      	movs	r2, #112	@ 0x70
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d11f      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	23fe      	movs	r3, #254	@ 0xfe
 8001eae:	01db      	lsls	r3, r3, #7
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d116      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	23f8      	movs	r3, #248	@ 0xf8
 8001ec0:	039b      	lsls	r3, r3, #14
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10e      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	23e0      	movs	r3, #224	@ 0xe0
 8001ed0:	051b      	lsls	r3, r3, #20
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	0f5b      	lsrs	r3, r3, #29
 8001ee0:	075a      	lsls	r2, r3, #29
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b008      	add	sp, #32
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
 8001f00:	00001388 	.word	0x00001388
 8001f04:	efffffff 	.word	0xefffffff
 8001f08:	feffffff 	.word	0xfeffffff
 8001f0c:	11c1808c 	.word	0x11c1808c
 8001f10:	eefefffc 	.word	0xeefefffc

08001f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0e9      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b76      	ldr	r3, [pc, #472]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	4013      	ands	r3, r2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d91e      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b73      	ldr	r3, [pc, #460]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f48:	f7ff f948 	bl	80011dc <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f50:	e009      	b.n	8001f66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f52:	f7ff f943 	bl	80011dc <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002108 <HAL_RCC_ClockConfig+0x1f4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0ca      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f66:	4b67      	ldr	r3, [pc, #412]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1ee      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2204      	movs	r2, #4
 8001f84:	4013      	ands	r3, r2
 8001f86:	d006      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f88:	4b60      	ldr	r3, [pc, #384]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b5f      	ldr	r3, [pc, #380]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8001f8e:	21e0      	movs	r1, #224	@ 0xe0
 8001f90:	01c9      	lsls	r1, r1, #7
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f96:	4b5d      	ldr	r3, [pc, #372]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a5d      	ldr	r2, [pc, #372]	@ (8002110 <HAL_RCC_ClockConfig+0x1fc>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b59      	ldr	r3, [pc, #356]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d057      	beq.n	8002064 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbc:	4b53      	ldr	r3, [pc, #332]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d12b      	bne.n	8002020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e097      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	049b      	lsls	r3, r3, #18
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d11f      	bne.n	8002020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e08b      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fec:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d113      	bne.n	8002020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e07f      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d106      	bne.n	8002012 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002004:	4b41      	ldr	r3, [pc, #260]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8002006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002008:	2202      	movs	r2, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d108      	bne.n	8002020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e074      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e06d      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002020:	4b3a      	ldr	r3, [pc, #232]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2207      	movs	r2, #7
 8002026:	4393      	bics	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4b37      	ldr	r3, [pc, #220]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002034:	f7ff f8d2 	bl	80011dc <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203c:	e009      	b.n	8002052 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203e:	f7ff f8cd 	bl	80011dc <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	4a2f      	ldr	r2, [pc, #188]	@ (8002108 <HAL_RCC_ClockConfig+0x1f4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e054      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2238      	movs	r2, #56	@ 0x38
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	429a      	cmp	r2, r3
 8002062:	d1ec      	bne.n	800203e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2207      	movs	r2, #7
 800206a:	4013      	ands	r3, r2
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d21e      	bcs.n	80020b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2207      	movs	r2, #7
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002084:	f7ff f8aa 	bl	80011dc <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800208c:	e009      	b.n	80020a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7ff f8a5 	bl	80011dc <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a1b      	ldr	r2, [pc, #108]	@ (8002108 <HAL_RCC_ClockConfig+0x1f4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e02c      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a2:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2207      	movs	r2, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2204      	movs	r2, #4
 80020b6:	4013      	ands	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020ba:	4b14      	ldr	r3, [pc, #80]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4a15      	ldr	r2, [pc, #84]	@ (8002114 <HAL_RCC_ClockConfig+0x200>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4b10      	ldr	r3, [pc, #64]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020ce:	f000 f829 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020d2:	0001      	movs	r1, r0
 80020d4:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	220f      	movs	r2, #15
 80020dc:	401a      	ands	r2, r3
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_RCC_ClockConfig+0x204>)
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	58d3      	ldr	r3, [r2, r3]
 80020e4:	221f      	movs	r2, #31
 80020e6:	4013      	ands	r3, r2
 80020e8:	000a      	movs	r2, r1
 80020ea:	40da      	lsrs	r2, r3
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_ClockConfig+0x208>)
 80020ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_ClockConfig+0x20c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff f815 	bl	8001124 <HAL_InitTick>
 80020fa:	0003      	movs	r3, r0
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b004      	add	sp, #16
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40022000 	.word	0x40022000
 8002108:	00001388 	.word	0x00001388
 800210c:	40021000 	.word	0x40021000
 8002110:	fffff0ff 	.word	0xfffff0ff
 8002114:	ffff8fff 	.word	0xffff8fff
 8002118:	08006398 	.word	0x08006398
 800211c:	20000004 	.word	0x20000004
 8002120:	20000008 	.word	0x20000008

08002124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212a:	4b3c      	ldr	r3, [pc, #240]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2238      	movs	r2, #56	@ 0x38
 8002130:	4013      	ands	r3, r2
 8002132:	d10f      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002134:	4b39      	ldr	r3, [pc, #228]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0adb      	lsrs	r3, r3, #11
 800213a:	2207      	movs	r2, #7
 800213c:	4013      	ands	r3, r2
 800213e:	2201      	movs	r2, #1
 8002140:	409a      	lsls	r2, r3
 8002142:	0013      	movs	r3, r2
 8002144:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	4835      	ldr	r0, [pc, #212]	@ (8002220 <HAL_RCC_GetSysClockFreq+0xfc>)
 800214a:	f7fd ffed 	bl	8000128 <__udivsi3>
 800214e:	0003      	movs	r3, r0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	e05d      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002154:	4b31      	ldr	r3, [pc, #196]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2238      	movs	r2, #56	@ 0x38
 800215a:	4013      	ands	r3, r2
 800215c:	2b08      	cmp	r3, #8
 800215e:	d102      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002160:	4b30      	ldr	r3, [pc, #192]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x100>)
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e054      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002166:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2238      	movs	r2, #56	@ 0x38
 800216c:	4013      	ands	r3, r2
 800216e:	2b10      	cmp	r3, #16
 8002170:	d138      	bne.n	80021e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002172:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2203      	movs	r2, #3
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800217c:	4b27      	ldr	r3, [pc, #156]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	2207      	movs	r2, #7
 8002184:	4013      	ands	r3, r2
 8002186:	3301      	adds	r3, #1
 8002188:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d10d      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	4824      	ldr	r0, [pc, #144]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x100>)
 8002194:	f7fd ffc8 	bl	8000128 <__udivsi3>
 8002198:	0003      	movs	r3, r0
 800219a:	0019      	movs	r1, r3
 800219c:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	227f      	movs	r2, #127	@ 0x7f
 80021a4:	4013      	ands	r3, r2
 80021a6:	434b      	muls	r3, r1
 80021a8:	617b      	str	r3, [r7, #20]
        break;
 80021aa:	e00d      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	481c      	ldr	r0, [pc, #112]	@ (8002220 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021b0:	f7fd ffba 	bl	8000128 <__udivsi3>
 80021b4:	0003      	movs	r3, r0
 80021b6:	0019      	movs	r1, r3
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	227f      	movs	r2, #127	@ 0x7f
 80021c0:	4013      	ands	r3, r2
 80021c2:	434b      	muls	r3, r1
 80021c4:	617b      	str	r3, [r7, #20]
        break;
 80021c6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0f5b      	lsrs	r3, r3, #29
 80021ce:	2207      	movs	r2, #7
 80021d0:	4013      	ands	r3, r2
 80021d2:	3301      	adds	r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	6978      	ldr	r0, [r7, #20]
 80021da:	f7fd ffa5 	bl	8000128 <__udivsi3>
 80021de:	0003      	movs	r3, r0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e015      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2238      	movs	r2, #56	@ 0x38
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d103      	bne.n	80021f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2238      	movs	r2, #56	@ 0x38
 80021fe:	4013      	ands	r3, r2
 8002200:	2b18      	cmp	r3, #24
 8002202:	d103      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002204:	23fa      	movs	r3, #250	@ 0xfa
 8002206:	01db      	lsls	r3, r3, #7
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e001      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002210:	693b      	ldr	r3, [r7, #16]
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b006      	add	sp, #24
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	40021000 	.word	0x40021000
 8002220:	00f42400 	.word	0x00f42400
 8002224:	007a1200 	.word	0x007a1200

08002228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800222c:	4b02      	ldr	r3, [pc, #8]	@ (8002238 <HAL_RCC_GetHCLKFreq+0x10>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002240:	f7ff fff2 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002244:	0004      	movs	r4, r0
 8002246:	f7ff fb3f 	bl	80018c8 <LL_RCC_GetAPB1Prescaler>
 800224a:	0003      	movs	r3, r0
 800224c:	0b1a      	lsrs	r2, r3, #12
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	58d3      	ldr	r3, [r2, r3]
 8002254:	221f      	movs	r2, #31
 8002256:	4013      	ands	r3, r2
 8002258:	40dc      	lsrs	r4, r3
 800225a:	0023      	movs	r3, r4
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	bdb0      	pop	{r4, r5, r7, pc}
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	080063d8 	.word	0x080063d8

08002268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002270:	2313      	movs	r3, #19
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002278:	2312      	movs	r3, #18
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	4013      	ands	r3, r2
 800228a:	d100      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800228c:	e0a3      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2011      	movs	r0, #17
 8002290:	183b      	adds	r3, r7, r0
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002296:	4bc3      	ldr	r3, [pc, #780]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	055b      	lsls	r3, r3, #21
 800229e:	4013      	ands	r3, r2
 80022a0:	d110      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4bc0      	ldr	r3, [pc, #768]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022a6:	4bbf      	ldr	r3, [pc, #764]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a8:	2180      	movs	r1, #128	@ 0x80
 80022aa:	0549      	lsls	r1, r1, #21
 80022ac:	430a      	orrs	r2, r1
 80022ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022b0:	4bbc      	ldr	r3, [pc, #752]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022b4:	2380      	movs	r3, #128	@ 0x80
 80022b6:	055b      	lsls	r3, r3, #21
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c4:	4bb8      	ldr	r3, [pc, #736]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4bb7      	ldr	r3, [pc, #732]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022ca:	2180      	movs	r1, #128	@ 0x80
 80022cc:	0049      	lsls	r1, r1, #1
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022d2:	f7fe ff83 	bl	80011dc <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022da:	e00b      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022dc:	f7fe ff7e 	bl	80011dc <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d904      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022ea:	2313      	movs	r3, #19
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	2203      	movs	r2, #3
 80022f0:	701a      	strb	r2, [r3, #0]
        break;
 80022f2:	e005      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022f4:	4bac      	ldr	r3, [pc, #688]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	d0ed      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002300:	2313      	movs	r3, #19
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d154      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800230a:	4ba6      	ldr	r3, [pc, #664]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800230e:	23c0      	movs	r3, #192	@ 0xc0
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4013      	ands	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d019      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	429a      	cmp	r2, r3
 8002324:	d014      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002326:	4b9f      	ldr	r3, [pc, #636]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232a:	4aa0      	ldr	r2, [pc, #640]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800232c:	4013      	ands	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002330:	4b9c      	ldr	r3, [pc, #624]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002332:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002334:	4b9b      	ldr	r3, [pc, #620]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	0249      	lsls	r1, r1, #9
 800233a:	430a      	orrs	r2, r1
 800233c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800233e:	4b99      	ldr	r3, [pc, #612]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002340:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002342:	4b98      	ldr	r3, [pc, #608]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	499a      	ldr	r1, [pc, #616]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002346:	400a      	ands	r2, r1
 8002348:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800234a:	4b96      	ldr	r3, [pc, #600]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2201      	movs	r2, #1
 8002354:	4013      	ands	r3, r2
 8002356:	d016      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7fe ff40 	bl	80011dc <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002360:	e00c      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe ff3b 	bl	80011dc <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	4a91      	ldr	r2, [pc, #580]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d904      	bls.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002372:	2313      	movs	r3, #19
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2203      	movs	r2, #3
 8002378:	701a      	strb	r2, [r3, #0]
            break;
 800237a:	e004      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237c:	4b89      	ldr	r3, [pc, #548]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002380:	2202      	movs	r2, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d0ed      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002386:	2313      	movs	r3, #19
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002390:	4b84      	ldr	r3, [pc, #528]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	4a85      	ldr	r2, [pc, #532]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800239e:	4b81      	ldr	r3, [pc, #516]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023a4:	e00c      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a6:	2312      	movs	r3, #18
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2213      	movs	r2, #19
 80023ac:	18ba      	adds	r2, r7, r2
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e005      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b4:	2312      	movs	r3, #18
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2213      	movs	r2, #19
 80023ba:	18ba      	adds	r2, r7, r2
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023c0:	2311      	movs	r3, #17
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b76      	ldr	r3, [pc, #472]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ce:	4b75      	ldr	r3, [pc, #468]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d0:	4979      	ldr	r1, [pc, #484]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80023d2:	400a      	ands	r2, r1
 80023d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2201      	movs	r2, #1
 80023dc:	4013      	ands	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e0:	4b70      	ldr	r3, [pc, #448]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	2203      	movs	r2, #3
 80023e6:	4393      	bics	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4b6d      	ldr	r3, [pc, #436]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023fe:	4b69      	ldr	r3, [pc, #420]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002402:	220c      	movs	r2, #12
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	4b65      	ldr	r3, [pc, #404]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240e:	430a      	orrs	r2, r1
 8002410:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	4013      	ands	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800241c:	4b61      	ldr	r3, [pc, #388]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002420:	4a66      	ldr	r2, [pc, #408]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	4b5e      	ldr	r3, [pc, #376]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242c:	430a      	orrs	r2, r1
 800242e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4013      	ands	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800243c:	4b59      	ldr	r3, [pc, #356]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002440:	4a5f      	ldr	r2, [pc, #380]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	4b56      	ldr	r3, [pc, #344]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800244c:	430a      	orrs	r2, r1
 800244e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4013      	ands	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800245c:	4b51      	ldr	r3, [pc, #324]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002460:	4a58      	ldr	r2, [pc, #352]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800246c:	430a      	orrs	r2, r1
 800246e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2220      	movs	r2, #32
 8002476:	4013      	ands	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800247a:	4b4a      	ldr	r3, [pc, #296]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247e:	4a52      	ldr	r2, [pc, #328]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002480:	4013      	ands	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	4b46      	ldr	r3, [pc, #280]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248a:	430a      	orrs	r2, r1
 800248c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	01db      	lsls	r3, r3, #7
 8002496:	4013      	ands	r3, r2
 8002498:	d015      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800249a:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	0899      	lsrs	r1, r3, #2
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	4b3f      	ldr	r3, [pc, #252]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a8:	430a      	orrs	r2, r1
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1a      	ldr	r2, [r3, #32]
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	05db      	lsls	r3, r3, #23
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024b8:	4b3a      	ldr	r3, [pc, #232]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	4b39      	ldr	r3, [pc, #228]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024be:	2180      	movs	r1, #128	@ 0x80
 80024c0:	0249      	lsls	r1, r1, #9
 80024c2:	430a      	orrs	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	031b      	lsls	r3, r3, #12
 80024ce:	4013      	ands	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024d2:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d6:	2240      	movs	r2, #64	@ 0x40
 80024d8:	4393      	bics	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e0:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	039b      	lsls	r3, r3, #14
 80024ee:	4013      	ands	r3, r2
 80024f0:	d016      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024f2:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	4a35      	ldr	r2, [pc, #212]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002502:	430a      	orrs	r2, r1
 8002504:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	03db      	lsls	r3, r3, #15
 800250e:	429a      	cmp	r2, r3
 8002510:	d106      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002512:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002518:	2180      	movs	r1, #128	@ 0x80
 800251a:	0449      	lsls	r1, r1, #17
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	03db      	lsls	r3, r3, #15
 8002528:	4013      	ands	r3, r2
 800252a:	d016      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800252e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002530:	4a27      	ldr	r2, [pc, #156]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253a:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253c:	430a      	orrs	r2, r1
 800253e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	045b      	lsls	r3, r3, #17
 8002548:	429a      	cmp	r2, r3
 800254a:	d106      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800254c:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	0449      	lsls	r1, r1, #17
 8002556:	430a      	orrs	r2, r1
 8002558:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4013      	ands	r3, r2
 8002564:	d016      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	4a1a      	ldr	r2, [pc, #104]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002576:	430a      	orrs	r2, r1
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	01db      	lsls	r3, r3, #7
 8002582:	429a      	cmp	r2, r3
 8002584:	d106      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002586:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800258c:	2180      	movs	r1, #128	@ 0x80
 800258e:	0249      	lsls	r1, r1, #9
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002594:	2312      	movs	r3, #18
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b006      	add	sp, #24
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	fffffcff 	.word	0xfffffcff
 80025b0:	fffeffff 	.word	0xfffeffff
 80025b4:	00001388 	.word	0x00001388
 80025b8:	efffffff 	.word	0xefffffff
 80025bc:	fffff3ff 	.word	0xfffff3ff
 80025c0:	fff3ffff 	.word	0xfff3ffff
 80025c4:	ffcfffff 	.word	0xffcfffff
 80025c8:	ffffcfff 	.word	0xffffcfff
 80025cc:	ffbfffff 	.word	0xffbfffff
 80025d0:	feffffff 	.word	0xfeffffff
 80025d4:	ffff3fff 	.word	0xffff3fff

080025d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e04a      	b.n	8002680 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	223d      	movs	r2, #61	@ 0x3d
 80025ee:	5c9b      	ldrb	r3, [r3, r2]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	223c      	movs	r2, #60	@ 0x3c
 80025fa:	2100      	movs	r1, #0
 80025fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f7fe fbc5 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	223d      	movs	r2, #61	@ 0x3d
 800260a:	2102      	movs	r1, #2
 800260c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	0019      	movs	r1, r3
 8002618:	0010      	movs	r0, r2
 800261a:	f000 fb55 	bl	8002cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2248      	movs	r2, #72	@ 0x48
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	223e      	movs	r2, #62	@ 0x3e
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	223f      	movs	r2, #63	@ 0x3f
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2240      	movs	r2, #64	@ 0x40
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2241      	movs	r2, #65	@ 0x41
 8002642:	2101      	movs	r1, #1
 8002644:	5499      	strb	r1, [r3, r2]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2242      	movs	r2, #66	@ 0x42
 800264a:	2101      	movs	r1, #1
 800264c:	5499      	strb	r1, [r3, r2]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2243      	movs	r2, #67	@ 0x43
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2244      	movs	r2, #68	@ 0x44
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2245      	movs	r2, #69	@ 0x45
 8002662:	2101      	movs	r1, #1
 8002664:	5499      	strb	r1, [r3, r2]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2246      	movs	r2, #70	@ 0x46
 800266a:	2101      	movs	r1, #1
 800266c:	5499      	strb	r1, [r3, r2]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2247      	movs	r2, #71	@ 0x47
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223d      	movs	r2, #61	@ 0x3d
 800267a:	2101      	movs	r1, #1
 800267c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e04a      	b.n	8002730 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223d      	movs	r2, #61	@ 0x3d
 800269e:	5c9b      	ldrb	r3, [r3, r2]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d107      	bne.n	80026b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	223c      	movs	r2, #60	@ 0x3c
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 f841 	bl	8002738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	223d      	movs	r2, #61	@ 0x3d
 80026ba:	2102      	movs	r1, #2
 80026bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	0019      	movs	r1, r3
 80026c8:	0010      	movs	r0, r2
 80026ca:	f000 fafd 	bl	8002cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2248      	movs	r2, #72	@ 0x48
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223e      	movs	r2, #62	@ 0x3e
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	223f      	movs	r2, #63	@ 0x3f
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2240      	movs	r2, #64	@ 0x40
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2241      	movs	r2, #65	@ 0x41
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2242      	movs	r2, #66	@ 0x42
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2243      	movs	r2, #67	@ 0x43
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2244      	movs	r2, #68	@ 0x44
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2245      	movs	r2, #69	@ 0x45
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2246      	movs	r2, #70	@ 0x46
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2247      	movs	r2, #71	@ 0x47
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	223d      	movs	r2, #61	@ 0x3d
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d108      	bne.n	800276a <HAL_TIM_PWM_Start+0x22>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	223e      	movs	r2, #62	@ 0x3e
 800275c:	5c9b      	ldrb	r3, [r3, r2]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	4193      	sbcs	r3, r2
 8002766:	b2db      	uxtb	r3, r3
 8002768:	e037      	b.n	80027da <HAL_TIM_PWM_Start+0x92>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d108      	bne.n	8002782 <HAL_TIM_PWM_Start+0x3a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	223f      	movs	r2, #63	@ 0x3f
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	4193      	sbcs	r3, r2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	e02b      	b.n	80027da <HAL_TIM_PWM_Start+0x92>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d108      	bne.n	800279a <HAL_TIM_PWM_Start+0x52>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2240      	movs	r2, #64	@ 0x40
 800278c:	5c9b      	ldrb	r3, [r3, r2]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	1e5a      	subs	r2, r3, #1
 8002794:	4193      	sbcs	r3, r2
 8002796:	b2db      	uxtb	r3, r3
 8002798:	e01f      	b.n	80027da <HAL_TIM_PWM_Start+0x92>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	d108      	bne.n	80027b2 <HAL_TIM_PWM_Start+0x6a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2241      	movs	r2, #65	@ 0x41
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	4193      	sbcs	r3, r2
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e013      	b.n	80027da <HAL_TIM_PWM_Start+0x92>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d108      	bne.n	80027ca <HAL_TIM_PWM_Start+0x82>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2242      	movs	r2, #66	@ 0x42
 80027bc:	5c9b      	ldrb	r3, [r3, r2]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	1e5a      	subs	r2, r3, #1
 80027c4:	4193      	sbcs	r3, r2
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	e007      	b.n	80027da <HAL_TIM_PWM_Start+0x92>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2243      	movs	r2, #67	@ 0x43
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	4193      	sbcs	r3, r2
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e08b      	b.n	80028fa <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d104      	bne.n	80027f2 <HAL_TIM_PWM_Start+0xaa>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	223e      	movs	r2, #62	@ 0x3e
 80027ec:	2102      	movs	r1, #2
 80027ee:	5499      	strb	r1, [r3, r2]
 80027f0:	e023      	b.n	800283a <HAL_TIM_PWM_Start+0xf2>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d104      	bne.n	8002802 <HAL_TIM_PWM_Start+0xba>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	223f      	movs	r2, #63	@ 0x3f
 80027fc:	2102      	movs	r1, #2
 80027fe:	5499      	strb	r1, [r3, r2]
 8002800:	e01b      	b.n	800283a <HAL_TIM_PWM_Start+0xf2>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d104      	bne.n	8002812 <HAL_TIM_PWM_Start+0xca>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2240      	movs	r2, #64	@ 0x40
 800280c:	2102      	movs	r1, #2
 800280e:	5499      	strb	r1, [r3, r2]
 8002810:	e013      	b.n	800283a <HAL_TIM_PWM_Start+0xf2>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d104      	bne.n	8002822 <HAL_TIM_PWM_Start+0xda>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2241      	movs	r2, #65	@ 0x41
 800281c:	2102      	movs	r1, #2
 800281e:	5499      	strb	r1, [r3, r2]
 8002820:	e00b      	b.n	800283a <HAL_TIM_PWM_Start+0xf2>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b10      	cmp	r3, #16
 8002826:	d104      	bne.n	8002832 <HAL_TIM_PWM_Start+0xea>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2242      	movs	r2, #66	@ 0x42
 800282c:	2102      	movs	r1, #2
 800282e:	5499      	strb	r1, [r3, r2]
 8002830:	e003      	b.n	800283a <HAL_TIM_PWM_Start+0xf2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2243      	movs	r2, #67	@ 0x43
 8002836:	2102      	movs	r1, #2
 8002838:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	2201      	movs	r2, #1
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fe2e 	bl	80034a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2d      	ldr	r2, [pc, #180]	@ (8002904 <HAL_TIM_PWM_Start+0x1bc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_PWM_Start+0x128>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2c      	ldr	r2, [pc, #176]	@ (8002908 <HAL_TIM_PWM_Start+0x1c0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_TIM_PWM_Start+0x128>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2a      	ldr	r2, [pc, #168]	@ (800290c <HAL_TIM_PWM_Start+0x1c4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_PWM_Start+0x128>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a29      	ldr	r2, [pc, #164]	@ (8002910 <HAL_TIM_PWM_Start+0x1c8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_TIM_PWM_Start+0x12c>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_TIM_PWM_Start+0x12e>
 8002874:	2300      	movs	r3, #0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2180      	movs	r1, #128	@ 0x80
 8002886:	0209      	lsls	r1, r1, #8
 8002888:	430a      	orrs	r2, r1
 800288a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <HAL_TIM_PWM_Start+0x1bc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00f      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x16e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	429a      	cmp	r2, r3
 80028a0:	d009      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x16e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <HAL_TIM_PWM_Start+0x1cc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x16e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <HAL_TIM_PWM_Start+0x1c0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d116      	bne.n	80028e4 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a16      	ldr	r2, [pc, #88]	@ (8002918 <HAL_TIM_PWM_Start+0x1d0>)
 80028be:	4013      	ands	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b06      	cmp	r3, #6
 80028c6:	d016      	beq.n	80028f6 <HAL_TIM_PWM_Start+0x1ae>
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	025b      	lsls	r3, r3, #9
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d011      	beq.n	80028f6 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e2:	e008      	b.n	80028f6 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2101      	movs	r1, #1
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e000      	b.n	80028f8 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b004      	add	sp, #16
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40014000 	.word	0x40014000
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800
 8002914:	40000400 	.word	0x40000400
 8002918:	00010007 	.word	0x00010007

0800291c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002928:	2317      	movs	r3, #23
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	223c      	movs	r2, #60	@ 0x3c
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_TIM_PWM_ConfigChannel+0x22>
 800293a:	2302      	movs	r3, #2
 800293c:	e0e5      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	223c      	movs	r2, #60	@ 0x3c
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b14      	cmp	r3, #20
 800294a:	d900      	bls.n	800294e <HAL_TIM_PWM_ConfigChannel+0x32>
 800294c:	e0d1      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	009a      	lsls	r2, r3, #2
 8002952:	4b70      	ldr	r3, [pc, #448]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	0011      	movs	r1, r2
 8002962:	0018      	movs	r0, r3
 8002964:	f000 fa3e 	bl	8002de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2108      	movs	r1, #8
 8002974:	430a      	orrs	r2, r1
 8002976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2104      	movs	r1, #4
 8002984:	438a      	bics	r2, r1
 8002986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6999      	ldr	r1, [r3, #24]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	619a      	str	r2, [r3, #24]
      break;
 800299a:	e0af      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	0011      	movs	r1, r2
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 faa7 	bl	8002ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2180      	movs	r1, #128	@ 0x80
 80029b6:	0109      	lsls	r1, r1, #4
 80029b8:	430a      	orrs	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4954      	ldr	r1, [pc, #336]	@ (8002b18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6999      	ldr	r1, [r3, #24]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	021a      	lsls	r2, r3, #8
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	619a      	str	r2, [r3, #24]
      break;
 80029e0:	e08c      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	0011      	movs	r1, r2
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fb08 	bl	8003000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2108      	movs	r1, #8
 80029fc:	430a      	orrs	r2, r1
 80029fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69d9      	ldr	r1, [r3, #28]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	61da      	str	r2, [r3, #28]
      break;
 8002a22:	e06b      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fb6f 	bl	8003110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	0109      	lsls	r1, r1, #4
 8002a40:	430a      	orrs	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4932      	ldr	r1, [pc, #200]	@ (8002b18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69d9      	ldr	r1, [r3, #28]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	61da      	str	r2, [r3, #28]
      break;
 8002a68:	e048      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	0011      	movs	r1, r2
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fbb6 	bl	80031e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2108      	movs	r1, #8
 8002a84:	430a      	orrs	r2, r1
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2104      	movs	r1, #4
 8002a94:	438a      	bics	r2, r1
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002aaa:	e027      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 fbf5 	bl	80032a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	0109      	lsls	r1, r1, #4
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4910      	ldr	r1, [pc, #64]	@ (8002b18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	021a      	lsls	r2, r3, #8
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002af0:	e004      	b.n	8002afc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002af2:	2317      	movs	r3, #23
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
      break;
 8002afa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	223c      	movs	r2, #60	@ 0x3c
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]

  return status;
 8002b04:	2317      	movs	r3, #23
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	781b      	ldrb	r3, [r3, #0]
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b006      	add	sp, #24
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	080063f8 	.word	0x080063f8
 8002b18:	fffffbff 	.word	0xfffffbff

08002b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	230f      	movs	r3, #15
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	223c      	movs	r2, #60	@ 0x3c
 8002b32:	5c9b      	ldrb	r3, [r3, r2]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_TIM_ConfigClockSource+0x20>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0bc      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x19a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223c      	movs	r2, #60	@ 0x3c
 8002b40:	2101      	movs	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	223d      	movs	r2, #61	@ 0x3d
 8002b48:	2102      	movs	r1, #2
 8002b4a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4a5a      	ldr	r2, [pc, #360]	@ (8002cc0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4a59      	ldr	r2, [pc, #356]	@ (8002cc4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2280      	movs	r2, #128	@ 0x80
 8002b72:	0192      	lsls	r2, r2, #6
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d040      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xde>
 8002b78:	2280      	movs	r2, #128	@ 0x80
 8002b7a:	0192      	lsls	r2, r2, #6
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d900      	bls.n	8002b82 <HAL_TIM_ConfigClockSource+0x66>
 8002b80:	e088      	b.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
 8002b82:	2280      	movs	r2, #128	@ 0x80
 8002b84:	0152      	lsls	r2, r2, #5
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d100      	bne.n	8002b8c <HAL_TIM_ConfigClockSource+0x70>
 8002b8a:	e088      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x182>
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	0152      	lsls	r2, r2, #5
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d900      	bls.n	8002b96 <HAL_TIM_ConfigClockSource+0x7a>
 8002b94:	e07e      	b.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
 8002b96:	2b70      	cmp	r3, #112	@ 0x70
 8002b98:	d018      	beq.n	8002bcc <HAL_TIM_ConfigClockSource+0xb0>
 8002b9a:	d900      	bls.n	8002b9e <HAL_TIM_ConfigClockSource+0x82>
 8002b9c:	e07a      	b.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
 8002b9e:	2b60      	cmp	r3, #96	@ 0x60
 8002ba0:	d04f      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x126>
 8002ba2:	d900      	bls.n	8002ba6 <HAL_TIM_ConfigClockSource+0x8a>
 8002ba4:	e076      	b.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
 8002ba6:	2b50      	cmp	r3, #80	@ 0x50
 8002ba8:	d03b      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x106>
 8002baa:	d900      	bls.n	8002bae <HAL_TIM_ConfigClockSource+0x92>
 8002bac:	e072      	b.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
 8002bae:	2b40      	cmp	r3, #64	@ 0x40
 8002bb0:	d057      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x146>
 8002bb2:	d900      	bls.n	8002bb6 <HAL_TIM_ConfigClockSource+0x9a>
 8002bb4:	e06e      	b.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
 8002bb6:	2b30      	cmp	r3, #48	@ 0x30
 8002bb8:	d063      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x166>
 8002bba:	d86b      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d060      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x166>
 8002bc0:	d868      	bhi.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d05d      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x166>
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d05b      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x166>
 8002bca:	e063      	b.n	8002c94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bdc:	f000 fc42 	bl	8003464 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2277      	movs	r2, #119	@ 0x77
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
      break;
 8002bf8:	e052      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c0a:	f000 fc2b 	bl	8003464 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2180      	movs	r1, #128	@ 0x80
 8002c1a:	01c9      	lsls	r1, r1, #7
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	609a      	str	r2, [r3, #8]
      break;
 8002c20:	e03e      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	001a      	movs	r2, r3
 8002c30:	f000 fb9c 	bl	800336c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2150      	movs	r1, #80	@ 0x50
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 fbf6 	bl	800342c <TIM_ITRx_SetConfig>
      break;
 8002c40:	e02e      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4e:	001a      	movs	r2, r3
 8002c50:	f000 fbba 	bl	80033c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2160      	movs	r1, #96	@ 0x60
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 fbe6 	bl	800342c <TIM_ITRx_SetConfig>
      break;
 8002c60:	e01e      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	001a      	movs	r2, r3
 8002c70:	f000 fb7c 	bl	800336c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2140      	movs	r1, #64	@ 0x40
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f000 fbd6 	bl	800342c <TIM_ITRx_SetConfig>
      break;
 8002c80:	e00e      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	0010      	movs	r0, r2
 8002c8e:	f000 fbcd 	bl	800342c <TIM_ITRx_SetConfig>
      break;
 8002c92:	e005      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c94:	230f      	movs	r3, #15
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
      break;
 8002c9c:	e000      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c9e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	223d      	movs	r2, #61	@ 0x3d
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	223c      	movs	r2, #60	@ 0x3c
 8002cac:	2100      	movs	r1, #0
 8002cae:	5499      	strb	r1, [r3, r2]

  return status;
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	781b      	ldrb	r3, [r3, #0]
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b004      	add	sp, #16
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	ffceff88 	.word	0xffceff88
 8002cc4:	ffff00ff 	.word	0xffff00ff

08002cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3b      	ldr	r2, [pc, #236]	@ (8002dc8 <TIM_Base_SetConfig+0x100>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d008      	beq.n	8002cf2 <TIM_Base_SetConfig+0x2a>
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	2380      	movs	r3, #128	@ 0x80
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0x2a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a37      	ldr	r2, [pc, #220]	@ (8002dcc <TIM_Base_SetConfig+0x104>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2270      	movs	r2, #112	@ 0x70
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a30      	ldr	r2, [pc, #192]	@ (8002dc8 <TIM_Base_SetConfig+0x100>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d018      	beq.n	8002d3e <TIM_Base_SetConfig+0x76>
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	05db      	lsls	r3, r3, #23
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d013      	beq.n	8002d3e <TIM_Base_SetConfig+0x76>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2c      	ldr	r2, [pc, #176]	@ (8002dcc <TIM_Base_SetConfig+0x104>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00f      	beq.n	8002d3e <TIM_Base_SetConfig+0x76>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd0 <TIM_Base_SetConfig+0x108>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_Base_SetConfig+0x76>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd4 <TIM_Base_SetConfig+0x10c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_Base_SetConfig+0x76>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a29      	ldr	r2, [pc, #164]	@ (8002dd8 <TIM_Base_SetConfig+0x110>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_Base_SetConfig+0x76>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a28      	ldr	r2, [pc, #160]	@ (8002ddc <TIM_Base_SetConfig+0x114>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a27      	ldr	r2, [pc, #156]	@ (8002de0 <TIM_Base_SetConfig+0x118>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2280      	movs	r2, #128	@ 0x80
 8002d54:	4393      	bics	r3, r2
 8002d56:	001a      	movs	r2, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a13      	ldr	r2, [pc, #76]	@ (8002dc8 <TIM_Base_SetConfig+0x100>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <TIM_Base_SetConfig+0xce>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a14      	ldr	r2, [pc, #80]	@ (8002dd4 <TIM_Base_SetConfig+0x10c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <TIM_Base_SetConfig+0xce>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a13      	ldr	r2, [pc, #76]	@ (8002dd8 <TIM_Base_SetConfig+0x110>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <TIM_Base_SetConfig+0xce>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <TIM_Base_SetConfig+0x114>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d103      	bne.n	8002d9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4393      	bics	r3, r2
 8002db8:	001a      	movs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	611a      	str	r2, [r3, #16]
  }
}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40002000 	.word	0x40002000
 8002dd4:	40014000 	.word	0x40014000
 8002dd8:	40014400 	.word	0x40014400
 8002ddc:	40014800 	.word	0x40014800
 8002de0:	fffffcff 	.word	0xfffffcff

08002de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4393      	bics	r3, r2
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a32      	ldr	r2, [pc, #200]	@ (8002edc <TIM_OC1_SetConfig+0xf8>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2203      	movs	r2, #3
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	4393      	bics	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a28      	ldr	r2, [pc, #160]	@ (8002ee0 <TIM_OC1_SetConfig+0xfc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_OC1_SetConfig+0x76>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a27      	ldr	r2, [pc, #156]	@ (8002ee4 <TIM_OC1_SetConfig+0x100>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_OC1_SetConfig+0x76>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a26      	ldr	r2, [pc, #152]	@ (8002ee8 <TIM_OC1_SetConfig+0x104>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_OC1_SetConfig+0x76>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a25      	ldr	r2, [pc, #148]	@ (8002eec <TIM_OC1_SetConfig+0x108>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10c      	bne.n	8002e74 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4393      	bics	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4393      	bics	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee0 <TIM_OC1_SetConfig+0xfc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <TIM_OC1_SetConfig+0xb0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a19      	ldr	r2, [pc, #100]	@ (8002ee4 <TIM_OC1_SetConfig+0x100>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_OC1_SetConfig+0xb0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <TIM_OC1_SetConfig+0x104>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_OC1_SetConfig+0xb0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a17      	ldr	r2, [pc, #92]	@ (8002eec <TIM_OC1_SetConfig+0x108>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d111      	bne.n	8002eb8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4a16      	ldr	r2, [pc, #88]	@ (8002ef0 <TIM_OC1_SetConfig+0x10c>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4a15      	ldr	r2, [pc, #84]	@ (8002ef4 <TIM_OC1_SetConfig+0x110>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b006      	add	sp, #24
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	fffeff8f 	.word	0xfffeff8f
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40014400 	.word	0x40014400
 8002eec:	40014800 	.word	0x40014800
 8002ef0:	fffffeff 	.word	0xfffffeff
 8002ef4:	fffffdff 	.word	0xfffffdff

08002ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	4393      	bics	r3, r2
 8002f10:	001a      	movs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe0 <TIM_OC2_SetConfig+0xe8>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe4 <TIM_OC2_SetConfig+0xec>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2220      	movs	r2, #32
 8002f42:	4393      	bics	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a24      	ldr	r2, [pc, #144]	@ (8002fe8 <TIM_OC2_SetConfig+0xf0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10d      	bne.n	8002f76 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2280      	movs	r2, #128	@ 0x80
 8002f5e:	4393      	bics	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2240      	movs	r2, #64	@ 0x40
 8002f72:	4393      	bics	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <TIM_OC2_SetConfig+0xf0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_OC2_SetConfig+0x9e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1a      	ldr	r2, [pc, #104]	@ (8002fec <TIM_OC2_SetConfig+0xf4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_OC2_SetConfig+0x9e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <TIM_OC2_SetConfig+0xf8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_OC2_SetConfig+0x9e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <TIM_OC2_SetConfig+0xfc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d113      	bne.n	8002fbe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4a17      	ldr	r2, [pc, #92]	@ (8002ff8 <TIM_OC2_SetConfig+0x100>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4a16      	ldr	r2, [pc, #88]	@ (8002ffc <TIM_OC2_SetConfig+0x104>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	621a      	str	r2, [r3, #32]
}
 8002fd8:	46c0      	nop			@ (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b006      	add	sp, #24
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	feff8fff 	.word	0xfeff8fff
 8002fe4:	fffffcff 	.word	0xfffffcff
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40014400 	.word	0x40014400
 8002ff4:	40014800 	.word	0x40014800
 8002ff8:	fffffbff 	.word	0xfffffbff
 8002ffc:	fffff7ff 	.word	0xfffff7ff

08003000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a33      	ldr	r2, [pc, #204]	@ (80030e4 <TIM_OC3_SetConfig+0xe4>)
 8003016:	401a      	ands	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a2f      	ldr	r2, [pc, #188]	@ (80030e8 <TIM_OC3_SetConfig+0xe8>)
 800302c:	4013      	ands	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2203      	movs	r2, #3
 8003034:	4393      	bics	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	4a29      	ldr	r2, [pc, #164]	@ (80030ec <TIM_OC3_SetConfig+0xec>)
 8003046:	4013      	ands	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a25      	ldr	r2, [pc, #148]	@ (80030f0 <TIM_OC3_SetConfig+0xf0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10d      	bne.n	800307a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	4a24      	ldr	r2, [pc, #144]	@ (80030f4 <TIM_OC3_SetConfig+0xf4>)
 8003062:	4013      	ands	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4a20      	ldr	r2, [pc, #128]	@ (80030f8 <TIM_OC3_SetConfig+0xf8>)
 8003076:	4013      	ands	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1c      	ldr	r2, [pc, #112]	@ (80030f0 <TIM_OC3_SetConfig+0xf0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00b      	beq.n	800309a <TIM_OC3_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <TIM_OC3_SetConfig+0xfc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <TIM_OC3_SetConfig+0x9a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <TIM_OC3_SetConfig+0x100>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_OC3_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <TIM_OC3_SetConfig+0x104>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d113      	bne.n	80030c2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4a1a      	ldr	r2, [pc, #104]	@ (8003108 <TIM_OC3_SetConfig+0x108>)
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4a19      	ldr	r2, [pc, #100]	@ (800310c <TIM_OC3_SetConfig+0x10c>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	621a      	str	r2, [r3, #32]
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b006      	add	sp, #24
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	fffffeff 	.word	0xfffffeff
 80030e8:	fffeff8f 	.word	0xfffeff8f
 80030ec:	fffffdff 	.word	0xfffffdff
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	fffff7ff 	.word	0xfffff7ff
 80030f8:	fffffbff 	.word	0xfffffbff
 80030fc:	40014000 	.word	0x40014000
 8003100:	40014400 	.word	0x40014400
 8003104:	40014800 	.word	0x40014800
 8003108:	ffffefff 	.word	0xffffefff
 800310c:	ffffdfff 	.word	0xffffdfff

08003110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <TIM_OC4_SetConfig+0xb0>)
 8003126:	401a      	ands	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a22      	ldr	r2, [pc, #136]	@ (80031c4 <TIM_OC4_SetConfig+0xb4>)
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a21      	ldr	r2, [pc, #132]	@ (80031c8 <TIM_OC4_SetConfig+0xb8>)
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4a1d      	ldr	r2, [pc, #116]	@ (80031cc <TIM_OC4_SetConfig+0xbc>)
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	031b      	lsls	r3, r3, #12
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a19      	ldr	r2, [pc, #100]	@ (80031d0 <TIM_OC4_SetConfig+0xc0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00b      	beq.n	8003188 <TIM_OC4_SetConfig+0x78>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a18      	ldr	r2, [pc, #96]	@ (80031d4 <TIM_OC4_SetConfig+0xc4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <TIM_OC4_SetConfig+0x78>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a17      	ldr	r2, [pc, #92]	@ (80031d8 <TIM_OC4_SetConfig+0xc8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_OC4_SetConfig+0x78>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a16      	ldr	r2, [pc, #88]	@ (80031dc <TIM_OC4_SetConfig+0xcc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d109      	bne.n	800319c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4a15      	ldr	r2, [pc, #84]	@ (80031e0 <TIM_OC4_SetConfig+0xd0>)
 800318c:	4013      	ands	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b006      	add	sp, #24
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	ffffefff 	.word	0xffffefff
 80031c4:	feff8fff 	.word	0xfeff8fff
 80031c8:	fffffcff 	.word	0xfffffcff
 80031cc:	ffffdfff 	.word	0xffffdfff
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40014400 	.word	0x40014400
 80031dc:	40014800 	.word	0x40014800
 80031e0:	ffffbfff 	.word	0xffffbfff

080031e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a23      	ldr	r2, [pc, #140]	@ (8003288 <TIM_OC5_SetConfig+0xa4>)
 80031fa:	401a      	ands	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a1f      	ldr	r2, [pc, #124]	@ (800328c <TIM_OC5_SetConfig+0xa8>)
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4a1b      	ldr	r2, [pc, #108]	@ (8003290 <TIM_OC5_SetConfig+0xac>)
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a17      	ldr	r2, [pc, #92]	@ (8003294 <TIM_OC5_SetConfig+0xb0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00b      	beq.n	8003252 <TIM_OC5_SetConfig+0x6e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <TIM_OC5_SetConfig+0xb4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_OC5_SetConfig+0x6e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a15      	ldr	r2, [pc, #84]	@ (800329c <TIM_OC5_SetConfig+0xb8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_OC5_SetConfig+0x6e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <TIM_OC5_SetConfig+0xbc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d109      	bne.n	8003266 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4a0c      	ldr	r2, [pc, #48]	@ (8003288 <TIM_OC5_SetConfig+0xa4>)
 8003256:	4013      	ands	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	621a      	str	r2, [r3, #32]
}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b006      	add	sp, #24
 8003286:	bd80      	pop	{r7, pc}
 8003288:	fffeffff 	.word	0xfffeffff
 800328c:	fffeff8f 	.word	0xfffeff8f
 8003290:	fffdffff 	.word	0xfffdffff
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800

080032a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4a24      	ldr	r2, [pc, #144]	@ (800334c <TIM_OC6_SetConfig+0xa8>)
 80032ba:	401a      	ands	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a20      	ldr	r2, [pc, #128]	@ (8003350 <TIM_OC6_SetConfig+0xac>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <TIM_OC6_SetConfig+0xb0>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	051b      	lsls	r3, r3, #20
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <TIM_OC6_SetConfig+0xb4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00b      	beq.n	8003314 <TIM_OC6_SetConfig+0x70>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a17      	ldr	r2, [pc, #92]	@ (800335c <TIM_OC6_SetConfig+0xb8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <TIM_OC6_SetConfig+0x70>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a16      	ldr	r2, [pc, #88]	@ (8003360 <TIM_OC6_SetConfig+0xbc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC6_SetConfig+0x70>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a15      	ldr	r2, [pc, #84]	@ (8003364 <TIM_OC6_SetConfig+0xc0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d109      	bne.n	8003328 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	4a14      	ldr	r2, [pc, #80]	@ (8003368 <TIM_OC6_SetConfig+0xc4>)
 8003318:	4013      	ands	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	029b      	lsls	r3, r3, #10
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b006      	add	sp, #24
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	ffefffff 	.word	0xffefffff
 8003350:	feff8fff 	.word	0xfeff8fff
 8003354:	ffdfffff 	.word	0xffdfffff
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800
 8003368:	fffbffff 	.word	0xfffbffff

0800336c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	2201      	movs	r2, #1
 8003384:	4393      	bics	r3, r2
 8003386:	001a      	movs	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	22f0      	movs	r2, #240	@ 0xf0
 8003396:	4393      	bics	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	220a      	movs	r2, #10
 80033a8:	4393      	bics	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	621a      	str	r2, [r3, #32]
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b006      	add	sp, #24
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	2210      	movs	r2, #16
 80033e0:	4393      	bics	r3, r2
 80033e2:	001a      	movs	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003428 <TIM_TI2_ConfigInputStage+0x60>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	031b      	lsls	r3, r3, #12
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	22a0      	movs	r2, #160	@ 0xa0
 8003404:	4393      	bics	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b006      	add	sp, #24
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	ffff0fff 	.word	0xffff0fff

0800342c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a08      	ldr	r2, [pc, #32]	@ (8003460 <TIM_ITRx_SetConfig+0x34>)
 8003440:	4013      	ands	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	2207      	movs	r2, #7
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b004      	add	sp, #16
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	ffcfff8f 	.word	0xffcfff8f

08003464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	4a09      	ldr	r2, [pc, #36]	@ (80034a0 <TIM_ETR_SetConfig+0x3c>)
 800347c:	4013      	ands	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	431a      	orrs	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b006      	add	sp, #24
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	ffff00ff 	.word	0xffff00ff

080034a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	221f      	movs	r2, #31
 80034b4:	4013      	ands	r3, r2
 80034b6:	2201      	movs	r2, #1
 80034b8:	409a      	lsls	r2, r3
 80034ba:	0013      	movs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	43d2      	mvns	r2, r2
 80034c6:	401a      	ands	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a1a      	ldr	r2, [r3, #32]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	211f      	movs	r1, #31
 80034d4:	400b      	ands	r3, r1
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4099      	lsls	r1, r3
 80034da:	000b      	movs	r3, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b006      	add	sp, #24
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	223c      	movs	r2, #60	@ 0x3c
 80034fa:	5c9b      	ldrb	r3, [r3, r2]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003500:	2302      	movs	r3, #2
 8003502:	e055      	b.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	223c      	movs	r2, #60	@ 0x3c
 8003508:	2101      	movs	r1, #1
 800350a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	223d      	movs	r2, #61	@ 0x3d
 8003510:	2102      	movs	r1, #2
 8003512:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a23      	ldr	r2, [pc, #140]	@ (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a22      	ldr	r2, [pc, #136]	@ (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003532:	4013      	ands	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2270      	movs	r2, #112	@ 0x70
 8003544:	4393      	bics	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a16      	ldr	r2, [pc, #88]	@ (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00f      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	05db      	lsls	r3, r3, #23
 800356c:	429a      	cmp	r2, r3
 800356e:	d009      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a11      	ldr	r2, [pc, #68]	@ (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d10c      	bne.n	800359e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2280      	movs	r2, #128	@ 0x80
 8003588:	4393      	bics	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	4313      	orrs	r3, r2
 8003594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	223d      	movs	r2, #61	@ 0x3d
 80035a2:	2101      	movs	r1, #1
 80035a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	223c      	movs	r2, #60	@ 0x3c
 80035aa:	2100      	movs	r1, #0
 80035ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b004      	add	sp, #16
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	ff0fffff 	.word	0xff0fffff
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40014000 	.word	0x40014000

080035c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e046      	b.n	8003668 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2288      	movs	r2, #136	@ 0x88
 80035de:	589b      	ldr	r3, [r3, r2]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2284      	movs	r2, #132	@ 0x84
 80035e8:	2100      	movs	r1, #0
 80035ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7fd fc26 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2288      	movs	r2, #136	@ 0x88
 80035f8:	2124      	movs	r1, #36	@ 0x24
 80035fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	438a      	bics	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0018      	movs	r0, r3
 8003618:	f000 ff2e 	bl	8004478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	0018      	movs	r0, r3
 8003620:	f000 fc6c 	bl	8003efc <UART_SetConfig>
 8003624:	0003      	movs	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e01c      	b.n	8003668 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	490d      	ldr	r1, [pc, #52]	@ (8003670 <HAL_UART_Init+0xa8>)
 800363a:	400a      	ands	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	212a      	movs	r1, #42	@ 0x2a
 800364a:	438a      	bics	r2, r1
 800364c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2101      	movs	r1, #1
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 ffbd 	bl	80045e0 <UART_CheckIdleState>
 8003666:	0003      	movs	r3, r0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}
 8003670:	ffffb7ff 	.word	0xffffb7ff

08003674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	@ 0x28
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	1dbb      	adds	r3, r7, #6
 8003682:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2288      	movs	r2, #136	@ 0x88
 8003688:	589b      	ldr	r3, [r3, r2]
 800368a:	2b20      	cmp	r3, #32
 800368c:	d000      	beq.n	8003690 <HAL_UART_Transmit+0x1c>
 800368e:	e090      	b.n	80037b2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_UART_Transmit+0x2a>
 8003696:	1dbb      	adds	r3, r7, #6
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e088      	b.n	80037b4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	015b      	lsls	r3, r3, #5
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d109      	bne.n	80036c2 <HAL_UART_Transmit+0x4e>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2201      	movs	r2, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	d001      	beq.n	80036c2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e078      	b.n	80037b4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2290      	movs	r2, #144	@ 0x90
 80036c6:	2100      	movs	r1, #0
 80036c8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2288      	movs	r2, #136	@ 0x88
 80036ce:	2121      	movs	r1, #33	@ 0x21
 80036d0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036d2:	f7fd fd83 	bl	80011dc <HAL_GetTick>
 80036d6:	0003      	movs	r3, r0
 80036d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1dba      	adds	r2, r7, #6
 80036de:	2154      	movs	r1, #84	@ 0x54
 80036e0:	8812      	ldrh	r2, [r2, #0]
 80036e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1dba      	adds	r2, r7, #6
 80036e8:	2156      	movs	r1, #86	@ 0x56
 80036ea:	8812      	ldrh	r2, [r2, #0]
 80036ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	015b      	lsls	r3, r3, #5
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d108      	bne.n	800370c <HAL_UART_Transmit+0x98>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d104      	bne.n	800370c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e003      	b.n	8003714 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003714:	e030      	b.n	8003778 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	0013      	movs	r3, r2
 8003720:	2200      	movs	r2, #0
 8003722:	2180      	movs	r1, #128	@ 0x80
 8003724:	f001 f806 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d005      	beq.n	8003738 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2288      	movs	r2, #136	@ 0x88
 8003730:	2120      	movs	r1, #32
 8003732:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e03d      	b.n	80037b4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	001a      	movs	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	05d2      	lsls	r2, r2, #23
 800374a:	0dd2      	lsrs	r2, r2, #23
 800374c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	3302      	adds	r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	e007      	b.n	8003766 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	3301      	adds	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2256      	movs	r2, #86	@ 0x56
 800376a:	5a9b      	ldrh	r3, [r3, r2]
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b299      	uxth	r1, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2256      	movs	r2, #86	@ 0x56
 8003776:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2256      	movs	r2, #86	@ 0x56
 800377c:	5a9b      	ldrh	r3, [r3, r2]
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1c8      	bne.n	8003716 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	0013      	movs	r3, r2
 800378e:	2200      	movs	r2, #0
 8003790:	2140      	movs	r1, #64	@ 0x40
 8003792:	f000 ffcf 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8003796:	1e03      	subs	r3, r0, #0
 8003798:	d005      	beq.n	80037a6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2288      	movs	r2, #136	@ 0x88
 800379e:	2120      	movs	r1, #32
 80037a0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e006      	b.n	80037b4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2288      	movs	r2, #136	@ 0x88
 80037aa:	2120      	movs	r1, #32
 80037ac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b008      	add	sp, #32
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	1dbb      	adds	r3, r7, #6
 80037c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	228c      	movs	r2, #140	@ 0x8c
 80037ce:	589b      	ldr	r3, [r3, r2]
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d14a      	bne.n	800386a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_UART_Receive_IT+0x26>
 80037da:	1dbb      	adds	r3, r7, #6
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e042      	b.n	800386c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	015b      	lsls	r3, r3, #5
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d109      	bne.n	8003806 <HAL_UART_Receive_IT+0x4a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2201      	movs	r2, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	d001      	beq.n	8003806 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e032      	b.n	800386c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <HAL_UART_Receive_IT+0xb8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d020      	beq.n	8003858 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	2380      	movs	r3, #128	@ 0x80
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	4013      	ands	r3, r2
 8003822:	d019      	beq.n	8003858 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003824:	f3ef 8310 	mrs	r3, PRIMASK
 8003828:	613b      	str	r3, [r7, #16]
  return(result);
 800382a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	2301      	movs	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2180      	movs	r1, #128	@ 0x80
 8003846:	04c9      	lsls	r1, r1, #19
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f383 8810 	msr	PRIMASK, r3
}
 8003856:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003858:	1dbb      	adds	r3, r7, #6
 800385a:	881a      	ldrh	r2, [r3, #0]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 ffd7 	bl	8004814 <UART_Start_Receive_IT>
 8003866:	0003      	movs	r3, r0
 8003868:	e000      	b.n	800386c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b008      	add	sp, #32
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40008000 	.word	0x40008000

08003878 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b0aa      	sub	sp, #168	@ 0xa8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	22a4      	movs	r2, #164	@ 0xa4
 8003888:	18b9      	adds	r1, r7, r2
 800388a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	20a0      	movs	r0, #160	@ 0xa0
 8003894:	1839      	adds	r1, r7, r0
 8003896:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	249c      	movs	r4, #156	@ 0x9c
 80038a0:	1939      	adds	r1, r7, r4
 80038a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038a4:	0011      	movs	r1, r2
 80038a6:	18bb      	adds	r3, r7, r2
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4aa2      	ldr	r2, [pc, #648]	@ (8003b34 <HAL_UART_IRQHandler+0x2bc>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	2298      	movs	r2, #152	@ 0x98
 80038b0:	18bd      	adds	r5, r7, r2
 80038b2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80038b4:	18bb      	adds	r3, r7, r2
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11a      	bne.n	80038f2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2220      	movs	r2, #32
 80038c2:	4013      	ands	r3, r2
 80038c4:	d015      	beq.n	80038f2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038c6:	183b      	adds	r3, r7, r0
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2220      	movs	r2, #32
 80038cc:	4013      	ands	r3, r2
 80038ce:	d105      	bne.n	80038dc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038d0:	193b      	adds	r3, r7, r4
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2380      	movs	r3, #128	@ 0x80
 80038d6:	055b      	lsls	r3, r3, #21
 80038d8:	4013      	ands	r3, r2
 80038da:	d00a      	beq.n	80038f2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d100      	bne.n	80038e6 <HAL_UART_IRQHandler+0x6e>
 80038e4:	e2dc      	b.n	8003ea0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	0010      	movs	r0, r2
 80038ee:	4798      	blx	r3
      }
      return;
 80038f0:	e2d6      	b.n	8003ea0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038f2:	2398      	movs	r3, #152	@ 0x98
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d100      	bne.n	80038fe <HAL_UART_IRQHandler+0x86>
 80038fc:	e122      	b.n	8003b44 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80038fe:	239c      	movs	r3, #156	@ 0x9c
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a8c      	ldr	r2, [pc, #560]	@ (8003b38 <HAL_UART_IRQHandler+0x2c0>)
 8003906:	4013      	ands	r3, r2
 8003908:	d106      	bne.n	8003918 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800390a:	23a0      	movs	r3, #160	@ 0xa0
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a8a      	ldr	r2, [pc, #552]	@ (8003b3c <HAL_UART_IRQHandler+0x2c4>)
 8003912:	4013      	ands	r3, r2
 8003914:	d100      	bne.n	8003918 <HAL_UART_IRQHandler+0xa0>
 8003916:	e115      	b.n	8003b44 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003918:	23a4      	movs	r3, #164	@ 0xa4
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2201      	movs	r2, #1
 8003920:	4013      	ands	r3, r2
 8003922:	d012      	beq.n	800394a <HAL_UART_IRQHandler+0xd2>
 8003924:	23a0      	movs	r3, #160	@ 0xa0
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4013      	ands	r3, r2
 8003930:	d00b      	beq.n	800394a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2290      	movs	r2, #144	@ 0x90
 800393e:	589b      	ldr	r3, [r3, r2]
 8003940:	2201      	movs	r2, #1
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2190      	movs	r1, #144	@ 0x90
 8003948:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800394a:	23a4      	movs	r3, #164	@ 0xa4
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2202      	movs	r2, #2
 8003952:	4013      	ands	r3, r2
 8003954:	d011      	beq.n	800397a <HAL_UART_IRQHandler+0x102>
 8003956:	239c      	movs	r3, #156	@ 0x9c
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	4013      	ands	r3, r2
 8003960:	d00b      	beq.n	800397a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2202      	movs	r2, #2
 8003968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2290      	movs	r2, #144	@ 0x90
 800396e:	589b      	ldr	r3, [r3, r2]
 8003970:	2204      	movs	r2, #4
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2190      	movs	r1, #144	@ 0x90
 8003978:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800397a:	23a4      	movs	r3, #164	@ 0xa4
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2204      	movs	r2, #4
 8003982:	4013      	ands	r3, r2
 8003984:	d011      	beq.n	80039aa <HAL_UART_IRQHandler+0x132>
 8003986:	239c      	movs	r3, #156	@ 0x9c
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	4013      	ands	r3, r2
 8003990:	d00b      	beq.n	80039aa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2204      	movs	r2, #4
 8003998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2290      	movs	r2, #144	@ 0x90
 800399e:	589b      	ldr	r3, [r3, r2]
 80039a0:	2202      	movs	r2, #2
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2190      	movs	r1, #144	@ 0x90
 80039a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039aa:	23a4      	movs	r3, #164	@ 0xa4
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2208      	movs	r2, #8
 80039b2:	4013      	ands	r3, r2
 80039b4:	d017      	beq.n	80039e6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039b6:	23a0      	movs	r3, #160	@ 0xa0
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2220      	movs	r2, #32
 80039be:	4013      	ands	r3, r2
 80039c0:	d105      	bne.n	80039ce <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039c2:	239c      	movs	r3, #156	@ 0x9c
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5b      	ldr	r2, [pc, #364]	@ (8003b38 <HAL_UART_IRQHandler+0x2c0>)
 80039ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039cc:	d00b      	beq.n	80039e6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2208      	movs	r2, #8
 80039d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2290      	movs	r2, #144	@ 0x90
 80039da:	589b      	ldr	r3, [r3, r2]
 80039dc:	2208      	movs	r2, #8
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2190      	movs	r1, #144	@ 0x90
 80039e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039e6:	23a4      	movs	r3, #164	@ 0xa4
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	2380      	movs	r3, #128	@ 0x80
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	4013      	ands	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_UART_IRQHandler+0x1a4>
 80039f4:	23a0      	movs	r3, #160	@ 0xa0
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	04db      	lsls	r3, r3, #19
 80039fe:	4013      	ands	r3, r2
 8003a00:	d00c      	beq.n	8003a1c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2280      	movs	r2, #128	@ 0x80
 8003a08:	0112      	lsls	r2, r2, #4
 8003a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2290      	movs	r2, #144	@ 0x90
 8003a10:	589b      	ldr	r3, [r3, r2]
 8003a12:	2220      	movs	r2, #32
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2190      	movs	r1, #144	@ 0x90
 8003a1a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2290      	movs	r2, #144	@ 0x90
 8003a20:	589b      	ldr	r3, [r3, r2]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d100      	bne.n	8003a28 <HAL_UART_IRQHandler+0x1b0>
 8003a26:	e23d      	b.n	8003ea4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a28:	23a4      	movs	r3, #164	@ 0xa4
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	4013      	ands	r3, r2
 8003a32:	d015      	beq.n	8003a60 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a34:	23a0      	movs	r3, #160	@ 0xa0
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d106      	bne.n	8003a4e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a40:	239c      	movs	r3, #156	@ 0x9c
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	2380      	movs	r3, #128	@ 0x80
 8003a48:	055b      	lsls	r3, r3, #21
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d008      	beq.n	8003a60 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2290      	movs	r2, #144	@ 0x90
 8003a64:	589b      	ldr	r3, [r3, r2]
 8003a66:	2194      	movs	r1, #148	@ 0x94
 8003a68:	187a      	adds	r2, r7, r1
 8003a6a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2240      	movs	r2, #64	@ 0x40
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b40      	cmp	r3, #64	@ 0x40
 8003a78:	d004      	beq.n	8003a84 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2228      	movs	r2, #40	@ 0x28
 8003a80:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a82:	d04c      	beq.n	8003b1e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 ffe8 	bl	8004a5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2240      	movs	r2, #64	@ 0x40
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b40      	cmp	r3, #64	@ 0x40
 8003a98:	d13c      	bne.n	8003b14 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	2090      	movs	r0, #144	@ 0x90
 8003aa4:	183a      	adds	r2, r7, r0
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2140      	movs	r1, #64	@ 0x40
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	183b      	adds	r3, r7, r0
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2280      	movs	r2, #128	@ 0x80
 8003ad6:	589b      	ldr	r3, [r3, r2]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d016      	beq.n	8003b0a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2280      	movs	r2, #128	@ 0x80
 8003ae0:	589b      	ldr	r3, [r3, r2]
 8003ae2:	4a17      	ldr	r2, [pc, #92]	@ (8003b40 <HAL_UART_IRQHandler+0x2c8>)
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2280      	movs	r2, #128	@ 0x80
 8003aea:	589b      	ldr	r3, [r3, r2]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f7fd fcbf 	bl	8001470 <HAL_DMA_Abort_IT>
 8003af2:	1e03      	subs	r3, r0, #0
 8003af4:	d01c      	beq.n	8003b30 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2280      	movs	r2, #128	@ 0x80
 8003afa:	589b      	ldr	r3, [r3, r2]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	2180      	movs	r1, #128	@ 0x80
 8003b02:	5852      	ldr	r2, [r2, r1]
 8003b04:	0010      	movs	r0, r2
 8003b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e012      	b.n	8003b30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f9e1 	bl	8003ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b12:	e00d      	b.n	8003b30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f9dc 	bl	8003ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e008      	b.n	8003b30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f9d7 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2290      	movs	r2, #144	@ 0x90
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b2e:	e1b9      	b.n	8003ea4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b32:	e1b7      	b.n	8003ea4 <HAL_UART_IRQHandler+0x62c>
 8003b34:	0000080f 	.word	0x0000080f
 8003b38:	10000001 	.word	0x10000001
 8003b3c:	04000120 	.word	0x04000120
 8003b40:	08004b29 	.word	0x08004b29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d000      	beq.n	8003b4e <HAL_UART_IRQHandler+0x2d6>
 8003b4c:	e13e      	b.n	8003dcc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b4e:	23a4      	movs	r3, #164	@ 0xa4
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2210      	movs	r2, #16
 8003b56:	4013      	ands	r3, r2
 8003b58:	d100      	bne.n	8003b5c <HAL_UART_IRQHandler+0x2e4>
 8003b5a:	e137      	b.n	8003dcc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b5c:	23a0      	movs	r3, #160	@ 0xa0
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2210      	movs	r2, #16
 8003b64:	4013      	ands	r3, r2
 8003b66:	d100      	bne.n	8003b6a <HAL_UART_IRQHandler+0x2f2>
 8003b68:	e130      	b.n	8003dcc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2240      	movs	r2, #64	@ 0x40
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d000      	beq.n	8003b82 <HAL_UART_IRQHandler+0x30a>
 8003b80:	e0a4      	b.n	8003ccc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2280      	movs	r2, #128	@ 0x80
 8003b86:	589b      	ldr	r3, [r3, r2]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	217e      	movs	r1, #126	@ 0x7e
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d100      	bne.n	8003b9c <HAL_UART_IRQHandler+0x324>
 8003b9a:	e185      	b.n	8003ea8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	225c      	movs	r2, #92	@ 0x5c
 8003ba0:	5a9b      	ldrh	r3, [r3, r2]
 8003ba2:	187a      	adds	r2, r7, r1
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d300      	bcc.n	8003bac <HAL_UART_IRQHandler+0x334>
 8003baa:	e17d      	b.n	8003ea8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	187a      	adds	r2, r7, r1
 8003bb0:	215e      	movs	r1, #94	@ 0x5e
 8003bb2:	8812      	ldrh	r2, [r2, #0]
 8003bb4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	589b      	ldr	r3, [r3, r2]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d170      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bce:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd6:	f383 8810 	msr	PRIMASK, r3
}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	49b4      	ldr	r1, [pc, #720]	@ (8003eb8 <HAL_UART_IRQHandler+0x640>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf2:	f383 8810 	msr	PRIMASK, r3
}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c00:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c02:	2301      	movs	r3, #1
 8003c04:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c08:	f383 8810 	msr	PRIMASK, r3
}
 8003c0c:	46c0      	nop			@ (mov r8, r8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	438a      	bics	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]
 8003c1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c20:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c24:	f383 8810 	msr	PRIMASK, r3
}
 8003c28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c34:	2301      	movs	r3, #1
 8003c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3a:	f383 8810 	msr	PRIMASK, r3
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2140      	movs	r1, #64	@ 0x40
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c52:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c56:	f383 8810 	msr	PRIMASK, r3
}
 8003c5a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	228c      	movs	r2, #140	@ 0x8c
 8003c60:	2120      	movs	r1, #32
 8003c62:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c74:	2301      	movs	r3, #1
 8003c76:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2110      	movs	r1, #16
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2280      	movs	r2, #128	@ 0x80
 8003ca0:	589b      	ldr	r3, [r3, r2]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7fd fb82 	bl	80013ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	225c      	movs	r2, #92	@ 0x5c
 8003cb2:	5a9a      	ldrh	r2, [r3, r2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	215e      	movs	r1, #94	@ 0x5e
 8003cb8:	5a5b      	ldrh	r3, [r3, r1]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f90d 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cca:	e0ed      	b.n	8003ea8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	225c      	movs	r2, #92	@ 0x5c
 8003cd0:	5a99      	ldrh	r1, [r3, r2]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	225e      	movs	r2, #94	@ 0x5e
 8003cd6:	5a9b      	ldrh	r3, [r3, r2]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	208e      	movs	r0, #142	@ 0x8e
 8003cdc:	183b      	adds	r3, r7, r0
 8003cde:	1a8a      	subs	r2, r1, r2
 8003ce0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	225e      	movs	r2, #94	@ 0x5e
 8003ce6:	5a9b      	ldrh	r3, [r3, r2]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d100      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x478>
 8003cee:	e0dd      	b.n	8003eac <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003cf0:	183b      	adds	r3, r7, r0
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d100      	bne.n	8003cfa <HAL_UART_IRQHandler+0x482>
 8003cf8:	e0d8      	b.n	8003eac <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d00:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d02:	2488      	movs	r4, #136	@ 0x88
 8003d04:	193a      	adds	r2, r7, r4
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f383 8810 	msr	PRIMASK, r3
}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4967      	ldr	r1, [pc, #412]	@ (8003ebc <HAL_UART_IRQHandler+0x644>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	193b      	adds	r3, r7, r4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f383 8810 	msr	PRIMASK, r3
}
 8003d30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d38:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d3a:	2484      	movs	r4, #132	@ 0x84
 8003d3c:	193a      	adds	r2, r7, r4
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	2301      	movs	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f383 8810 	msr	PRIMASK, r3
}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	495a      	ldr	r1, [pc, #360]	@ (8003ec0 <HAL_UART_IRQHandler+0x648>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	193b      	adds	r3, r7, r4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	228c      	movs	r2, #140	@ 0x8c
 8003d6e:	2120      	movs	r1, #32
 8003d70:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d86:	2480      	movs	r4, #128	@ 0x80
 8003d88:	193a      	adds	r2, r7, r4
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2110      	movs	r1, #16
 8003da4:	438a      	bics	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	193b      	adds	r3, r7, r4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db0:	f383 8810 	msr	PRIMASK, r3
}
 8003db4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dbc:	183b      	adds	r3, r7, r0
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 f88d 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dca:	e06f      	b.n	8003eac <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dcc:	23a4      	movs	r3, #164	@ 0xa4
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	2380      	movs	r3, #128	@ 0x80
 8003dd4:	035b      	lsls	r3, r3, #13
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d010      	beq.n	8003dfc <HAL_UART_IRQHandler+0x584>
 8003dda:	239c      	movs	r3, #156	@ 0x9c
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	03db      	lsls	r3, r3, #15
 8003de4:	4013      	ands	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2280      	movs	r2, #128	@ 0x80
 8003dee:	0352      	lsls	r2, r2, #13
 8003df0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f001 fbeb 	bl	80055d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dfa:	e05a      	b.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003dfc:	23a4      	movs	r3, #164	@ 0xa4
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2280      	movs	r2, #128	@ 0x80
 8003e04:	4013      	ands	r3, r2
 8003e06:	d016      	beq.n	8003e36 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e08:	23a0      	movs	r3, #160	@ 0xa0
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2280      	movs	r2, #128	@ 0x80
 8003e10:	4013      	ands	r3, r2
 8003e12:	d106      	bne.n	8003e22 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e14:	239c      	movs	r3, #156	@ 0x9c
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	2380      	movs	r3, #128	@ 0x80
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d042      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	0010      	movs	r0, r2
 8003e32:	4798      	blx	r3
    }
    return;
 8003e34:	e03c      	b.n	8003eb0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e36:	23a4      	movs	r3, #164	@ 0xa4
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2240      	movs	r2, #64	@ 0x40
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d00a      	beq.n	8003e58 <HAL_UART_IRQHandler+0x5e0>
 8003e42:	23a0      	movs	r3, #160	@ 0xa0
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2240      	movs	r2, #64	@ 0x40
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f000 fe80 	bl	8004b56 <UART_EndTransmit_IT>
    return;
 8003e56:	e02c      	b.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e58:	23a4      	movs	r3, #164	@ 0xa4
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	4013      	ands	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <HAL_UART_IRQHandler+0x606>
 8003e66:	23a0      	movs	r3, #160	@ 0xa0
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	@ 0x80
 8003e6e:	05db      	lsls	r3, r3, #23
 8003e70:	4013      	ands	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	0018      	movs	r0, r3
 8003e78:	f001 fbba 	bl	80055f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e7c:	e019      	b.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e7e:	23a4      	movs	r3, #164	@ 0xa4
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2380      	movs	r3, #128	@ 0x80
 8003e86:	045b      	lsls	r3, r3, #17
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d012      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
 8003e8c:	23a0      	movs	r3, #160	@ 0xa0
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da0d      	bge.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f001 fba1 	bl	80055e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e9e:	e008      	b.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	e006      	b.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	e004      	b.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	e002      	b.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003eac:	46c0      	nop			@ (mov r8, r8)
 8003eae:	e000      	b.n	8003eb2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003eb0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b02a      	add	sp, #168	@ 0xa8
 8003eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb8:	fffffeff 	.word	0xfffffeff
 8003ebc:	fffffedf 	.word	0xfffffedf
 8003ec0:	effffffe 	.word	0xeffffffe

08003ec4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003edc:	46c0      	nop			@ (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	000a      	movs	r2, r1
 8003eee:	1cbb      	adds	r3, r7, #2
 8003ef0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	b090      	sub	sp, #64	@ 0x40
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f04:	231a      	movs	r3, #26
 8003f06:	2220      	movs	r2, #32
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4aaf      	ldr	r2, [pc, #700]	@ (80041ec <UART_SetConfig+0x2f0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4aaa      	ldr	r2, [pc, #680]	@ (80041f0 <UART_SetConfig+0x2f4>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	68d9      	ldr	r1, [r3, #12]
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	0003      	movs	r3, r0
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4aa4      	ldr	r2, [pc, #656]	@ (80041f4 <UART_SetConfig+0x2f8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4a9f      	ldr	r2, [pc, #636]	@ (80041f8 <UART_SetConfig+0x2fc>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	220f      	movs	r2, #15
 8003f90:	4393      	bics	r3, r2
 8003f92:	0018      	movs	r0, r3
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a95      	ldr	r2, [pc, #596]	@ (80041fc <UART_SetConfig+0x300>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d131      	bne.n	8004010 <UART_SetConfig+0x114>
 8003fac:	4b94      	ldr	r3, [pc, #592]	@ (8004200 <UART_SetConfig+0x304>)
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d01d      	beq.n	8003ff4 <UART_SetConfig+0xf8>
 8003fb8:	d823      	bhi.n	8004002 <UART_SetConfig+0x106>
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d00c      	beq.n	8003fd8 <UART_SetConfig+0xdc>
 8003fbe:	d820      	bhi.n	8004002 <UART_SetConfig+0x106>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <UART_SetConfig+0xce>
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d00e      	beq.n	8003fe6 <UART_SetConfig+0xea>
 8003fc8:	e01b      	b.n	8004002 <UART_SetConfig+0x106>
 8003fca:	231b      	movs	r3, #27
 8003fcc:	2220      	movs	r2, #32
 8003fce:	189b      	adds	r3, r3, r2
 8003fd0:	19db      	adds	r3, r3, r7
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e0b4      	b.n	8004142 <UART_SetConfig+0x246>
 8003fd8:	231b      	movs	r3, #27
 8003fda:	2220      	movs	r2, #32
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	19db      	adds	r3, r3, r7
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	e0ad      	b.n	8004142 <UART_SetConfig+0x246>
 8003fe6:	231b      	movs	r3, #27
 8003fe8:	2220      	movs	r2, #32
 8003fea:	189b      	adds	r3, r3, r2
 8003fec:	19db      	adds	r3, r3, r7
 8003fee:	2204      	movs	r2, #4
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e0a6      	b.n	8004142 <UART_SetConfig+0x246>
 8003ff4:	231b      	movs	r3, #27
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	189b      	adds	r3, r3, r2
 8003ffa:	19db      	adds	r3, r3, r7
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e09f      	b.n	8004142 <UART_SetConfig+0x246>
 8004002:	231b      	movs	r3, #27
 8004004:	2220      	movs	r2, #32
 8004006:	189b      	adds	r3, r3, r2
 8004008:	19db      	adds	r3, r3, r7
 800400a:	2210      	movs	r2, #16
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e098      	b.n	8004142 <UART_SetConfig+0x246>
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7b      	ldr	r2, [pc, #492]	@ (8004204 <UART_SetConfig+0x308>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d131      	bne.n	800407e <UART_SetConfig+0x182>
 800401a:	4b79      	ldr	r3, [pc, #484]	@ (8004200 <UART_SetConfig+0x304>)
 800401c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401e:	220c      	movs	r2, #12
 8004020:	4013      	ands	r3, r2
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d01d      	beq.n	8004062 <UART_SetConfig+0x166>
 8004026:	d823      	bhi.n	8004070 <UART_SetConfig+0x174>
 8004028:	2b08      	cmp	r3, #8
 800402a:	d00c      	beq.n	8004046 <UART_SetConfig+0x14a>
 800402c:	d820      	bhi.n	8004070 <UART_SetConfig+0x174>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <UART_SetConfig+0x13c>
 8004032:	2b04      	cmp	r3, #4
 8004034:	d00e      	beq.n	8004054 <UART_SetConfig+0x158>
 8004036:	e01b      	b.n	8004070 <UART_SetConfig+0x174>
 8004038:	231b      	movs	r3, #27
 800403a:	2220      	movs	r2, #32
 800403c:	189b      	adds	r3, r3, r2
 800403e:	19db      	adds	r3, r3, r7
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e07d      	b.n	8004142 <UART_SetConfig+0x246>
 8004046:	231b      	movs	r3, #27
 8004048:	2220      	movs	r2, #32
 800404a:	189b      	adds	r3, r3, r2
 800404c:	19db      	adds	r3, r3, r7
 800404e:	2202      	movs	r2, #2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e076      	b.n	8004142 <UART_SetConfig+0x246>
 8004054:	231b      	movs	r3, #27
 8004056:	2220      	movs	r2, #32
 8004058:	189b      	adds	r3, r3, r2
 800405a:	19db      	adds	r3, r3, r7
 800405c:	2204      	movs	r2, #4
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	e06f      	b.n	8004142 <UART_SetConfig+0x246>
 8004062:	231b      	movs	r3, #27
 8004064:	2220      	movs	r2, #32
 8004066:	189b      	adds	r3, r3, r2
 8004068:	19db      	adds	r3, r3, r7
 800406a:	2208      	movs	r2, #8
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e068      	b.n	8004142 <UART_SetConfig+0x246>
 8004070:	231b      	movs	r3, #27
 8004072:	2220      	movs	r2, #32
 8004074:	189b      	adds	r3, r3, r2
 8004076:	19db      	adds	r3, r3, r7
 8004078:	2210      	movs	r2, #16
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e061      	b.n	8004142 <UART_SetConfig+0x246>
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a61      	ldr	r2, [pc, #388]	@ (8004208 <UART_SetConfig+0x30c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d106      	bne.n	8004096 <UART_SetConfig+0x19a>
 8004088:	231b      	movs	r3, #27
 800408a:	2220      	movs	r2, #32
 800408c:	189b      	adds	r3, r3, r2
 800408e:	19db      	adds	r3, r3, r7
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e055      	b.n	8004142 <UART_SetConfig+0x246>
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5c      	ldr	r2, [pc, #368]	@ (800420c <UART_SetConfig+0x310>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d106      	bne.n	80040ae <UART_SetConfig+0x1b2>
 80040a0:	231b      	movs	r3, #27
 80040a2:	2220      	movs	r2, #32
 80040a4:	189b      	adds	r3, r3, r2
 80040a6:	19db      	adds	r3, r3, r7
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e049      	b.n	8004142 <UART_SetConfig+0x246>
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a50      	ldr	r2, [pc, #320]	@ (80041f4 <UART_SetConfig+0x2f8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d13e      	bne.n	8004136 <UART_SetConfig+0x23a>
 80040b8:	4b51      	ldr	r3, [pc, #324]	@ (8004200 <UART_SetConfig+0x304>)
 80040ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040bc:	23c0      	movs	r3, #192	@ 0xc0
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	4013      	ands	r3, r2
 80040c2:	22c0      	movs	r2, #192	@ 0xc0
 80040c4:	0112      	lsls	r2, r2, #4
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d027      	beq.n	800411a <UART_SetConfig+0x21e>
 80040ca:	22c0      	movs	r2, #192	@ 0xc0
 80040cc:	0112      	lsls	r2, r2, #4
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d82a      	bhi.n	8004128 <UART_SetConfig+0x22c>
 80040d2:	2280      	movs	r2, #128	@ 0x80
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d011      	beq.n	80040fe <UART_SetConfig+0x202>
 80040da:	2280      	movs	r2, #128	@ 0x80
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	4293      	cmp	r3, r2
 80040e0:	d822      	bhi.n	8004128 <UART_SetConfig+0x22c>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <UART_SetConfig+0x1f4>
 80040e6:	2280      	movs	r2, #128	@ 0x80
 80040e8:	00d2      	lsls	r2, r2, #3
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00e      	beq.n	800410c <UART_SetConfig+0x210>
 80040ee:	e01b      	b.n	8004128 <UART_SetConfig+0x22c>
 80040f0:	231b      	movs	r3, #27
 80040f2:	2220      	movs	r2, #32
 80040f4:	189b      	adds	r3, r3, r2
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e021      	b.n	8004142 <UART_SetConfig+0x246>
 80040fe:	231b      	movs	r3, #27
 8004100:	2220      	movs	r2, #32
 8004102:	189b      	adds	r3, r3, r2
 8004104:	19db      	adds	r3, r3, r7
 8004106:	2202      	movs	r2, #2
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e01a      	b.n	8004142 <UART_SetConfig+0x246>
 800410c:	231b      	movs	r3, #27
 800410e:	2220      	movs	r2, #32
 8004110:	189b      	adds	r3, r3, r2
 8004112:	19db      	adds	r3, r3, r7
 8004114:	2204      	movs	r2, #4
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	e013      	b.n	8004142 <UART_SetConfig+0x246>
 800411a:	231b      	movs	r3, #27
 800411c:	2220      	movs	r2, #32
 800411e:	189b      	adds	r3, r3, r2
 8004120:	19db      	adds	r3, r3, r7
 8004122:	2208      	movs	r2, #8
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e00c      	b.n	8004142 <UART_SetConfig+0x246>
 8004128:	231b      	movs	r3, #27
 800412a:	2220      	movs	r2, #32
 800412c:	189b      	adds	r3, r3, r2
 800412e:	19db      	adds	r3, r3, r7
 8004130:	2210      	movs	r2, #16
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x246>
 8004136:	231b      	movs	r3, #27
 8004138:	2220      	movs	r2, #32
 800413a:	189b      	adds	r3, r3, r2
 800413c:	19db      	adds	r3, r3, r7
 800413e:	2210      	movs	r2, #16
 8004140:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2b      	ldr	r2, [pc, #172]	@ (80041f4 <UART_SetConfig+0x2f8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d000      	beq.n	800414e <UART_SetConfig+0x252>
 800414c:	e0a9      	b.n	80042a2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800414e:	231b      	movs	r3, #27
 8004150:	2220      	movs	r2, #32
 8004152:	189b      	adds	r3, r3, r2
 8004154:	19db      	adds	r3, r3, r7
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d015      	beq.n	8004188 <UART_SetConfig+0x28c>
 800415c:	dc18      	bgt.n	8004190 <UART_SetConfig+0x294>
 800415e:	2b04      	cmp	r3, #4
 8004160:	d00d      	beq.n	800417e <UART_SetConfig+0x282>
 8004162:	dc15      	bgt.n	8004190 <UART_SetConfig+0x294>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <UART_SetConfig+0x272>
 8004168:	2b02      	cmp	r3, #2
 800416a:	d005      	beq.n	8004178 <UART_SetConfig+0x27c>
 800416c:	e010      	b.n	8004190 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416e:	f7fe f865 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8004172:	0003      	movs	r3, r0
 8004174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004176:	e014      	b.n	80041a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004178:	4b25      	ldr	r3, [pc, #148]	@ (8004210 <UART_SetConfig+0x314>)
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800417c:	e011      	b.n	80041a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417e:	f7fd ffd1 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 8004182:	0003      	movs	r3, r0
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004186:	e00c      	b.n	80041a2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004188:	2380      	movs	r3, #128	@ 0x80
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800418e:	e008      	b.n	80041a2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004194:	231a      	movs	r3, #26
 8004196:	2220      	movs	r2, #32
 8004198:	189b      	adds	r3, r3, r2
 800419a:	19db      	adds	r3, r3, r7
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
        break;
 80041a0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d100      	bne.n	80041aa <UART_SetConfig+0x2ae>
 80041a8:	e14b      	b.n	8004442 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041ae:	4b19      	ldr	r3, [pc, #100]	@ (8004214 <UART_SetConfig+0x318>)
 80041b0:	0052      	lsls	r2, r2, #1
 80041b2:	5ad3      	ldrh	r3, [r2, r3]
 80041b4:	0019      	movs	r1, r3
 80041b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041b8:	f7fb ffb6 	bl	8000128 <__udivsi3>
 80041bc:	0003      	movs	r3, r0
 80041be:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	0013      	movs	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	189b      	adds	r3, r3, r2
 80041ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d305      	bcc.n	80041dc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041d8:	429a      	cmp	r2, r3
 80041da:	d91d      	bls.n	8004218 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80041dc:	231a      	movs	r3, #26
 80041de:	2220      	movs	r2, #32
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	19db      	adds	r3, r3, r7
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e12b      	b.n	8004442 <UART_SetConfig+0x546>
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	cfff69f3 	.word	0xcfff69f3
 80041f0:	ffffcfff 	.word	0xffffcfff
 80041f4:	40008000 	.word	0x40008000
 80041f8:	11fff4ff 	.word	0x11fff4ff
 80041fc:	40013800 	.word	0x40013800
 8004200:	40021000 	.word	0x40021000
 8004204:	40004400 	.word	0x40004400
 8004208:	40004800 	.word	0x40004800
 800420c:	40004c00 	.word	0x40004c00
 8004210:	00f42400 	.word	0x00f42400
 8004214:	0800644c 	.word	0x0800644c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004224:	4b92      	ldr	r3, [pc, #584]	@ (8004470 <UART_SetConfig+0x574>)
 8004226:	0052      	lsls	r2, r2, #1
 8004228:	5ad3      	ldrh	r3, [r2, r3]
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	69b8      	ldr	r0, [r7, #24]
 8004236:	69f9      	ldr	r1, [r7, #28]
 8004238:	f7fc f8ec 	bl	8000414 <__aeabi_uldivmod>
 800423c:	0002      	movs	r2, r0
 800423e:	000b      	movs	r3, r1
 8004240:	0e11      	lsrs	r1, r2, #24
 8004242:	021d      	lsls	r5, r3, #8
 8004244:	430d      	orrs	r5, r1
 8004246:	0214      	lsls	r4, r2, #8
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	1900      	adds	r0, r0, r4
 800425a:	4169      	adcs	r1, r5
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f7fc f8d3 	bl	8000414 <__aeabi_uldivmod>
 800426e:	0002      	movs	r2, r0
 8004270:	000b      	movs	r3, r1
 8004272:	0013      	movs	r3, r2
 8004274:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004278:	23c0      	movs	r3, #192	@ 0xc0
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d309      	bcc.n	8004294 <UART_SetConfig+0x398>
 8004280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004282:	2380      	movs	r3, #128	@ 0x80
 8004284:	035b      	lsls	r3, r3, #13
 8004286:	429a      	cmp	r2, r3
 8004288:	d204      	bcs.n	8004294 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	e0d6      	b.n	8004442 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004294:	231a      	movs	r3, #26
 8004296:	2220      	movs	r2, #32
 8004298:	189b      	adds	r3, r3, r2
 800429a:	19db      	adds	r3, r3, r7
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e0cf      	b.n	8004442 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	2380      	movs	r3, #128	@ 0x80
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d000      	beq.n	80042b0 <UART_SetConfig+0x3b4>
 80042ae:	e070      	b.n	8004392 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80042b0:	231b      	movs	r3, #27
 80042b2:	2220      	movs	r2, #32
 80042b4:	189b      	adds	r3, r3, r2
 80042b6:	19db      	adds	r3, r3, r7
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d015      	beq.n	80042ea <UART_SetConfig+0x3ee>
 80042be:	dc18      	bgt.n	80042f2 <UART_SetConfig+0x3f6>
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d00d      	beq.n	80042e0 <UART_SetConfig+0x3e4>
 80042c4:	dc15      	bgt.n	80042f2 <UART_SetConfig+0x3f6>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <UART_SetConfig+0x3d4>
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d005      	beq.n	80042da <UART_SetConfig+0x3de>
 80042ce:	e010      	b.n	80042f2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7fd ffb4 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 80042d4:	0003      	movs	r3, r0
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042d8:	e014      	b.n	8004304 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042da:	4b66      	ldr	r3, [pc, #408]	@ (8004474 <UART_SetConfig+0x578>)
 80042dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042de:	e011      	b.n	8004304 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e0:	f7fd ff20 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80042e4:	0003      	movs	r3, r0
 80042e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042e8:	e00c      	b.n	8004304 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ea:	2380      	movs	r3, #128	@ 0x80
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042f0:	e008      	b.n	8004304 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80042f6:	231a      	movs	r3, #26
 80042f8:	2220      	movs	r2, #32
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	19db      	adds	r3, r3, r7
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
        break;
 8004302:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d100      	bne.n	800430c <UART_SetConfig+0x410>
 800430a:	e09a      	b.n	8004442 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004310:	4b57      	ldr	r3, [pc, #348]	@ (8004470 <UART_SetConfig+0x574>)
 8004312:	0052      	lsls	r2, r2, #1
 8004314:	5ad3      	ldrh	r3, [r2, r3]
 8004316:	0019      	movs	r1, r3
 8004318:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800431a:	f7fb ff05 	bl	8000128 <__udivsi3>
 800431e:	0003      	movs	r3, r0
 8004320:	005a      	lsls	r2, r3, #1
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	18d2      	adds	r2, r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	0019      	movs	r1, r3
 8004330:	0010      	movs	r0, r2
 8004332:	f7fb fef9 	bl	8000128 <__udivsi3>
 8004336:	0003      	movs	r3, r0
 8004338:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d921      	bls.n	8004384 <UART_SetConfig+0x488>
 8004340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004342:	2380      	movs	r3, #128	@ 0x80
 8004344:	025b      	lsls	r3, r3, #9
 8004346:	429a      	cmp	r2, r3
 8004348:	d21c      	bcs.n	8004384 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	b29a      	uxth	r2, r3
 800434e:	200e      	movs	r0, #14
 8004350:	2420      	movs	r4, #32
 8004352:	1903      	adds	r3, r0, r4
 8004354:	19db      	adds	r3, r3, r7
 8004356:	210f      	movs	r1, #15
 8004358:	438a      	bics	r2, r1
 800435a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	b29b      	uxth	r3, r3
 8004362:	2207      	movs	r2, #7
 8004364:	4013      	ands	r3, r2
 8004366:	b299      	uxth	r1, r3
 8004368:	1903      	adds	r3, r0, r4
 800436a:	19db      	adds	r3, r3, r7
 800436c:	1902      	adds	r2, r0, r4
 800436e:	19d2      	adds	r2, r2, r7
 8004370:	8812      	ldrh	r2, [r2, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1902      	adds	r2, r0, r4
 800437c:	19d2      	adds	r2, r2, r7
 800437e:	8812      	ldrh	r2, [r2, #0]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	e05e      	b.n	8004442 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004384:	231a      	movs	r3, #26
 8004386:	2220      	movs	r2, #32
 8004388:	189b      	adds	r3, r3, r2
 800438a:	19db      	adds	r3, r3, r7
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e057      	b.n	8004442 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004392:	231b      	movs	r3, #27
 8004394:	2220      	movs	r2, #32
 8004396:	189b      	adds	r3, r3, r2
 8004398:	19db      	adds	r3, r3, r7
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d015      	beq.n	80043cc <UART_SetConfig+0x4d0>
 80043a0:	dc18      	bgt.n	80043d4 <UART_SetConfig+0x4d8>
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00d      	beq.n	80043c2 <UART_SetConfig+0x4c6>
 80043a6:	dc15      	bgt.n	80043d4 <UART_SetConfig+0x4d8>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <UART_SetConfig+0x4b6>
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d005      	beq.n	80043bc <UART_SetConfig+0x4c0>
 80043b0:	e010      	b.n	80043d4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b2:	f7fd ff43 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 80043b6:	0003      	movs	r3, r0
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ba:	e014      	b.n	80043e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004474 <UART_SetConfig+0x578>)
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043c0:	e011      	b.n	80043e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c2:	f7fd feaf 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80043c6:	0003      	movs	r3, r0
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ca:	e00c      	b.n	80043e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043cc:	2380      	movs	r3, #128	@ 0x80
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043d2:	e008      	b.n	80043e6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80043d8:	231a      	movs	r3, #26
 80043da:	2220      	movs	r2, #32
 80043dc:	189b      	adds	r3, r3, r2
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
        break;
 80043e4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80043e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02a      	beq.n	8004442 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004470 <UART_SetConfig+0x574>)
 80043f2:	0052      	lsls	r2, r2, #1
 80043f4:	5ad3      	ldrh	r3, [r2, r3]
 80043f6:	0019      	movs	r1, r3
 80043f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80043fa:	f7fb fe95 	bl	8000128 <__udivsi3>
 80043fe:	0003      	movs	r3, r0
 8004400:	001a      	movs	r2, r3
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	18d2      	adds	r2, r2, r3
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0019      	movs	r1, r3
 8004410:	0010      	movs	r0, r2
 8004412:	f7fb fe89 	bl	8000128 <__udivsi3>
 8004416:	0003      	movs	r3, r0
 8004418:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	2b0f      	cmp	r3, #15
 800441e:	d90a      	bls.n	8004436 <UART_SetConfig+0x53a>
 8004420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	025b      	lsls	r3, r3, #9
 8004426:	429a      	cmp	r2, r3
 8004428:	d205      	bcs.n	8004436 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	b29a      	uxth	r2, r3
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e005      	b.n	8004442 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004436:	231a      	movs	r3, #26
 8004438:	2220      	movs	r2, #32
 800443a:	189b      	adds	r3, r3, r2
 800443c:	19db      	adds	r3, r3, r7
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	226a      	movs	r2, #106	@ 0x6a
 8004446:	2101      	movs	r1, #1
 8004448:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	2268      	movs	r2, #104	@ 0x68
 800444e:	2101      	movs	r1, #1
 8004450:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	2200      	movs	r2, #0
 8004456:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	2200      	movs	r2, #0
 800445c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800445e:	231a      	movs	r3, #26
 8004460:	2220      	movs	r2, #32
 8004462:	189b      	adds	r3, r3, r2
 8004464:	19db      	adds	r3, r3, r7
 8004466:	781b      	ldrb	r3, [r3, #0]
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b010      	add	sp, #64	@ 0x40
 800446e:	bdb0      	pop	{r4, r5, r7, pc}
 8004470:	0800644c 	.word	0x0800644c
 8004474:	00f42400 	.word	0x00f42400

08004478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004484:	2208      	movs	r2, #8
 8004486:	4013      	ands	r3, r2
 8004488:	d00b      	beq.n	80044a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a4a      	ldr	r2, [pc, #296]	@ (80045bc <UART_AdvFeatureConfig+0x144>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	2201      	movs	r2, #1
 80044a8:	4013      	ands	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4a43      	ldr	r2, [pc, #268]	@ (80045c0 <UART_AdvFeatureConfig+0x148>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	0019      	movs	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	2202      	movs	r2, #2
 80044ca:	4013      	ands	r3, r2
 80044cc:	d00b      	beq.n	80044e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a3b      	ldr	r2, [pc, #236]	@ (80045c4 <UART_AdvFeatureConfig+0x14c>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	0019      	movs	r1, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	2204      	movs	r2, #4
 80044ec:	4013      	ands	r3, r2
 80044ee:	d00b      	beq.n	8004508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4a34      	ldr	r2, [pc, #208]	@ (80045c8 <UART_AdvFeatureConfig+0x150>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	2210      	movs	r2, #16
 800450e:	4013      	ands	r3, r2
 8004510:	d00b      	beq.n	800452a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a2c      	ldr	r2, [pc, #176]	@ (80045cc <UART_AdvFeatureConfig+0x154>)
 800451a:	4013      	ands	r3, r2
 800451c:	0019      	movs	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	2220      	movs	r2, #32
 8004530:	4013      	ands	r3, r2
 8004532:	d00b      	beq.n	800454c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	4a25      	ldr	r2, [pc, #148]	@ (80045d0 <UART_AdvFeatureConfig+0x158>)
 800453c:	4013      	ands	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	2240      	movs	r2, #64	@ 0x40
 8004552:	4013      	ands	r3, r2
 8004554:	d01d      	beq.n	8004592 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a1d      	ldr	r2, [pc, #116]	@ (80045d4 <UART_AdvFeatureConfig+0x15c>)
 800455e:	4013      	ands	r3, r2
 8004560:	0019      	movs	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	035b      	lsls	r3, r3, #13
 8004576:	429a      	cmp	r2, r3
 8004578:	d10b      	bne.n	8004592 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a15      	ldr	r2, [pc, #84]	@ (80045d8 <UART_AdvFeatureConfig+0x160>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	2280      	movs	r2, #128	@ 0x80
 8004598:	4013      	ands	r3, r2
 800459a:	d00b      	beq.n	80045b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a0e      	ldr	r2, [pc, #56]	@ (80045dc <UART_AdvFeatureConfig+0x164>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }
}
 80045b4:	46c0      	nop			@ (mov r8, r8)
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b002      	add	sp, #8
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	ffff7fff 	.word	0xffff7fff
 80045c0:	fffdffff 	.word	0xfffdffff
 80045c4:	fffeffff 	.word	0xfffeffff
 80045c8:	fffbffff 	.word	0xfffbffff
 80045cc:	ffffefff 	.word	0xffffefff
 80045d0:	ffffdfff 	.word	0xffffdfff
 80045d4:	ffefffff 	.word	0xffefffff
 80045d8:	ff9fffff 	.word	0xff9fffff
 80045dc:	fff7ffff 	.word	0xfff7ffff

080045e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b092      	sub	sp, #72	@ 0x48
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2290      	movs	r2, #144	@ 0x90
 80045ec:	2100      	movs	r1, #0
 80045ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f0:	f7fc fdf4 	bl	80011dc <HAL_GetTick>
 80045f4:	0003      	movs	r3, r0
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2208      	movs	r2, #8
 8004600:	4013      	ands	r3, r2
 8004602:	2b08      	cmp	r3, #8
 8004604:	d12d      	bne.n	8004662 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004608:	2280      	movs	r2, #128	@ 0x80
 800460a:	0391      	lsls	r1, r2, #14
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4a47      	ldr	r2, [pc, #284]	@ (800472c <UART_CheckIdleState+0x14c>)
 8004610:	9200      	str	r2, [sp, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	f000 f88e 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8004618:	1e03      	subs	r3, r0, #0
 800461a:	d022      	beq.n	8004662 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461c:	f3ef 8310 	mrs	r3, PRIMASK
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004624:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004626:	2301      	movs	r3, #1
 8004628:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	f383 8810 	msr	PRIMASK, r3
}
 8004630:	46c0      	nop			@ (mov r8, r8)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2180      	movs	r1, #128	@ 0x80
 800463e:	438a      	bics	r2, r1
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004648:	f383 8810 	msr	PRIMASK, r3
}
 800464c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2288      	movs	r2, #136	@ 0x88
 8004652:	2120      	movs	r1, #32
 8004654:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2284      	movs	r2, #132	@ 0x84
 800465a:	2100      	movs	r1, #0
 800465c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e060      	b.n	8004724 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2204      	movs	r2, #4
 800466a:	4013      	ands	r3, r2
 800466c:	2b04      	cmp	r3, #4
 800466e:	d146      	bne.n	80046fe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004672:	2280      	movs	r2, #128	@ 0x80
 8004674:	03d1      	lsls	r1, r2, #15
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4a2c      	ldr	r2, [pc, #176]	@ (800472c <UART_CheckIdleState+0x14c>)
 800467a:	9200      	str	r2, [sp, #0]
 800467c:	2200      	movs	r2, #0
 800467e:	f000 f859 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8004682:	1e03      	subs	r3, r0, #0
 8004684:	d03b      	beq.n	80046fe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004686:	f3ef 8310 	mrs	r3, PRIMASK
 800468a:	60fb      	str	r3, [r7, #12]
  return(result);
 800468c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004690:	2301      	movs	r3, #1
 8004692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4922      	ldr	r1, [pc, #136]	@ (8004730 <UART_CheckIdleState+0x150>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b8:	f3ef 8310 	mrs	r3, PRIMASK
 80046bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80046be:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046c2:	2301      	movs	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f383 8810 	msr	PRIMASK, r3
}
 80046cc:	46c0      	nop			@ (mov r8, r8)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2101      	movs	r1, #1
 80046da:	438a      	bics	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	228c      	movs	r2, #140	@ 0x8c
 80046ee:	2120      	movs	r1, #32
 80046f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2284      	movs	r2, #132	@ 0x84
 80046f6:	2100      	movs	r1, #0
 80046f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e012      	b.n	8004724 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2288      	movs	r2, #136	@ 0x88
 8004702:	2120      	movs	r1, #32
 8004704:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	228c      	movs	r2, #140	@ 0x8c
 800470a:	2120      	movs	r1, #32
 800470c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2284      	movs	r2, #132	@ 0x84
 800471e:	2100      	movs	r1, #0
 8004720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b010      	add	sp, #64	@ 0x40
 800472a:	bd80      	pop	{r7, pc}
 800472c:	01ffffff 	.word	0x01ffffff
 8004730:	fffffedf 	.word	0xfffffedf

08004734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	1dfb      	adds	r3, r7, #7
 8004742:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	e051      	b.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	3301      	adds	r3, #1
 800474a:	d04e      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474c:	f7fc fd46 	bl	80011dc <HAL_GetTick>
 8004750:	0002      	movs	r2, r0
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <UART_WaitOnFlagUntilTimeout+0x2e>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e051      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2204      	movs	r2, #4
 800476e:	4013      	ands	r3, r2
 8004770:	d03b      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb6>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b80      	cmp	r3, #128	@ 0x80
 8004776:	d038      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb6>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b40      	cmp	r3, #64	@ 0x40
 800477c:	d035      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	2208      	movs	r2, #8
 8004786:	4013      	ands	r3, r2
 8004788:	2b08      	cmp	r3, #8
 800478a:	d111      	bne.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2208      	movs	r2, #8
 8004792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	0018      	movs	r0, r3
 8004798:	f000 f960 	bl	8004a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2290      	movs	r2, #144	@ 0x90
 80047a0:	2108      	movs	r1, #8
 80047a2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2284      	movs	r2, #132	@ 0x84
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e02c      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	2380      	movs	r3, #128	@ 0x80
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	401a      	ands	r2, r3
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d112      	bne.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2280      	movs	r2, #128	@ 0x80
 80047ca:	0112      	lsls	r2, r2, #4
 80047cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 f943 	bl	8004a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2290      	movs	r2, #144	@ 0x90
 80047da:	2120      	movs	r1, #32
 80047dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2284      	movs	r2, #132	@ 0x84
 80047e2:	2100      	movs	r1, #0
 80047e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e00f      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	425a      	negs	r2, r3
 80047fa:	4153      	adcs	r3, r2
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	001a      	movs	r2, r3
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d09e      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b004      	add	sp, #16
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b098      	sub	sp, #96	@ 0x60
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	1dbb      	adds	r3, r7, #6
 8004820:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1dba      	adds	r2, r7, #6
 800482c:	215c      	movs	r1, #92	@ 0x5c
 800482e:	8812      	ldrh	r2, [r2, #0]
 8004830:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1dba      	adds	r2, r7, #6
 8004836:	215e      	movs	r1, #94	@ 0x5e
 8004838:	8812      	ldrh	r2, [r2, #0]
 800483a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	015b      	lsls	r3, r3, #5
 800484a:	429a      	cmp	r2, r3
 800484c:	d10d      	bne.n	800486a <UART_Start_Receive_IT+0x56>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <UART_Start_Receive_IT+0x4c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2260      	movs	r2, #96	@ 0x60
 800485a:	497b      	ldr	r1, [pc, #492]	@ (8004a48 <UART_Start_Receive_IT+0x234>)
 800485c:	5299      	strh	r1, [r3, r2]
 800485e:	e02e      	b.n	80048be <UART_Start_Receive_IT+0xaa>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2260      	movs	r2, #96	@ 0x60
 8004864:	21ff      	movs	r1, #255	@ 0xff
 8004866:	5299      	strh	r1, [r3, r2]
 8004868:	e029      	b.n	80048be <UART_Start_Receive_IT+0xaa>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10d      	bne.n	800488e <UART_Start_Receive_IT+0x7a>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d104      	bne.n	8004884 <UART_Start_Receive_IT+0x70>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2260      	movs	r2, #96	@ 0x60
 800487e:	21ff      	movs	r1, #255	@ 0xff
 8004880:	5299      	strh	r1, [r3, r2]
 8004882:	e01c      	b.n	80048be <UART_Start_Receive_IT+0xaa>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2260      	movs	r2, #96	@ 0x60
 8004888:	217f      	movs	r1, #127	@ 0x7f
 800488a:	5299      	strh	r1, [r3, r2]
 800488c:	e017      	b.n	80048be <UART_Start_Receive_IT+0xaa>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	2380      	movs	r3, #128	@ 0x80
 8004894:	055b      	lsls	r3, r3, #21
 8004896:	429a      	cmp	r2, r3
 8004898:	d10d      	bne.n	80048b6 <UART_Start_Receive_IT+0xa2>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <UART_Start_Receive_IT+0x98>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2260      	movs	r2, #96	@ 0x60
 80048a6:	217f      	movs	r1, #127	@ 0x7f
 80048a8:	5299      	strh	r1, [r3, r2]
 80048aa:	e008      	b.n	80048be <UART_Start_Receive_IT+0xaa>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2260      	movs	r2, #96	@ 0x60
 80048b0:	213f      	movs	r1, #63	@ 0x3f
 80048b2:	5299      	strh	r1, [r3, r2]
 80048b4:	e003      	b.n	80048be <UART_Start_Receive_IT+0xaa>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2260      	movs	r2, #96	@ 0x60
 80048ba:	2100      	movs	r1, #0
 80048bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2290      	movs	r2, #144	@ 0x90
 80048c2:	2100      	movs	r1, #0
 80048c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	228c      	movs	r2, #140	@ 0x8c
 80048ca:	2122      	movs	r1, #34	@ 0x22
 80048cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ce:	f3ef 8310 	mrs	r3, PRIMASK
 80048d2:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80048d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048d8:	2301      	movs	r3, #1
 80048da:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048de:	f383 8810 	msr	PRIMASK, r3
}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2101      	movs	r1, #1
 80048f0:	430a      	orrs	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fa:	f383 8810 	msr	PRIMASK, r3
}
 80048fe:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004904:	2380      	movs	r3, #128	@ 0x80
 8004906:	059b      	lsls	r3, r3, #22
 8004908:	429a      	cmp	r2, r3
 800490a:	d150      	bne.n	80049ae <UART_Start_Receive_IT+0x19a>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2268      	movs	r2, #104	@ 0x68
 8004910:	5a9b      	ldrh	r3, [r3, r2]
 8004912:	1dba      	adds	r2, r7, #6
 8004914:	8812      	ldrh	r2, [r2, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d349      	bcc.n	80049ae <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	2380      	movs	r3, #128	@ 0x80
 8004920:	015b      	lsls	r3, r3, #5
 8004922:	429a      	cmp	r2, r3
 8004924:	d107      	bne.n	8004936 <UART_Start_Receive_IT+0x122>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a46      	ldr	r2, [pc, #280]	@ (8004a4c <UART_Start_Receive_IT+0x238>)
 8004932:	675a      	str	r2, [r3, #116]	@ 0x74
 8004934:	e002      	b.n	800493c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a45      	ldr	r2, [pc, #276]	@ (8004a50 <UART_Start_Receive_IT+0x23c>)
 800493a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004944:	f3ef 8310 	mrs	r3, PRIMASK
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800494a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800494c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800494e:	2301      	movs	r3, #1
 8004950:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	f383 8810 	msr	PRIMASK, r3
}
 8004958:	46c0      	nop			@ (mov r8, r8)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2180      	movs	r1, #128	@ 0x80
 8004966:	0049      	lsls	r1, r1, #1
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004972:	f383 8810 	msr	PRIMASK, r3
}
 8004976:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004978:	f3ef 8310 	mrs	r3, PRIMASK
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004980:	657b      	str	r3, [r7, #84]	@ 0x54
 8004982:	2301      	movs	r3, #1
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			@ (mov r8, r8)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2180      	movs	r1, #128	@ 0x80
 800499a:	0549      	lsls	r1, r1, #21
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	f383 8810 	msr	PRIMASK, r3
}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	e047      	b.n	8004a3e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	2380      	movs	r3, #128	@ 0x80
 80049b4:	015b      	lsls	r3, r3, #5
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d107      	bne.n	80049ca <UART_Start_Receive_IT+0x1b6>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <UART_Start_Receive_IT+0x240>)
 80049c6:	675a      	str	r2, [r3, #116]	@ 0x74
 80049c8:	e002      	b.n	80049d0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4a22      	ldr	r2, [pc, #136]	@ (8004a58 <UART_Start_Receive_IT+0x244>)
 80049ce:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d019      	beq.n	8004a0c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d8:	f3ef 8310 	mrs	r3, PRIMASK
 80049dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80049de:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80049e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e2:	2301      	movs	r3, #1
 80049e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	f383 8810 	msr	PRIMASK, r3
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2190      	movs	r1, #144	@ 0x90
 80049fa:	0049      	lsls	r1, r1, #1
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	f383 8810 	msr	PRIMASK, r3
}
 8004a0a:	e018      	b.n	8004a3e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a10:	613b      	str	r3, [r7, #16]
  return(result);
 8004a12:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a14:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a16:	2301      	movs	r3, #1
 8004a18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2120      	movs	r1, #32
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f383 8810 	msr	PRIMASK, r3
}
 8004a3c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b018      	add	sp, #96	@ 0x60
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	000001ff 	.word	0x000001ff
 8004a4c:	08005279 	.word	0x08005279
 8004a50:	08004f39 	.word	0x08004f39
 8004a54:	08004d75 	.word	0x08004d75
 8004a58:	08004bb1 	.word	0x08004bb1

08004a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08e      	sub	sp, #56	@ 0x38
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a64:	f3ef 8310 	mrs	r3, PRIMASK
 8004a68:	617b      	str	r3, [r7, #20]
  return(result);
 8004a6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f383 8810 	msr	PRIMASK, r3
}
 8004a78:	46c0      	nop			@ (mov r8, r8)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4926      	ldr	r1, [pc, #152]	@ (8004b20 <UART_EndRxTransfer+0xc4>)
 8004a86:	400a      	ands	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a96:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9a:	623b      	str	r3, [r7, #32]
  return(result);
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	f383 8810 	msr	PRIMASK, r3
}
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	491b      	ldr	r1, [pc, #108]	@ (8004b24 <UART_EndRxTransfer+0xc8>)
 8004ab8:	400a      	ands	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	f383 8810 	msr	PRIMASK, r3
}
 8004ac6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d118      	bne.n	8004b02 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ada:	2301      	movs	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f383 8810 	msr	PRIMASK, r3
}
 8004ae4:	46c0      	nop			@ (mov r8, r8)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2110      	movs	r1, #16
 8004af2:	438a      	bics	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f383 8810 	msr	PRIMASK, r3
}
 8004b00:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	228c      	movs	r2, #140	@ 0x8c
 8004b06:	2120      	movs	r1, #32
 8004b08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b00e      	add	sp, #56	@ 0x38
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	fffffedf 	.word	0xfffffedf
 8004b24:	effffffe 	.word	0xeffffffe

08004b28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	225e      	movs	r2, #94	@ 0x5e
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2256      	movs	r2, #86	@ 0x56
 8004b42:	2100      	movs	r1, #0
 8004b44:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff f9c3 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b004      	add	sp, #16
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b62:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b64:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	2301      	movs	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f383 8810 	msr	PRIMASK, r3
}
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2140      	movs	r1, #64	@ 0x40
 8004b80:	438a      	bics	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f383 8810 	msr	PRIMASK, r3
}
 8004b8e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2288      	movs	r2, #136	@ 0x88
 8004b94:	2120      	movs	r1, #32
 8004b96:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7ff f98f 	bl	8003ec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b006      	add	sp, #24
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b094      	sub	sp, #80	@ 0x50
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bb8:	204e      	movs	r0, #78	@ 0x4e
 8004bba:	183b      	adds	r3, r7, r0
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	2160      	movs	r1, #96	@ 0x60
 8004bc0:	5a52      	ldrh	r2, [r2, r1]
 8004bc2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	228c      	movs	r2, #140	@ 0x8c
 8004bc8:	589b      	ldr	r3, [r3, r2]
 8004bca:	2b22      	cmp	r3, #34	@ 0x22
 8004bcc:	d000      	beq.n	8004bd0 <UART_RxISR_8BIT+0x20>
 8004bce:	e0bf      	b.n	8004d50 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bd6:	214c      	movs	r1, #76	@ 0x4c
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	183b      	adds	r3, r7, r0
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b2d9      	uxtb	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	400a      	ands	r2, r1
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	225e      	movs	r2, #94	@ 0x5e
 8004c00:	5a9b      	ldrh	r3, [r3, r2]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b299      	uxth	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	225e      	movs	r2, #94	@ 0x5e
 8004c0c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	225e      	movs	r2, #94	@ 0x5e
 8004c12:	5a9b      	ldrh	r3, [r3, r2]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d000      	beq.n	8004c1c <UART_RxISR_8BIT+0x6c>
 8004c1a:	e0a1      	b.n	8004d60 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c20:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c26:	2301      	movs	r3, #1
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			@ (mov r8, r8)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	494a      	ldr	r1, [pc, #296]	@ (8004d68 <UART_RxISR_8BIT+0x1b8>)
 8004c3e:	400a      	ands	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c48:	f383 8810 	msr	PRIMASK, r3
}
 8004c4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c52:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c58:	2301      	movs	r3, #1
 8004c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5e:	f383 8810 	msr	PRIMASK, r3
}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2101      	movs	r1, #1
 8004c70:	438a      	bics	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	228c      	movs	r2, #140	@ 0x8c
 8004c84:	2120      	movs	r1, #32
 8004c86:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a34      	ldr	r2, [pc, #208]	@ (8004d6c <UART_RxISR_8BIT+0x1bc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01f      	beq.n	8004cde <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d018      	beq.n	8004cde <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cac:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f383 8810 	msr	PRIMASK, r3
}
 8004cc0:	46c0      	nop			@ (mov r8, r8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4928      	ldr	r1, [pc, #160]	@ (8004d70 <UART_RxISR_8BIT+0x1c0>)
 8004cce:	400a      	ands	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d12f      	bne.n	8004d46 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cec:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			@ (mov r8, r8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2110      	movs	r1, #16
 8004d0e:	438a      	bics	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f383 8810 	msr	PRIMASK, r3
}
 8004d1c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	2210      	movs	r2, #16
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d103      	bne.n	8004d34 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2210      	movs	r2, #16
 8004d32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	225c      	movs	r2, #92	@ 0x5c
 8004d38:	5a9a      	ldrh	r2, [r3, r2]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0011      	movs	r1, r2
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f7ff f8d0 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d44:	e00c      	b.n	8004d60 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7fb ffa5 	bl	8000c98 <HAL_UART_RxCpltCallback>
}
 8004d4e:	e007      	b.n	8004d60 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2108      	movs	r1, #8
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	619a      	str	r2, [r3, #24]
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b014      	add	sp, #80	@ 0x50
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	fffffedf 	.word	0xfffffedf
 8004d6c:	40008000 	.word	0x40008000
 8004d70:	fbffffff 	.word	0xfbffffff

08004d74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b094      	sub	sp, #80	@ 0x50
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d7c:	204e      	movs	r0, #78	@ 0x4e
 8004d7e:	183b      	adds	r3, r7, r0
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	2160      	movs	r1, #96	@ 0x60
 8004d84:	5a52      	ldrh	r2, [r2, r1]
 8004d86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	228c      	movs	r2, #140	@ 0x8c
 8004d8c:	589b      	ldr	r3, [r3, r2]
 8004d8e:	2b22      	cmp	r3, #34	@ 0x22
 8004d90:	d000      	beq.n	8004d94 <UART_RxISR_16BIT+0x20>
 8004d92:	e0bf      	b.n	8004f14 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d9a:	214c      	movs	r1, #76	@ 0x4c
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	183a      	adds	r2, r7, r0
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	8812      	ldrh	r2, [r2, #0]
 8004dae:	4013      	ands	r3, r2
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004db4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	1c9a      	adds	r2, r3, #2
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	225e      	movs	r2, #94	@ 0x5e
 8004dc4:	5a9b      	ldrh	r3, [r3, r2]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b299      	uxth	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	225e      	movs	r2, #94	@ 0x5e
 8004dd0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	225e      	movs	r2, #94	@ 0x5e
 8004dd6:	5a9b      	ldrh	r3, [r3, r2]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d000      	beq.n	8004de0 <UART_RxISR_16BIT+0x6c>
 8004dde:	e0a1      	b.n	8004f24 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de0:	f3ef 8310 	mrs	r3, PRIMASK
 8004de4:	623b      	str	r3, [r7, #32]
  return(result);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dea:	2301      	movs	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	f383 8810 	msr	PRIMASK, r3
}
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	494a      	ldr	r1, [pc, #296]	@ (8004f2c <UART_RxISR_16BIT+0x1b8>)
 8004e02:	400a      	ands	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	f383 8810 	msr	PRIMASK, r3
}
 8004e10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e12:	f3ef 8310 	mrs	r3, PRIMASK
 8004e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	f383 8810 	msr	PRIMASK, r3
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2101      	movs	r1, #1
 8004e34:	438a      	bics	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3e:	f383 8810 	msr	PRIMASK, r3
}
 8004e42:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	228c      	movs	r2, #140	@ 0x8c
 8004e48:	2120      	movs	r1, #32
 8004e4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a34      	ldr	r2, [pc, #208]	@ (8004f30 <UART_RxISR_16BIT+0x1bc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01f      	beq.n	8004ea2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	2380      	movs	r3, #128	@ 0x80
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d018      	beq.n	8004ea2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e70:	f3ef 8310 	mrs	r3, PRIMASK
 8004e74:	617b      	str	r3, [r7, #20]
  return(result);
 8004e76:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f383 8810 	msr	PRIMASK, r3
}
 8004e84:	46c0      	nop			@ (mov r8, r8)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4928      	ldr	r1, [pc, #160]	@ (8004f34 <UART_RxISR_16BIT+0x1c0>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ea0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d12f      	bne.n	8004f0a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004eba:	2301      	movs	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f383 8810 	msr	PRIMASK, r3
}
 8004ec4:	46c0      	nop			@ (mov r8, r8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2110      	movs	r1, #16
 8004ed2:	438a      	bics	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f383 8810 	msr	PRIMASK, r3
}
 8004ee0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d103      	bne.n	8004ef8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	225c      	movs	r2, #92	@ 0x5c
 8004efc:	5a9a      	ldrh	r2, [r3, r2]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0011      	movs	r1, r2
 8004f02:	0018      	movs	r0, r3
 8004f04:	f7fe ffee 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f08:	e00c      	b.n	8004f24 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7fb fec3 	bl	8000c98 <HAL_UART_RxCpltCallback>
}
 8004f12:	e007      	b.n	8004f24 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2108      	movs	r1, #8
 8004f20:	430a      	orrs	r2, r1
 8004f22:	619a      	str	r2, [r3, #24]
}
 8004f24:	46c0      	nop			@ (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b014      	add	sp, #80	@ 0x50
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	fffffedf 	.word	0xfffffedf
 8004f30:	40008000 	.word	0x40008000
 8004f34:	fbffffff 	.word	0xfbffffff

08004f38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b0a0      	sub	sp, #128	@ 0x80
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004f40:	237a      	movs	r3, #122	@ 0x7a
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	2160      	movs	r1, #96	@ 0x60
 8004f48:	5a52      	ldrh	r2, [r2, r1]
 8004f4a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	228c      	movs	r2, #140	@ 0x8c
 8004f68:	589b      	ldr	r3, [r3, r2]
 8004f6a:	2b22      	cmp	r3, #34	@ 0x22
 8004f6c:	d000      	beq.n	8004f70 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004f6e:	e16a      	b.n	8005246 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f70:	236e      	movs	r3, #110	@ 0x6e
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	2168      	movs	r1, #104	@ 0x68
 8004f78:	5a52      	ldrh	r2, [r2, r1]
 8004f7a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f7c:	e111      	b.n	80051a2 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f84:	216c      	movs	r1, #108	@ 0x6c
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	237a      	movs	r3, #122	@ 0x7a
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b2d9      	uxtb	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	225e      	movs	r2, #94	@ 0x5e
 8004fb0:	5a9b      	ldrh	r3, [r3, r2]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b299      	uxth	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	225e      	movs	r2, #94	@ 0x5e
 8004fbc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004fc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fc8:	2207      	movs	r2, #7
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d049      	beq.n	8005062 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d010      	beq.n	8004ff8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004fd6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d00b      	beq.n	8004ff8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2290      	movs	r2, #144	@ 0x90
 8004fec:	589b      	ldr	r3, [r3, r2]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2190      	movs	r1, #144	@ 0x90
 8004ff6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d00f      	beq.n	8005020 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005000:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005002:	2201      	movs	r2, #1
 8005004:	4013      	ands	r3, r2
 8005006:	d00b      	beq.n	8005020 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2202      	movs	r2, #2
 800500e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2290      	movs	r2, #144	@ 0x90
 8005014:	589b      	ldr	r3, [r3, r2]
 8005016:	2204      	movs	r2, #4
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2190      	movs	r1, #144	@ 0x90
 800501e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005020:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005022:	2204      	movs	r2, #4
 8005024:	4013      	ands	r3, r2
 8005026:	d00f      	beq.n	8005048 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005028:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800502a:	2201      	movs	r2, #1
 800502c:	4013      	ands	r3, r2
 800502e:	d00b      	beq.n	8005048 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2204      	movs	r2, #4
 8005036:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2290      	movs	r2, #144	@ 0x90
 800503c:	589b      	ldr	r3, [r3, r2]
 800503e:	2202      	movs	r2, #2
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2190      	movs	r1, #144	@ 0x90
 8005046:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2290      	movs	r2, #144	@ 0x90
 800504c:	589b      	ldr	r3, [r3, r2]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d007      	beq.n	8005062 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	0018      	movs	r0, r3
 8005056:	f7fe ff3d 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2290      	movs	r2, #144	@ 0x90
 800505e:	2100      	movs	r1, #0
 8005060:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	225e      	movs	r2, #94	@ 0x5e
 8005066:	5a9b      	ldrh	r3, [r3, r2]
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d000      	beq.n	8005070 <UART_RxISR_8BIT_FIFOEN+0x138>
 800506e:	e098      	b.n	80051a2 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005070:	f3ef 8310 	mrs	r3, PRIMASK
 8005074:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800507a:	2301      	movs	r3, #1
 800507c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	46c0      	nop			@ (mov r8, r8)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4973      	ldr	r1, [pc, #460]	@ (8005260 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005092:	400a      	ands	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005098:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800509c:	f383 8810 	msr	PRIMASK, r3
}
 80050a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a2:	f3ef 8310 	mrs	r3, PRIMASK
 80050a6:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80050a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80050ac:	2301      	movs	r3, #1
 80050ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050b2:	f383 8810 	msr	PRIMASK, r3
}
 80050b6:	46c0      	nop			@ (mov r8, r8)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4968      	ldr	r1, [pc, #416]	@ (8005264 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80050c4:	400a      	ands	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ce:	f383 8810 	msr	PRIMASK, r3
}
 80050d2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	228c      	movs	r2, #140	@ 0x8c
 80050d8:	2120      	movs	r1, #32
 80050da:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a5e      	ldr	r2, [pc, #376]	@ (8005268 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01f      	beq.n	8005132 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	4013      	ands	r3, r2
 80050fe:	d018      	beq.n	8005132 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005100:	f3ef 8310 	mrs	r3, PRIMASK
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005108:	663b      	str	r3, [r7, #96]	@ 0x60
 800510a:	2301      	movs	r3, #1
 800510c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	f383 8810 	msr	PRIMASK, r3
}
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4952      	ldr	r1, [pc, #328]	@ (800526c <UART_RxISR_8BIT_FIFOEN+0x334>)
 8005122:	400a      	ands	r2, r1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005128:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512c:	f383 8810 	msr	PRIMASK, r3
}
 8005130:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d12f      	bne.n	800519a <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005140:	f3ef 8310 	mrs	r3, PRIMASK
 8005144:	623b      	str	r3, [r7, #32]
  return(result);
 8005146:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800514a:	2301      	movs	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			@ (mov r8, r8)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2110      	movs	r1, #16
 8005162:	438a      	bics	r2, r1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005168:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516c:	f383 8810 	msr	PRIMASK, r3
}
 8005170:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2210      	movs	r2, #16
 800517a:	4013      	ands	r3, r2
 800517c:	2b10      	cmp	r3, #16
 800517e:	d103      	bne.n	8005188 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2210      	movs	r2, #16
 8005186:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	225c      	movs	r2, #92	@ 0x5c
 800518c:	5a9a      	ldrh	r2, [r3, r2]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	0011      	movs	r1, r2
 8005192:	0018      	movs	r0, r3
 8005194:	f7fe fea6 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
 8005198:	e003      	b.n	80051a2 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0018      	movs	r0, r3
 800519e:	f7fb fd7b 	bl	8000c98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051a2:	236e      	movs	r3, #110	@ 0x6e
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80051ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051ae:	2220      	movs	r2, #32
 80051b0:	4013      	ands	r3, r2
 80051b2:	d000      	beq.n	80051b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80051b4:	e6e3      	b.n	8004f7e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80051b6:	205a      	movs	r0, #90	@ 0x5a
 80051b8:	183b      	adds	r3, r7, r0
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	215e      	movs	r1, #94	@ 0x5e
 80051be:	5a52      	ldrh	r2, [r2, r1]
 80051c0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80051c2:	0001      	movs	r1, r0
 80051c4:	187b      	adds	r3, r7, r1
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d044      	beq.n	8005256 <UART_RxISR_8BIT_FIFOEN+0x31e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2268      	movs	r2, #104	@ 0x68
 80051d0:	5a9b      	ldrh	r3, [r3, r2]
 80051d2:	187a      	adds	r2, r7, r1
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d23d      	bcs.n	8005256 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051da:	f3ef 8310 	mrs	r3, PRIMASK
 80051de:	60bb      	str	r3, [r7, #8]
  return(result);
 80051e0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80051e4:	2301      	movs	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f383 8810 	msr	PRIMASK, r3
}
 80051ee:	46c0      	nop			@ (mov r8, r8)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	491d      	ldr	r1, [pc, #116]	@ (8005270 <UART_RxISR_8BIT_FIFOEN+0x338>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f383 8810 	msr	PRIMASK, r3
}
 800520a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a19      	ldr	r2, [pc, #100]	@ (8005274 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005210:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005212:	f3ef 8310 	mrs	r3, PRIMASK
 8005216:	617b      	str	r3, [r7, #20]
  return(result);
 8005218:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800521a:	653b      	str	r3, [r7, #80]	@ 0x50
 800521c:	2301      	movs	r3, #1
 800521e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f383 8810 	msr	PRIMASK, r3
}
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2120      	movs	r1, #32
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f383 8810 	msr	PRIMASK, r3
}
 8005242:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005244:	e007      	b.n	8005256 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699a      	ldr	r2, [r3, #24]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2108      	movs	r1, #8
 8005252:	430a      	orrs	r2, r1
 8005254:	619a      	str	r2, [r3, #24]
}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	46bd      	mov	sp, r7
 800525a:	b020      	add	sp, #128	@ 0x80
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			@ (mov r8, r8)
 8005260:	fffffeff 	.word	0xfffffeff
 8005264:	effffffe 	.word	0xeffffffe
 8005268:	40008000 	.word	0x40008000
 800526c:	fbffffff 	.word	0xfbffffff
 8005270:	efffffff 	.word	0xefffffff
 8005274:	08004bb1 	.word	0x08004bb1

08005278 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b0a2      	sub	sp, #136	@ 0x88
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005280:	2382      	movs	r3, #130	@ 0x82
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	2160      	movs	r1, #96	@ 0x60
 8005288:	5a52      	ldrh	r2, [r2, r1]
 800528a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2284      	movs	r2, #132	@ 0x84
 8005294:	18ba      	adds	r2, r7, r2
 8005296:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	228c      	movs	r2, #140	@ 0x8c
 80052ac:	589b      	ldr	r3, [r3, r2]
 80052ae:	2b22      	cmp	r3, #34	@ 0x22
 80052b0:	d000      	beq.n	80052b4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80052b2:	e174      	b.n	800559e <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80052b4:	2376      	movs	r3, #118	@ 0x76
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	2168      	movs	r1, #104	@ 0x68
 80052bc:	5a52      	ldrh	r2, [r2, r1]
 80052be:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052c0:	e119      	b.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052c8:	2174      	movs	r1, #116	@ 0x74
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d2:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80052d4:	187b      	adds	r3, r7, r1
 80052d6:	2282      	movs	r2, #130	@ 0x82
 80052d8:	18ba      	adds	r2, r7, r2
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	8812      	ldrh	r2, [r2, #0]
 80052de:	4013      	ands	r3, r2
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ea:	1c9a      	adds	r2, r3, #2
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	225e      	movs	r2, #94	@ 0x5e
 80052f4:	5a9b      	ldrh	r3, [r3, r2]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b299      	uxth	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	225e      	movs	r2, #94	@ 0x5e
 8005300:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	2184      	movs	r1, #132	@ 0x84
 800530a:	187a      	adds	r2, r7, r1
 800530c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800530e:	187b      	adds	r3, r7, r1
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2207      	movs	r2, #7
 8005314:	4013      	ands	r3, r2
 8005316:	d04e      	beq.n	80053b6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005318:	187b      	adds	r3, r7, r1
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2201      	movs	r2, #1
 800531e:	4013      	ands	r3, r2
 8005320:	d010      	beq.n	8005344 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005322:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4013      	ands	r3, r2
 800532a:	d00b      	beq.n	8005344 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2201      	movs	r2, #1
 8005332:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2290      	movs	r2, #144	@ 0x90
 8005338:	589b      	ldr	r3, [r3, r2]
 800533a:	2201      	movs	r2, #1
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2190      	movs	r1, #144	@ 0x90
 8005342:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005344:	2384      	movs	r3, #132	@ 0x84
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2202      	movs	r2, #2
 800534c:	4013      	ands	r3, r2
 800534e:	d00f      	beq.n	8005370 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005352:	2201      	movs	r2, #1
 8005354:	4013      	ands	r3, r2
 8005356:	d00b      	beq.n	8005370 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2202      	movs	r2, #2
 800535e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2290      	movs	r2, #144	@ 0x90
 8005364:	589b      	ldr	r3, [r3, r2]
 8005366:	2204      	movs	r2, #4
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2190      	movs	r1, #144	@ 0x90
 800536e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005370:	2384      	movs	r3, #132	@ 0x84
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2204      	movs	r2, #4
 8005378:	4013      	ands	r3, r2
 800537a:	d00f      	beq.n	800539c <UART_RxISR_16BIT_FIFOEN+0x124>
 800537c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800537e:	2201      	movs	r2, #1
 8005380:	4013      	ands	r3, r2
 8005382:	d00b      	beq.n	800539c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2204      	movs	r2, #4
 800538a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2290      	movs	r2, #144	@ 0x90
 8005390:	589b      	ldr	r3, [r3, r2]
 8005392:	2202      	movs	r2, #2
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2190      	movs	r1, #144	@ 0x90
 800539a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2290      	movs	r2, #144	@ 0x90
 80053a0:	589b      	ldr	r3, [r3, r2]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f7fe fd93 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2290      	movs	r2, #144	@ 0x90
 80053b2:	2100      	movs	r1, #0
 80053b4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	225e      	movs	r2, #94	@ 0x5e
 80053ba:	5a9b      	ldrh	r3, [r3, r2]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d000      	beq.n	80053c4 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80053c2:	e098      	b.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c4:	f3ef 8310 	mrs	r3, PRIMASK
 80053c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80053ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053ce:	2301      	movs	r3, #1
 80053d0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d4:	f383 8810 	msr	PRIMASK, r3
}
 80053d8:	46c0      	nop			@ (mov r8, r8)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4974      	ldr	r1, [pc, #464]	@ (80055b8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80053e6:	400a      	ands	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ec:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053f0:	f383 8810 	msr	PRIMASK, r3
}
 80053f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f6:	f3ef 8310 	mrs	r3, PRIMASK
 80053fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80053fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005400:	2301      	movs	r3, #1
 8005402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005406:	f383 8810 	msr	PRIMASK, r3
}
 800540a:	46c0      	nop			@ (mov r8, r8)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4969      	ldr	r1, [pc, #420]	@ (80055bc <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005418:	400a      	ands	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
 800541c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800541e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005422:	f383 8810 	msr	PRIMASK, r3
}
 8005426:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	228c      	movs	r2, #140	@ 0x8c
 800542c:	2120      	movs	r1, #32
 800542e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5f      	ldr	r2, [pc, #380]	@ (80055c0 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01f      	beq.n	8005486 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	2380      	movs	r3, #128	@ 0x80
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	4013      	ands	r3, r2
 8005452:	d018      	beq.n	8005486 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005454:	f3ef 8310 	mrs	r3, PRIMASK
 8005458:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800545c:	667b      	str	r3, [r7, #100]	@ 0x64
 800545e:	2301      	movs	r3, #1
 8005460:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005464:	f383 8810 	msr	PRIMASK, r3
}
 8005468:	46c0      	nop			@ (mov r8, r8)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4953      	ldr	r1, [pc, #332]	@ (80055c4 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005476:	400a      	ands	r2, r1
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800547c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005480:	f383 8810 	msr	PRIMASK, r3
}
 8005484:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d12f      	bne.n	80054ee <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005494:	f3ef 8310 	mrs	r3, PRIMASK
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549c:	663b      	str	r3, [r7, #96]	@ 0x60
 800549e:	2301      	movs	r3, #1
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	f383 8810 	msr	PRIMASK, r3
}
 80054a8:	46c0      	nop			@ (mov r8, r8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2110      	movs	r1, #16
 80054b6:	438a      	bics	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	2210      	movs	r2, #16
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d103      	bne.n	80054dc <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	225c      	movs	r2, #92	@ 0x5c
 80054e0:	5a9a      	ldrh	r2, [r3, r2]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0011      	movs	r1, r2
 80054e6:	0018      	movs	r0, r3
 80054e8:	f7fe fcfc 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
 80054ec:	e003      	b.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7fb fbd1 	bl	8000c98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054f6:	2376      	movs	r3, #118	@ 0x76
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d006      	beq.n	800550e <UART_RxISR_16BIT_FIFOEN+0x296>
 8005500:	2384      	movs	r3, #132	@ 0x84
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2220      	movs	r2, #32
 8005508:	4013      	ands	r3, r2
 800550a:	d000      	beq.n	800550e <UART_RxISR_16BIT_FIFOEN+0x296>
 800550c:	e6d9      	b.n	80052c2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800550e:	205e      	movs	r0, #94	@ 0x5e
 8005510:	183b      	adds	r3, r7, r0
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	215e      	movs	r1, #94	@ 0x5e
 8005516:	5a52      	ldrh	r2, [r2, r1]
 8005518:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800551a:	0001      	movs	r1, r0
 800551c:	187b      	adds	r3, r7, r1
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d044      	beq.n	80055ae <UART_RxISR_16BIT_FIFOEN+0x336>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2268      	movs	r2, #104	@ 0x68
 8005528:	5a9b      	ldrh	r3, [r3, r2]
 800552a:	187a      	adds	r2, r7, r1
 800552c:	8812      	ldrh	r2, [r2, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d23d      	bcs.n	80055ae <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005532:	f3ef 8310 	mrs	r3, PRIMASK
 8005536:	60fb      	str	r3, [r7, #12]
  return(result);
 8005538:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800553a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800553c:	2301      	movs	r3, #1
 800553e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f383 8810 	msr	PRIMASK, r3
}
 8005546:	46c0      	nop			@ (mov r8, r8)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	491d      	ldr	r1, [pc, #116]	@ (80055c8 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005554:	400a      	ands	r2, r1
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800555a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f383 8810 	msr	PRIMASK, r3
}
 8005562:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a19      	ldr	r2, [pc, #100]	@ (80055cc <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005568:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800556a:	f3ef 8310 	mrs	r3, PRIMASK
 800556e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005570:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005572:	657b      	str	r3, [r7, #84]	@ 0x54
 8005574:	2301      	movs	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2120      	movs	r1, #32
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005592:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	f383 8810 	msr	PRIMASK, r3
}
 800559a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800559c:	e007      	b.n	80055ae <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2108      	movs	r1, #8
 80055aa:	430a      	orrs	r2, r1
 80055ac:	619a      	str	r2, [r3, #24]
}
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b022      	add	sp, #136	@ 0x88
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			@ (mov r8, r8)
 80055b8:	fffffeff 	.word	0xfffffeff
 80055bc:	effffffe 	.word	0xeffffffe
 80055c0:	40008000 	.word	0x40008000
 80055c4:	fbffffff 	.word	0xfbffffff
 80055c8:	efffffff 	.word	0xefffffff
 80055cc:	08004d75 	.word	0x08004d75

080055d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055d8:	46c0      	nop			@ (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055e8:	46c0      	nop			@ (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b002      	add	sp, #8
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055f8:	46c0      	nop			@ (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2284      	movs	r2, #132	@ 0x84
 800560c:	5c9b      	ldrb	r3, [r3, r2]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_UARTEx_DisableFifoMode+0x16>
 8005612:	2302      	movs	r3, #2
 8005614:	e027      	b.n	8005666 <HAL_UARTEx_DisableFifoMode+0x66>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2284      	movs	r2, #132	@ 0x84
 800561a:	2101      	movs	r1, #1
 800561c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2288      	movs	r2, #136	@ 0x88
 8005622:	2124      	movs	r1, #36	@ 0x24
 8005624:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2101      	movs	r1, #1
 800563a:	438a      	bics	r2, r1
 800563c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a0b      	ldr	r2, [pc, #44]	@ (8005670 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005642:	4013      	ands	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2288      	movs	r2, #136	@ 0x88
 8005658:	2120      	movs	r1, #32
 800565a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2284      	movs	r2, #132	@ 0x84
 8005660:	2100      	movs	r1, #0
 8005662:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b004      	add	sp, #16
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	dfffffff 	.word	0xdfffffff

08005674 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2284      	movs	r2, #132	@ 0x84
 8005682:	5c9b      	ldrb	r3, [r3, r2]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005688:	2302      	movs	r3, #2
 800568a:	e02e      	b.n	80056ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2284      	movs	r2, #132	@ 0x84
 8005690:	2101      	movs	r1, #1
 8005692:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2288      	movs	r2, #136	@ 0x88
 8005698:	2124      	movs	r1, #36	@ 0x24
 800569a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2101      	movs	r1, #1
 80056b0:	438a      	bics	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	08d9      	lsrs	r1, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	0018      	movs	r0, r3
 80056cc:	f000 f854 	bl	8005778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2288      	movs	r2, #136	@ 0x88
 80056dc:	2120      	movs	r1, #32
 80056de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2284      	movs	r2, #132	@ 0x84
 80056e4:	2100      	movs	r1, #0
 80056e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	0018      	movs	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b004      	add	sp, #16
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2284      	movs	r2, #132	@ 0x84
 8005702:	5c9b      	ldrb	r3, [r3, r2]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005708:	2302      	movs	r3, #2
 800570a:	e02f      	b.n	800576c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2284      	movs	r2, #132	@ 0x84
 8005710:	2101      	movs	r1, #1
 8005712:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2288      	movs	r2, #136	@ 0x88
 8005718:	2124      	movs	r1, #36	@ 0x24
 800571a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2101      	movs	r1, #1
 8005730:	438a      	bics	r2, r1
 8005732:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	4a0e      	ldr	r2, [pc, #56]	@ (8005774 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800573c:	4013      	ands	r3, r2
 800573e:	0019      	movs	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	0018      	movs	r0, r3
 800574e:	f000 f813 	bl	8005778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2288      	movs	r2, #136	@ 0x88
 800575e:	2120      	movs	r1, #32
 8005760:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2284      	movs	r2, #132	@ 0x84
 8005766:	2100      	movs	r1, #0
 8005768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b004      	add	sp, #16
 8005772:	bd80      	pop	{r7, pc}
 8005774:	f1ffffff 	.word	0xf1ffffff

08005778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005784:	2b00      	cmp	r3, #0
 8005786:	d108      	bne.n	800579a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	226a      	movs	r2, #106	@ 0x6a
 800578c:	2101      	movs	r1, #1
 800578e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2268      	movs	r2, #104	@ 0x68
 8005794:	2101      	movs	r1, #1
 8005796:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005798:	e043      	b.n	8005822 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800579a:	260f      	movs	r6, #15
 800579c:	19bb      	adds	r3, r7, r6
 800579e:	2208      	movs	r2, #8
 80057a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057a2:	200e      	movs	r0, #14
 80057a4:	183b      	adds	r3, r7, r0
 80057a6:	2208      	movs	r2, #8
 80057a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	0e5b      	lsrs	r3, r3, #25
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	240d      	movs	r4, #13
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	2107      	movs	r1, #7
 80057ba:	400a      	ands	r2, r1
 80057bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	0f5b      	lsrs	r3, r3, #29
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	250c      	movs	r5, #12
 80057ca:	197b      	adds	r3, r7, r5
 80057cc:	2107      	movs	r1, #7
 80057ce:	400a      	ands	r2, r1
 80057d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d2:	183b      	adds	r3, r7, r0
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	197a      	adds	r2, r7, r5
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	4914      	ldr	r1, [pc, #80]	@ (800582c <UARTEx_SetNbDataToProcess+0xb4>)
 80057dc:	5c8a      	ldrb	r2, [r1, r2]
 80057de:	435a      	muls	r2, r3
 80057e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80057e2:	197b      	adds	r3, r7, r5
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <UARTEx_SetNbDataToProcess+0xb8>)
 80057e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ea:	0019      	movs	r1, r3
 80057ec:	f7fa fd26 	bl	800023c <__divsi3>
 80057f0:	0003      	movs	r3, r0
 80057f2:	b299      	uxth	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	226a      	movs	r2, #106	@ 0x6a
 80057f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057fa:	19bb      	adds	r3, r7, r6
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	193a      	adds	r2, r7, r4
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	490a      	ldr	r1, [pc, #40]	@ (800582c <UARTEx_SetNbDataToProcess+0xb4>)
 8005804:	5c8a      	ldrb	r2, [r1, r2]
 8005806:	435a      	muls	r2, r3
 8005808:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800580a:	193b      	adds	r3, r7, r4
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	4a08      	ldr	r2, [pc, #32]	@ (8005830 <UARTEx_SetNbDataToProcess+0xb8>)
 8005810:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005812:	0019      	movs	r1, r3
 8005814:	f7fa fd12 	bl	800023c <__divsi3>
 8005818:	0003      	movs	r3, r0
 800581a:	b299      	uxth	r1, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2268      	movs	r2, #104	@ 0x68
 8005820:	5299      	strh	r1, [r3, r2]
}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b005      	add	sp, #20
 8005828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	08006464 	.word	0x08006464
 8005830:	0800646c 	.word	0x0800646c

08005834 <atoi>:
 8005834:	b510      	push	{r4, lr}
 8005836:	220a      	movs	r2, #10
 8005838:	2100      	movs	r1, #0
 800583a:	f000 f88b 	bl	8005954 <strtol>
 800583e:	bd10      	pop	{r4, pc}

08005840 <_strtol_l.isra.0>:
 8005840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005842:	b085      	sub	sp, #20
 8005844:	0017      	movs	r7, r2
 8005846:	001e      	movs	r6, r3
 8005848:	9003      	str	r0, [sp, #12]
 800584a:	9101      	str	r1, [sp, #4]
 800584c:	2b24      	cmp	r3, #36	@ 0x24
 800584e:	d823      	bhi.n	8005898 <_strtol_l.isra.0+0x58>
 8005850:	000c      	movs	r4, r1
 8005852:	2b01      	cmp	r3, #1
 8005854:	d020      	beq.n	8005898 <_strtol_l.isra.0+0x58>
 8005856:	4b3d      	ldr	r3, [pc, #244]	@ (800594c <_strtol_l.isra.0+0x10c>)
 8005858:	2208      	movs	r2, #8
 800585a:	469c      	mov	ip, r3
 800585c:	0023      	movs	r3, r4
 800585e:	4661      	mov	r1, ip
 8005860:	781d      	ldrb	r5, [r3, #0]
 8005862:	3401      	adds	r4, #1
 8005864:	5d48      	ldrb	r0, [r1, r5]
 8005866:	0001      	movs	r1, r0
 8005868:	4011      	ands	r1, r2
 800586a:	4210      	tst	r0, r2
 800586c:	d1f6      	bne.n	800585c <_strtol_l.isra.0+0x1c>
 800586e:	2d2d      	cmp	r5, #45	@ 0x2d
 8005870:	d119      	bne.n	80058a6 <_strtol_l.isra.0+0x66>
 8005872:	7825      	ldrb	r5, [r4, #0]
 8005874:	1c9c      	adds	r4, r3, #2
 8005876:	2301      	movs	r3, #1
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	2210      	movs	r2, #16
 800587c:	0033      	movs	r3, r6
 800587e:	4393      	bics	r3, r2
 8005880:	d11d      	bne.n	80058be <_strtol_l.isra.0+0x7e>
 8005882:	2d30      	cmp	r5, #48	@ 0x30
 8005884:	d115      	bne.n	80058b2 <_strtol_l.isra.0+0x72>
 8005886:	2120      	movs	r1, #32
 8005888:	7823      	ldrb	r3, [r4, #0]
 800588a:	438b      	bics	r3, r1
 800588c:	2b58      	cmp	r3, #88	@ 0x58
 800588e:	d110      	bne.n	80058b2 <_strtol_l.isra.0+0x72>
 8005890:	7865      	ldrb	r5, [r4, #1]
 8005892:	3402      	adds	r4, #2
 8005894:	2610      	movs	r6, #16
 8005896:	e012      	b.n	80058be <_strtol_l.isra.0+0x7e>
 8005898:	f000 f892 	bl	80059c0 <__errno>
 800589c:	2316      	movs	r3, #22
 800589e:	6003      	str	r3, [r0, #0]
 80058a0:	2000      	movs	r0, #0
 80058a2:	b005      	add	sp, #20
 80058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a6:	9100      	str	r1, [sp, #0]
 80058a8:	2d2b      	cmp	r5, #43	@ 0x2b
 80058aa:	d1e6      	bne.n	800587a <_strtol_l.isra.0+0x3a>
 80058ac:	7825      	ldrb	r5, [r4, #0]
 80058ae:	1c9c      	adds	r4, r3, #2
 80058b0:	e7e3      	b.n	800587a <_strtol_l.isra.0+0x3a>
 80058b2:	2e00      	cmp	r6, #0
 80058b4:	d1ee      	bne.n	8005894 <_strtol_l.isra.0+0x54>
 80058b6:	360a      	adds	r6, #10
 80058b8:	2d30      	cmp	r5, #48	@ 0x30
 80058ba:	d100      	bne.n	80058be <_strtol_l.isra.0+0x7e>
 80058bc:	3e02      	subs	r6, #2
 80058be:	4a24      	ldr	r2, [pc, #144]	@ (8005950 <_strtol_l.isra.0+0x110>)
 80058c0:	9b00      	ldr	r3, [sp, #0]
 80058c2:	4694      	mov	ip, r2
 80058c4:	4463      	add	r3, ip
 80058c6:	0031      	movs	r1, r6
 80058c8:	0018      	movs	r0, r3
 80058ca:	9302      	str	r3, [sp, #8]
 80058cc:	f7fa fcb2 	bl	8000234 <__aeabi_uidivmod>
 80058d0:	2200      	movs	r2, #0
 80058d2:	4684      	mov	ip, r0
 80058d4:	0010      	movs	r0, r2
 80058d6:	002b      	movs	r3, r5
 80058d8:	3b30      	subs	r3, #48	@ 0x30
 80058da:	2b09      	cmp	r3, #9
 80058dc:	d811      	bhi.n	8005902 <_strtol_l.isra.0+0xc2>
 80058de:	001d      	movs	r5, r3
 80058e0:	42ae      	cmp	r6, r5
 80058e2:	dd1d      	ble.n	8005920 <_strtol_l.isra.0+0xe0>
 80058e4:	1c53      	adds	r3, r2, #1
 80058e6:	d009      	beq.n	80058fc <_strtol_l.isra.0+0xbc>
 80058e8:	2201      	movs	r2, #1
 80058ea:	4252      	negs	r2, r2
 80058ec:	4584      	cmp	ip, r0
 80058ee:	d305      	bcc.n	80058fc <_strtol_l.isra.0+0xbc>
 80058f0:	d101      	bne.n	80058f6 <_strtol_l.isra.0+0xb6>
 80058f2:	42a9      	cmp	r1, r5
 80058f4:	db11      	blt.n	800591a <_strtol_l.isra.0+0xda>
 80058f6:	2201      	movs	r2, #1
 80058f8:	4370      	muls	r0, r6
 80058fa:	1828      	adds	r0, r5, r0
 80058fc:	7825      	ldrb	r5, [r4, #0]
 80058fe:	3401      	adds	r4, #1
 8005900:	e7e9      	b.n	80058d6 <_strtol_l.isra.0+0x96>
 8005902:	002b      	movs	r3, r5
 8005904:	3b41      	subs	r3, #65	@ 0x41
 8005906:	2b19      	cmp	r3, #25
 8005908:	d801      	bhi.n	800590e <_strtol_l.isra.0+0xce>
 800590a:	3d37      	subs	r5, #55	@ 0x37
 800590c:	e7e8      	b.n	80058e0 <_strtol_l.isra.0+0xa0>
 800590e:	002b      	movs	r3, r5
 8005910:	3b61      	subs	r3, #97	@ 0x61
 8005912:	2b19      	cmp	r3, #25
 8005914:	d804      	bhi.n	8005920 <_strtol_l.isra.0+0xe0>
 8005916:	3d57      	subs	r5, #87	@ 0x57
 8005918:	e7e2      	b.n	80058e0 <_strtol_l.isra.0+0xa0>
 800591a:	2201      	movs	r2, #1
 800591c:	4252      	negs	r2, r2
 800591e:	e7ed      	b.n	80058fc <_strtol_l.isra.0+0xbc>
 8005920:	1c53      	adds	r3, r2, #1
 8005922:	d108      	bne.n	8005936 <_strtol_l.isra.0+0xf6>
 8005924:	2322      	movs	r3, #34	@ 0x22
 8005926:	9a03      	ldr	r2, [sp, #12]
 8005928:	9802      	ldr	r0, [sp, #8]
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	2f00      	cmp	r7, #0
 800592e:	d0b8      	beq.n	80058a2 <_strtol_l.isra.0+0x62>
 8005930:	1e63      	subs	r3, r4, #1
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	e007      	b.n	8005946 <_strtol_l.isra.0+0x106>
 8005936:	9b00      	ldr	r3, [sp, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d000      	beq.n	800593e <_strtol_l.isra.0+0xfe>
 800593c:	4240      	negs	r0, r0
 800593e:	2f00      	cmp	r7, #0
 8005940:	d0af      	beq.n	80058a2 <_strtol_l.isra.0+0x62>
 8005942:	2a00      	cmp	r2, #0
 8005944:	d1f4      	bne.n	8005930 <_strtol_l.isra.0+0xf0>
 8005946:	9b01      	ldr	r3, [sp, #4]
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	e7aa      	b.n	80058a2 <_strtol_l.isra.0+0x62>
 800594c:	08006475 	.word	0x08006475
 8005950:	7fffffff 	.word	0x7fffffff

08005954 <strtol>:
 8005954:	b510      	push	{r4, lr}
 8005956:	4c04      	ldr	r4, [pc, #16]	@ (8005968 <strtol+0x14>)
 8005958:	0013      	movs	r3, r2
 800595a:	000a      	movs	r2, r1
 800595c:	0001      	movs	r1, r0
 800595e:	6820      	ldr	r0, [r4, #0]
 8005960:	f7ff ff6e 	bl	8005840 <_strtol_l.isra.0>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	20000010 	.word	0x20000010

0800596c <siprintf>:
 800596c:	b40e      	push	{r1, r2, r3}
 800596e:	b510      	push	{r4, lr}
 8005970:	2400      	movs	r4, #0
 8005972:	490c      	ldr	r1, [pc, #48]	@ (80059a4 <siprintf+0x38>)
 8005974:	b09d      	sub	sp, #116	@ 0x74
 8005976:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005978:	9002      	str	r0, [sp, #8]
 800597a:	9006      	str	r0, [sp, #24]
 800597c:	9107      	str	r1, [sp, #28]
 800597e:	9104      	str	r1, [sp, #16]
 8005980:	4809      	ldr	r0, [pc, #36]	@ (80059a8 <siprintf+0x3c>)
 8005982:	490a      	ldr	r1, [pc, #40]	@ (80059ac <siprintf+0x40>)
 8005984:	cb04      	ldmia	r3!, {r2}
 8005986:	9105      	str	r1, [sp, #20]
 8005988:	6800      	ldr	r0, [r0, #0]
 800598a:	a902      	add	r1, sp, #8
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005990:	f000 f99e 	bl	8005cd0 <_svfiprintf_r>
 8005994:	9b02      	ldr	r3, [sp, #8]
 8005996:	701c      	strb	r4, [r3, #0]
 8005998:	b01d      	add	sp, #116	@ 0x74
 800599a:	bc10      	pop	{r4}
 800599c:	bc08      	pop	{r3}
 800599e:	b003      	add	sp, #12
 80059a0:	4718      	bx	r3
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	7fffffff 	.word	0x7fffffff
 80059a8:	20000010 	.word	0x20000010
 80059ac:	ffff0208 	.word	0xffff0208

080059b0 <memset>:
 80059b0:	0003      	movs	r3, r0
 80059b2:	1882      	adds	r2, r0, r2
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d100      	bne.n	80059ba <memset+0xa>
 80059b8:	4770      	bx	lr
 80059ba:	7019      	strb	r1, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	e7f9      	b.n	80059b4 <memset+0x4>

080059c0 <__errno>:
 80059c0:	4b01      	ldr	r3, [pc, #4]	@ (80059c8 <__errno+0x8>)
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	4770      	bx	lr
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	20000010 	.word	0x20000010

080059cc <__libc_init_array>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	2600      	movs	r6, #0
 80059d0:	4c0c      	ldr	r4, [pc, #48]	@ (8005a04 <__libc_init_array+0x38>)
 80059d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005a08 <__libc_init_array+0x3c>)
 80059d4:	1b64      	subs	r4, r4, r5
 80059d6:	10a4      	asrs	r4, r4, #2
 80059d8:	42a6      	cmp	r6, r4
 80059da:	d109      	bne.n	80059f0 <__libc_init_array+0x24>
 80059dc:	2600      	movs	r6, #0
 80059de:	f000 fc61 	bl	80062a4 <_init>
 80059e2:	4c0a      	ldr	r4, [pc, #40]	@ (8005a0c <__libc_init_array+0x40>)
 80059e4:	4d0a      	ldr	r5, [pc, #40]	@ (8005a10 <__libc_init_array+0x44>)
 80059e6:	1b64      	subs	r4, r4, r5
 80059e8:	10a4      	asrs	r4, r4, #2
 80059ea:	42a6      	cmp	r6, r4
 80059ec:	d105      	bne.n	80059fa <__libc_init_array+0x2e>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	00b3      	lsls	r3, r6, #2
 80059f2:	58eb      	ldr	r3, [r5, r3]
 80059f4:	4798      	blx	r3
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7ee      	b.n	80059d8 <__libc_init_array+0xc>
 80059fa:	00b3      	lsls	r3, r6, #2
 80059fc:	58eb      	ldr	r3, [r5, r3]
 80059fe:	4798      	blx	r3
 8005a00:	3601      	adds	r6, #1
 8005a02:	e7f2      	b.n	80059ea <__libc_init_array+0x1e>
 8005a04:	080065b0 	.word	0x080065b0
 8005a08:	080065b0 	.word	0x080065b0
 8005a0c:	080065b4 	.word	0x080065b4
 8005a10:	080065b0 	.word	0x080065b0

08005a14 <__retarget_lock_acquire_recursive>:
 8005a14:	4770      	bx	lr

08005a16 <__retarget_lock_release_recursive>:
 8005a16:	4770      	bx	lr

08005a18 <_free_r>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	0005      	movs	r5, r0
 8005a1c:	1e0c      	subs	r4, r1, #0
 8005a1e:	d010      	beq.n	8005a42 <_free_r+0x2a>
 8005a20:	3c04      	subs	r4, #4
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da00      	bge.n	8005a2a <_free_r+0x12>
 8005a28:	18e4      	adds	r4, r4, r3
 8005a2a:	0028      	movs	r0, r5
 8005a2c:	f000 f8e0 	bl	8005bf0 <__malloc_lock>
 8005a30:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa8 <_free_r+0x90>)
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d105      	bne.n	8005a44 <_free_r+0x2c>
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	6014      	str	r4, [r2, #0]
 8005a3c:	0028      	movs	r0, r5
 8005a3e:	f000 f8df 	bl	8005c00 <__malloc_unlock>
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	d908      	bls.n	8005a5a <_free_r+0x42>
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	1821      	adds	r1, r4, r0
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	d1f3      	bne.n	8005a38 <_free_r+0x20>
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	1809      	adds	r1, r1, r0
 8005a56:	6021      	str	r1, [r4, #0]
 8005a58:	e7ee      	b.n	8005a38 <_free_r+0x20>
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <_free_r+0x4e>
 8005a62:	42a3      	cmp	r3, r4
 8005a64:	d9f9      	bls.n	8005a5a <_free_r+0x42>
 8005a66:	6811      	ldr	r1, [r2, #0]
 8005a68:	1850      	adds	r0, r2, r1
 8005a6a:	42a0      	cmp	r0, r4
 8005a6c:	d10b      	bne.n	8005a86 <_free_r+0x6e>
 8005a6e:	6820      	ldr	r0, [r4, #0]
 8005a70:	1809      	adds	r1, r1, r0
 8005a72:	1850      	adds	r0, r2, r1
 8005a74:	6011      	str	r1, [r2, #0]
 8005a76:	4283      	cmp	r3, r0
 8005a78:	d1e0      	bne.n	8005a3c <_free_r+0x24>
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	1841      	adds	r1, r0, r1
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	6053      	str	r3, [r2, #4]
 8005a84:	e7da      	b.n	8005a3c <_free_r+0x24>
 8005a86:	42a0      	cmp	r0, r4
 8005a88:	d902      	bls.n	8005a90 <_free_r+0x78>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	e7d5      	b.n	8005a3c <_free_r+0x24>
 8005a90:	6820      	ldr	r0, [r4, #0]
 8005a92:	1821      	adds	r1, r4, r0
 8005a94:	428b      	cmp	r3, r1
 8005a96:	d103      	bne.n	8005aa0 <_free_r+0x88>
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	1809      	adds	r1, r1, r0
 8005a9e:	6021      	str	r1, [r4, #0]
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	6054      	str	r4, [r2, #4]
 8005aa4:	e7ca      	b.n	8005a3c <_free_r+0x24>
 8005aa6:	46c0      	nop			@ (mov r8, r8)
 8005aa8:	20000354 	.word	0x20000354

08005aac <sbrk_aligned>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	4e0f      	ldr	r6, [pc, #60]	@ (8005aec <sbrk_aligned+0x40>)
 8005ab0:	000d      	movs	r5, r1
 8005ab2:	6831      	ldr	r1, [r6, #0]
 8005ab4:	0004      	movs	r4, r0
 8005ab6:	2900      	cmp	r1, #0
 8005ab8:	d102      	bne.n	8005ac0 <sbrk_aligned+0x14>
 8005aba:	f000 fb95 	bl	80061e8 <_sbrk_r>
 8005abe:	6030      	str	r0, [r6, #0]
 8005ac0:	0029      	movs	r1, r5
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	f000 fb90 	bl	80061e8 <_sbrk_r>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d103      	bne.n	8005ad4 <sbrk_aligned+0x28>
 8005acc:	2501      	movs	r5, #1
 8005ace:	426d      	negs	r5, r5
 8005ad0:	0028      	movs	r0, r5
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	1cc5      	adds	r5, r0, #3
 8005ad8:	439d      	bics	r5, r3
 8005ada:	42a8      	cmp	r0, r5
 8005adc:	d0f8      	beq.n	8005ad0 <sbrk_aligned+0x24>
 8005ade:	1a29      	subs	r1, r5, r0
 8005ae0:	0020      	movs	r0, r4
 8005ae2:	f000 fb81 	bl	80061e8 <_sbrk_r>
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d1f2      	bne.n	8005ad0 <sbrk_aligned+0x24>
 8005aea:	e7ef      	b.n	8005acc <sbrk_aligned+0x20>
 8005aec:	20000350 	.word	0x20000350

08005af0 <_malloc_r>:
 8005af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af2:	2203      	movs	r2, #3
 8005af4:	1ccb      	adds	r3, r1, #3
 8005af6:	4393      	bics	r3, r2
 8005af8:	3308      	adds	r3, #8
 8005afa:	0005      	movs	r5, r0
 8005afc:	001f      	movs	r7, r3
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d234      	bcs.n	8005b6c <_malloc_r+0x7c>
 8005b02:	270c      	movs	r7, #12
 8005b04:	42b9      	cmp	r1, r7
 8005b06:	d833      	bhi.n	8005b70 <_malloc_r+0x80>
 8005b08:	0028      	movs	r0, r5
 8005b0a:	f000 f871 	bl	8005bf0 <__malloc_lock>
 8005b0e:	4e37      	ldr	r6, [pc, #220]	@ (8005bec <_malloc_r+0xfc>)
 8005b10:	6833      	ldr	r3, [r6, #0]
 8005b12:	001c      	movs	r4, r3
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	d12f      	bne.n	8005b78 <_malloc_r+0x88>
 8005b18:	0039      	movs	r1, r7
 8005b1a:	0028      	movs	r0, r5
 8005b1c:	f7ff ffc6 	bl	8005aac <sbrk_aligned>
 8005b20:	0004      	movs	r4, r0
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	d15f      	bne.n	8005be6 <_malloc_r+0xf6>
 8005b26:	6834      	ldr	r4, [r6, #0]
 8005b28:	9400      	str	r4, [sp, #0]
 8005b2a:	9b00      	ldr	r3, [sp, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d14a      	bne.n	8005bc6 <_malloc_r+0xd6>
 8005b30:	2c00      	cmp	r4, #0
 8005b32:	d052      	beq.n	8005bda <_malloc_r+0xea>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	0028      	movs	r0, r5
 8005b38:	18e3      	adds	r3, r4, r3
 8005b3a:	9900      	ldr	r1, [sp, #0]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	f000 fb53 	bl	80061e8 <_sbrk_r>
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	4283      	cmp	r3, r0
 8005b46:	d148      	bne.n	8005bda <_malloc_r+0xea>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	0028      	movs	r0, r5
 8005b4c:	1aff      	subs	r7, r7, r3
 8005b4e:	0039      	movs	r1, r7
 8005b50:	f7ff ffac 	bl	8005aac <sbrk_aligned>
 8005b54:	3001      	adds	r0, #1
 8005b56:	d040      	beq.n	8005bda <_malloc_r+0xea>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	19db      	adds	r3, r3, r7
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	6833      	ldr	r3, [r6, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d133      	bne.n	8005bce <_malloc_r+0xde>
 8005b66:	9b00      	ldr	r3, [sp, #0]
 8005b68:	6033      	str	r3, [r6, #0]
 8005b6a:	e019      	b.n	8005ba0 <_malloc_r+0xb0>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dac9      	bge.n	8005b04 <_malloc_r+0x14>
 8005b70:	230c      	movs	r3, #12
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	2000      	movs	r0, #0
 8005b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b78:	6821      	ldr	r1, [r4, #0]
 8005b7a:	1bc9      	subs	r1, r1, r7
 8005b7c:	d420      	bmi.n	8005bc0 <_malloc_r+0xd0>
 8005b7e:	290b      	cmp	r1, #11
 8005b80:	d90a      	bls.n	8005b98 <_malloc_r+0xa8>
 8005b82:	19e2      	adds	r2, r4, r7
 8005b84:	6027      	str	r7, [r4, #0]
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	d104      	bne.n	8005b94 <_malloc_r+0xa4>
 8005b8a:	6032      	str	r2, [r6, #0]
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	6011      	str	r1, [r2, #0]
 8005b90:	6053      	str	r3, [r2, #4]
 8005b92:	e005      	b.n	8005ba0 <_malloc_r+0xb0>
 8005b94:	605a      	str	r2, [r3, #4]
 8005b96:	e7f9      	b.n	8005b8c <_malloc_r+0x9c>
 8005b98:	6862      	ldr	r2, [r4, #4]
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	d10e      	bne.n	8005bbc <_malloc_r+0xcc>
 8005b9e:	6032      	str	r2, [r6, #0]
 8005ba0:	0028      	movs	r0, r5
 8005ba2:	f000 f82d 	bl	8005c00 <__malloc_unlock>
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	2207      	movs	r2, #7
 8005baa:	300b      	adds	r0, #11
 8005bac:	1d23      	adds	r3, r4, #4
 8005bae:	4390      	bics	r0, r2
 8005bb0:	1ac2      	subs	r2, r0, r3
 8005bb2:	4298      	cmp	r0, r3
 8005bb4:	d0df      	beq.n	8005b76 <_malloc_r+0x86>
 8005bb6:	1a1b      	subs	r3, r3, r0
 8005bb8:	50a3      	str	r3, [r4, r2]
 8005bba:	e7dc      	b.n	8005b76 <_malloc_r+0x86>
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	e7ef      	b.n	8005ba0 <_malloc_r+0xb0>
 8005bc0:	0023      	movs	r3, r4
 8005bc2:	6864      	ldr	r4, [r4, #4]
 8005bc4:	e7a6      	b.n	8005b14 <_malloc_r+0x24>
 8005bc6:	9c00      	ldr	r4, [sp, #0]
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	e7ad      	b.n	8005b2a <_malloc_r+0x3a>
 8005bce:	001a      	movs	r2, r3
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	d1fb      	bne.n	8005bce <_malloc_r+0xde>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e7da      	b.n	8005b90 <_malloc_r+0xa0>
 8005bda:	230c      	movs	r3, #12
 8005bdc:	0028      	movs	r0, r5
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	f000 f80e 	bl	8005c00 <__malloc_unlock>
 8005be4:	e7c6      	b.n	8005b74 <_malloc_r+0x84>
 8005be6:	6007      	str	r7, [r0, #0]
 8005be8:	e7da      	b.n	8005ba0 <_malloc_r+0xb0>
 8005bea:	46c0      	nop			@ (mov r8, r8)
 8005bec:	20000354 	.word	0x20000354

08005bf0 <__malloc_lock>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	4802      	ldr	r0, [pc, #8]	@ (8005bfc <__malloc_lock+0xc>)
 8005bf4:	f7ff ff0e 	bl	8005a14 <__retarget_lock_acquire_recursive>
 8005bf8:	bd10      	pop	{r4, pc}
 8005bfa:	46c0      	nop			@ (mov r8, r8)
 8005bfc:	2000034c 	.word	0x2000034c

08005c00 <__malloc_unlock>:
 8005c00:	b510      	push	{r4, lr}
 8005c02:	4802      	ldr	r0, [pc, #8]	@ (8005c0c <__malloc_unlock+0xc>)
 8005c04:	f7ff ff07 	bl	8005a16 <__retarget_lock_release_recursive>
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	46c0      	nop			@ (mov r8, r8)
 8005c0c:	2000034c 	.word	0x2000034c

08005c10 <__ssputs_r>:
 8005c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c12:	688e      	ldr	r6, [r1, #8]
 8005c14:	b085      	sub	sp, #20
 8005c16:	001f      	movs	r7, r3
 8005c18:	000c      	movs	r4, r1
 8005c1a:	680b      	ldr	r3, [r1, #0]
 8005c1c:	9002      	str	r0, [sp, #8]
 8005c1e:	9203      	str	r2, [sp, #12]
 8005c20:	42be      	cmp	r6, r7
 8005c22:	d830      	bhi.n	8005c86 <__ssputs_r+0x76>
 8005c24:	210c      	movs	r1, #12
 8005c26:	5e62      	ldrsh	r2, [r4, r1]
 8005c28:	2190      	movs	r1, #144	@ 0x90
 8005c2a:	00c9      	lsls	r1, r1, #3
 8005c2c:	420a      	tst	r2, r1
 8005c2e:	d028      	beq.n	8005c82 <__ssputs_r+0x72>
 8005c30:	2003      	movs	r0, #3
 8005c32:	6921      	ldr	r1, [r4, #16]
 8005c34:	1a5b      	subs	r3, r3, r1
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	6963      	ldr	r3, [r4, #20]
 8005c3a:	4343      	muls	r3, r0
 8005c3c:	9801      	ldr	r0, [sp, #4]
 8005c3e:	0fdd      	lsrs	r5, r3, #31
 8005c40:	18ed      	adds	r5, r5, r3
 8005c42:	1c7b      	adds	r3, r7, #1
 8005c44:	181b      	adds	r3, r3, r0
 8005c46:	106d      	asrs	r5, r5, #1
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	d900      	bls.n	8005c4e <__ssputs_r+0x3e>
 8005c4c:	001d      	movs	r5, r3
 8005c4e:	0552      	lsls	r2, r2, #21
 8005c50:	d528      	bpl.n	8005ca4 <__ssputs_r+0x94>
 8005c52:	0029      	movs	r1, r5
 8005c54:	9802      	ldr	r0, [sp, #8]
 8005c56:	f7ff ff4b 	bl	8005af0 <_malloc_r>
 8005c5a:	1e06      	subs	r6, r0, #0
 8005c5c:	d02c      	beq.n	8005cb8 <__ssputs_r+0xa8>
 8005c5e:	9a01      	ldr	r2, [sp, #4]
 8005c60:	6921      	ldr	r1, [r4, #16]
 8005c62:	f000 fade 	bl	8006222 <memcpy>
 8005c66:	89a2      	ldrh	r2, [r4, #12]
 8005c68:	4b18      	ldr	r3, [pc, #96]	@ (8005ccc <__ssputs_r+0xbc>)
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	2380      	movs	r3, #128	@ 0x80
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	9b01      	ldr	r3, [sp, #4]
 8005c74:	6126      	str	r6, [r4, #16]
 8005c76:	18f6      	adds	r6, r6, r3
 8005c78:	6026      	str	r6, [r4, #0]
 8005c7a:	003e      	movs	r6, r7
 8005c7c:	6165      	str	r5, [r4, #20]
 8005c7e:	1aed      	subs	r5, r5, r3
 8005c80:	60a5      	str	r5, [r4, #8]
 8005c82:	42be      	cmp	r6, r7
 8005c84:	d900      	bls.n	8005c88 <__ssputs_r+0x78>
 8005c86:	003e      	movs	r6, r7
 8005c88:	0032      	movs	r2, r6
 8005c8a:	9903      	ldr	r1, [sp, #12]
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	f000 fa99 	bl	80061c4 <memmove>
 8005c92:	2000      	movs	r0, #0
 8005c94:	68a3      	ldr	r3, [r4, #8]
 8005c96:	1b9b      	subs	r3, r3, r6
 8005c98:	60a3      	str	r3, [r4, #8]
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	199b      	adds	r3, r3, r6
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	b005      	add	sp, #20
 8005ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca4:	002a      	movs	r2, r5
 8005ca6:	9802      	ldr	r0, [sp, #8]
 8005ca8:	f000 fac4 	bl	8006234 <_realloc_r>
 8005cac:	1e06      	subs	r6, r0, #0
 8005cae:	d1e0      	bne.n	8005c72 <__ssputs_r+0x62>
 8005cb0:	6921      	ldr	r1, [r4, #16]
 8005cb2:	9802      	ldr	r0, [sp, #8]
 8005cb4:	f7ff feb0 	bl	8005a18 <_free_r>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	2001      	movs	r0, #1
 8005cbc:	9a02      	ldr	r2, [sp, #8]
 8005cbe:	4240      	negs	r0, r0
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	89a2      	ldrh	r2, [r4, #12]
 8005cc4:	3334      	adds	r3, #52	@ 0x34
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	e7e9      	b.n	8005ca0 <__ssputs_r+0x90>
 8005ccc:	fffffb7f 	.word	0xfffffb7f

08005cd0 <_svfiprintf_r>:
 8005cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd2:	b0a1      	sub	sp, #132	@ 0x84
 8005cd4:	9003      	str	r0, [sp, #12]
 8005cd6:	001d      	movs	r5, r3
 8005cd8:	898b      	ldrh	r3, [r1, #12]
 8005cda:	000f      	movs	r7, r1
 8005cdc:	0016      	movs	r6, r2
 8005cde:	061b      	lsls	r3, r3, #24
 8005ce0:	d511      	bpl.n	8005d06 <_svfiprintf_r+0x36>
 8005ce2:	690b      	ldr	r3, [r1, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10e      	bne.n	8005d06 <_svfiprintf_r+0x36>
 8005ce8:	2140      	movs	r1, #64	@ 0x40
 8005cea:	f7ff ff01 	bl	8005af0 <_malloc_r>
 8005cee:	6038      	str	r0, [r7, #0]
 8005cf0:	6138      	str	r0, [r7, #16]
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d105      	bne.n	8005d02 <_svfiprintf_r+0x32>
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	9a03      	ldr	r2, [sp, #12]
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	4240      	negs	r0, r0
 8005d00:	e0cf      	b.n	8005ea2 <_svfiprintf_r+0x1d2>
 8005d02:	2340      	movs	r3, #64	@ 0x40
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	2300      	movs	r3, #0
 8005d08:	ac08      	add	r4, sp, #32
 8005d0a:	6163      	str	r3, [r4, #20]
 8005d0c:	3320      	adds	r3, #32
 8005d0e:	7663      	strb	r3, [r4, #25]
 8005d10:	3310      	adds	r3, #16
 8005d12:	76a3      	strb	r3, [r4, #26]
 8005d14:	9507      	str	r5, [sp, #28]
 8005d16:	0035      	movs	r5, r6
 8005d18:	782b      	ldrb	r3, [r5, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <_svfiprintf_r+0x52>
 8005d1e:	2b25      	cmp	r3, #37	@ 0x25
 8005d20:	d148      	bne.n	8005db4 <_svfiprintf_r+0xe4>
 8005d22:	1bab      	subs	r3, r5, r6
 8005d24:	9305      	str	r3, [sp, #20]
 8005d26:	42b5      	cmp	r5, r6
 8005d28:	d00b      	beq.n	8005d42 <_svfiprintf_r+0x72>
 8005d2a:	0032      	movs	r2, r6
 8005d2c:	0039      	movs	r1, r7
 8005d2e:	9803      	ldr	r0, [sp, #12]
 8005d30:	f7ff ff6e 	bl	8005c10 <__ssputs_r>
 8005d34:	3001      	adds	r0, #1
 8005d36:	d100      	bne.n	8005d3a <_svfiprintf_r+0x6a>
 8005d38:	e0ae      	b.n	8005e98 <_svfiprintf_r+0x1c8>
 8005d3a:	6963      	ldr	r3, [r4, #20]
 8005d3c:	9a05      	ldr	r2, [sp, #20]
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	6163      	str	r3, [r4, #20]
 8005d42:	782b      	ldrb	r3, [r5, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d100      	bne.n	8005d4a <_svfiprintf_r+0x7a>
 8005d48:	e0a6      	b.n	8005e98 <_svfiprintf_r+0x1c8>
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4252      	negs	r2, r2
 8005d50:	6062      	str	r2, [r4, #4]
 8005d52:	a904      	add	r1, sp, #16
 8005d54:	3254      	adds	r2, #84	@ 0x54
 8005d56:	1852      	adds	r2, r2, r1
 8005d58:	1c6e      	adds	r6, r5, #1
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	60e3      	str	r3, [r4, #12]
 8005d5e:	60a3      	str	r3, [r4, #8]
 8005d60:	7013      	strb	r3, [r2, #0]
 8005d62:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005d64:	4b54      	ldr	r3, [pc, #336]	@ (8005eb8 <_svfiprintf_r+0x1e8>)
 8005d66:	2205      	movs	r2, #5
 8005d68:	0018      	movs	r0, r3
 8005d6a:	7831      	ldrb	r1, [r6, #0]
 8005d6c:	9305      	str	r3, [sp, #20]
 8005d6e:	f000 fa4d 	bl	800620c <memchr>
 8005d72:	1c75      	adds	r5, r6, #1
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d11f      	bne.n	8005db8 <_svfiprintf_r+0xe8>
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	06d3      	lsls	r3, r2, #27
 8005d7c:	d504      	bpl.n	8005d88 <_svfiprintf_r+0xb8>
 8005d7e:	2353      	movs	r3, #83	@ 0x53
 8005d80:	a904      	add	r1, sp, #16
 8005d82:	185b      	adds	r3, r3, r1
 8005d84:	2120      	movs	r1, #32
 8005d86:	7019      	strb	r1, [r3, #0]
 8005d88:	0713      	lsls	r3, r2, #28
 8005d8a:	d504      	bpl.n	8005d96 <_svfiprintf_r+0xc6>
 8005d8c:	2353      	movs	r3, #83	@ 0x53
 8005d8e:	a904      	add	r1, sp, #16
 8005d90:	185b      	adds	r3, r3, r1
 8005d92:	212b      	movs	r1, #43	@ 0x2b
 8005d94:	7019      	strb	r1, [r3, #0]
 8005d96:	7833      	ldrb	r3, [r6, #0]
 8005d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d9a:	d016      	beq.n	8005dca <_svfiprintf_r+0xfa>
 8005d9c:	0035      	movs	r5, r6
 8005d9e:	2100      	movs	r1, #0
 8005da0:	200a      	movs	r0, #10
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	782a      	ldrb	r2, [r5, #0]
 8005da6:	1c6e      	adds	r6, r5, #1
 8005da8:	3a30      	subs	r2, #48	@ 0x30
 8005daa:	2a09      	cmp	r2, #9
 8005dac:	d950      	bls.n	8005e50 <_svfiprintf_r+0x180>
 8005dae:	2900      	cmp	r1, #0
 8005db0:	d111      	bne.n	8005dd6 <_svfiprintf_r+0x106>
 8005db2:	e017      	b.n	8005de4 <_svfiprintf_r+0x114>
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7af      	b.n	8005d18 <_svfiprintf_r+0x48>
 8005db8:	9b05      	ldr	r3, [sp, #20]
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	1ac0      	subs	r0, r0, r3
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4083      	lsls	r3, r0
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	002e      	movs	r6, r5
 8005dc6:	6023      	str	r3, [r4, #0]
 8005dc8:	e7cc      	b.n	8005d64 <_svfiprintf_r+0x94>
 8005dca:	9b07      	ldr	r3, [sp, #28]
 8005dcc:	1d19      	adds	r1, r3, #4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	9107      	str	r1, [sp, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	db01      	blt.n	8005dda <_svfiprintf_r+0x10a>
 8005dd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dd8:	e004      	b.n	8005de4 <_svfiprintf_r+0x114>
 8005dda:	425b      	negs	r3, r3
 8005ddc:	60e3      	str	r3, [r4, #12]
 8005dde:	2302      	movs	r3, #2
 8005de0:	4313      	orrs	r3, r2
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	782b      	ldrb	r3, [r5, #0]
 8005de6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de8:	d10c      	bne.n	8005e04 <_svfiprintf_r+0x134>
 8005dea:	786b      	ldrb	r3, [r5, #1]
 8005dec:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dee:	d134      	bne.n	8005e5a <_svfiprintf_r+0x18a>
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	3502      	adds	r5, #2
 8005df4:	1d1a      	adds	r2, r3, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	9207      	str	r2, [sp, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da01      	bge.n	8005e02 <_svfiprintf_r+0x132>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	425b      	negs	r3, r3
 8005e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e04:	4e2d      	ldr	r6, [pc, #180]	@ (8005ebc <_svfiprintf_r+0x1ec>)
 8005e06:	2203      	movs	r2, #3
 8005e08:	0030      	movs	r0, r6
 8005e0a:	7829      	ldrb	r1, [r5, #0]
 8005e0c:	f000 f9fe 	bl	800620c <memchr>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d006      	beq.n	8005e22 <_svfiprintf_r+0x152>
 8005e14:	2340      	movs	r3, #64	@ 0x40
 8005e16:	1b80      	subs	r0, r0, r6
 8005e18:	4083      	lsls	r3, r0
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	7829      	ldrb	r1, [r5, #0]
 8005e24:	2206      	movs	r2, #6
 8005e26:	4826      	ldr	r0, [pc, #152]	@ (8005ec0 <_svfiprintf_r+0x1f0>)
 8005e28:	1c6e      	adds	r6, r5, #1
 8005e2a:	7621      	strb	r1, [r4, #24]
 8005e2c:	f000 f9ee 	bl	800620c <memchr>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d038      	beq.n	8005ea6 <_svfiprintf_r+0x1d6>
 8005e34:	4b23      	ldr	r3, [pc, #140]	@ (8005ec4 <_svfiprintf_r+0x1f4>)
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d122      	bne.n	8005e80 <_svfiprintf_r+0x1b0>
 8005e3a:	2207      	movs	r2, #7
 8005e3c:	9b07      	ldr	r3, [sp, #28]
 8005e3e:	3307      	adds	r3, #7
 8005e40:	4393      	bics	r3, r2
 8005e42:	3308      	adds	r3, #8
 8005e44:	9307      	str	r3, [sp, #28]
 8005e46:	6963      	ldr	r3, [r4, #20]
 8005e48:	9a04      	ldr	r2, [sp, #16]
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	6163      	str	r3, [r4, #20]
 8005e4e:	e762      	b.n	8005d16 <_svfiprintf_r+0x46>
 8005e50:	4343      	muls	r3, r0
 8005e52:	0035      	movs	r5, r6
 8005e54:	2101      	movs	r1, #1
 8005e56:	189b      	adds	r3, r3, r2
 8005e58:	e7a4      	b.n	8005da4 <_svfiprintf_r+0xd4>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	200a      	movs	r0, #10
 8005e5e:	0019      	movs	r1, r3
 8005e60:	3501      	adds	r5, #1
 8005e62:	6063      	str	r3, [r4, #4]
 8005e64:	782a      	ldrb	r2, [r5, #0]
 8005e66:	1c6e      	adds	r6, r5, #1
 8005e68:	3a30      	subs	r2, #48	@ 0x30
 8005e6a:	2a09      	cmp	r2, #9
 8005e6c:	d903      	bls.n	8005e76 <_svfiprintf_r+0x1a6>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0c8      	beq.n	8005e04 <_svfiprintf_r+0x134>
 8005e72:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e74:	e7c6      	b.n	8005e04 <_svfiprintf_r+0x134>
 8005e76:	4341      	muls	r1, r0
 8005e78:	0035      	movs	r5, r6
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	1889      	adds	r1, r1, r2
 8005e7e:	e7f1      	b.n	8005e64 <_svfiprintf_r+0x194>
 8005e80:	aa07      	add	r2, sp, #28
 8005e82:	9200      	str	r2, [sp, #0]
 8005e84:	0021      	movs	r1, r4
 8005e86:	003a      	movs	r2, r7
 8005e88:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec8 <_svfiprintf_r+0x1f8>)
 8005e8a:	9803      	ldr	r0, [sp, #12]
 8005e8c:	e000      	b.n	8005e90 <_svfiprintf_r+0x1c0>
 8005e8e:	bf00      	nop
 8005e90:	9004      	str	r0, [sp, #16]
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	3301      	adds	r3, #1
 8005e96:	d1d6      	bne.n	8005e46 <_svfiprintf_r+0x176>
 8005e98:	89bb      	ldrh	r3, [r7, #12]
 8005e9a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005e9c:	065b      	lsls	r3, r3, #25
 8005e9e:	d500      	bpl.n	8005ea2 <_svfiprintf_r+0x1d2>
 8005ea0:	e72c      	b.n	8005cfc <_svfiprintf_r+0x2c>
 8005ea2:	b021      	add	sp, #132	@ 0x84
 8005ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea6:	aa07      	add	r2, sp, #28
 8005ea8:	9200      	str	r2, [sp, #0]
 8005eaa:	0021      	movs	r1, r4
 8005eac:	003a      	movs	r2, r7
 8005eae:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <_svfiprintf_r+0x1f8>)
 8005eb0:	9803      	ldr	r0, [sp, #12]
 8005eb2:	f000 f87b 	bl	8005fac <_printf_i>
 8005eb6:	e7eb      	b.n	8005e90 <_svfiprintf_r+0x1c0>
 8005eb8:	08006575 	.word	0x08006575
 8005ebc:	0800657b 	.word	0x0800657b
 8005ec0:	0800657f 	.word	0x0800657f
 8005ec4:	00000000 	.word	0x00000000
 8005ec8:	08005c11 	.word	0x08005c11

08005ecc <_printf_common>:
 8005ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ece:	0016      	movs	r6, r2
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	688a      	ldr	r2, [r1, #8]
 8005ed4:	690b      	ldr	r3, [r1, #16]
 8005ed6:	000c      	movs	r4, r1
 8005ed8:	9000      	str	r0, [sp, #0]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	da00      	bge.n	8005ee0 <_printf_common+0x14>
 8005ede:	0013      	movs	r3, r2
 8005ee0:	0022      	movs	r2, r4
 8005ee2:	6033      	str	r3, [r6, #0]
 8005ee4:	3243      	adds	r2, #67	@ 0x43
 8005ee6:	7812      	ldrb	r2, [r2, #0]
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	d001      	beq.n	8005ef0 <_printf_common+0x24>
 8005eec:	3301      	adds	r3, #1
 8005eee:	6033      	str	r3, [r6, #0]
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	069b      	lsls	r3, r3, #26
 8005ef4:	d502      	bpl.n	8005efc <_printf_common+0x30>
 8005ef6:	6833      	ldr	r3, [r6, #0]
 8005ef8:	3302      	adds	r3, #2
 8005efa:	6033      	str	r3, [r6, #0]
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	2306      	movs	r3, #6
 8005f00:	0015      	movs	r5, r2
 8005f02:	401d      	ands	r5, r3
 8005f04:	421a      	tst	r2, r3
 8005f06:	d027      	beq.n	8005f58 <_printf_common+0x8c>
 8005f08:	0023      	movs	r3, r4
 8005f0a:	3343      	adds	r3, #67	@ 0x43
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	1e5a      	subs	r2, r3, #1
 8005f10:	4193      	sbcs	r3, r2
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	0692      	lsls	r2, r2, #26
 8005f16:	d430      	bmi.n	8005f7a <_printf_common+0xae>
 8005f18:	0022      	movs	r2, r4
 8005f1a:	9901      	ldr	r1, [sp, #4]
 8005f1c:	9800      	ldr	r0, [sp, #0]
 8005f1e:	9d08      	ldr	r5, [sp, #32]
 8005f20:	3243      	adds	r2, #67	@ 0x43
 8005f22:	47a8      	blx	r5
 8005f24:	3001      	adds	r0, #1
 8005f26:	d025      	beq.n	8005f74 <_printf_common+0xa8>
 8005f28:	2206      	movs	r2, #6
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	2500      	movs	r5, #0
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d105      	bne.n	8005f40 <_printf_common+0x74>
 8005f34:	6833      	ldr	r3, [r6, #0]
 8005f36:	68e5      	ldr	r5, [r4, #12]
 8005f38:	1aed      	subs	r5, r5, r3
 8005f3a:	43eb      	mvns	r3, r5
 8005f3c:	17db      	asrs	r3, r3, #31
 8005f3e:	401d      	ands	r5, r3
 8005f40:	68a3      	ldr	r3, [r4, #8]
 8005f42:	6922      	ldr	r2, [r4, #16]
 8005f44:	4293      	cmp	r3, r2
 8005f46:	dd01      	ble.n	8005f4c <_printf_common+0x80>
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	18ed      	adds	r5, r5, r3
 8005f4c:	2600      	movs	r6, #0
 8005f4e:	42b5      	cmp	r5, r6
 8005f50:	d120      	bne.n	8005f94 <_printf_common+0xc8>
 8005f52:	2000      	movs	r0, #0
 8005f54:	e010      	b.n	8005f78 <_printf_common+0xac>
 8005f56:	3501      	adds	r5, #1
 8005f58:	68e3      	ldr	r3, [r4, #12]
 8005f5a:	6832      	ldr	r2, [r6, #0]
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	42ab      	cmp	r3, r5
 8005f60:	ddd2      	ble.n	8005f08 <_printf_common+0x3c>
 8005f62:	0022      	movs	r2, r4
 8005f64:	2301      	movs	r3, #1
 8005f66:	9901      	ldr	r1, [sp, #4]
 8005f68:	9800      	ldr	r0, [sp, #0]
 8005f6a:	9f08      	ldr	r7, [sp, #32]
 8005f6c:	3219      	adds	r2, #25
 8005f6e:	47b8      	blx	r7
 8005f70:	3001      	adds	r0, #1
 8005f72:	d1f0      	bne.n	8005f56 <_printf_common+0x8a>
 8005f74:	2001      	movs	r0, #1
 8005f76:	4240      	negs	r0, r0
 8005f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f7a:	2030      	movs	r0, #48	@ 0x30
 8005f7c:	18e1      	adds	r1, r4, r3
 8005f7e:	3143      	adds	r1, #67	@ 0x43
 8005f80:	7008      	strb	r0, [r1, #0]
 8005f82:	0021      	movs	r1, r4
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	3145      	adds	r1, #69	@ 0x45
 8005f88:	7809      	ldrb	r1, [r1, #0]
 8005f8a:	18a2      	adds	r2, r4, r2
 8005f8c:	3243      	adds	r2, #67	@ 0x43
 8005f8e:	3302      	adds	r3, #2
 8005f90:	7011      	strb	r1, [r2, #0]
 8005f92:	e7c1      	b.n	8005f18 <_printf_common+0x4c>
 8005f94:	0022      	movs	r2, r4
 8005f96:	2301      	movs	r3, #1
 8005f98:	9901      	ldr	r1, [sp, #4]
 8005f9a:	9800      	ldr	r0, [sp, #0]
 8005f9c:	9f08      	ldr	r7, [sp, #32]
 8005f9e:	321a      	adds	r2, #26
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d0e6      	beq.n	8005f74 <_printf_common+0xa8>
 8005fa6:	3601      	adds	r6, #1
 8005fa8:	e7d1      	b.n	8005f4e <_printf_common+0x82>
	...

08005fac <_printf_i>:
 8005fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fae:	b08b      	sub	sp, #44	@ 0x2c
 8005fb0:	9206      	str	r2, [sp, #24]
 8005fb2:	000a      	movs	r2, r1
 8005fb4:	3243      	adds	r2, #67	@ 0x43
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	9005      	str	r0, [sp, #20]
 8005fba:	9203      	str	r2, [sp, #12]
 8005fbc:	7e0a      	ldrb	r2, [r1, #24]
 8005fbe:	000c      	movs	r4, r1
 8005fc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fc2:	2a78      	cmp	r2, #120	@ 0x78
 8005fc4:	d809      	bhi.n	8005fda <_printf_i+0x2e>
 8005fc6:	2a62      	cmp	r2, #98	@ 0x62
 8005fc8:	d80b      	bhi.n	8005fe2 <_printf_i+0x36>
 8005fca:	2a00      	cmp	r2, #0
 8005fcc:	d100      	bne.n	8005fd0 <_printf_i+0x24>
 8005fce:	e0ba      	b.n	8006146 <_printf_i+0x19a>
 8005fd0:	497a      	ldr	r1, [pc, #488]	@ (80061bc <_printf_i+0x210>)
 8005fd2:	9104      	str	r1, [sp, #16]
 8005fd4:	2a58      	cmp	r2, #88	@ 0x58
 8005fd6:	d100      	bne.n	8005fda <_printf_i+0x2e>
 8005fd8:	e08e      	b.n	80060f8 <_printf_i+0x14c>
 8005fda:	0025      	movs	r5, r4
 8005fdc:	3542      	adds	r5, #66	@ 0x42
 8005fde:	702a      	strb	r2, [r5, #0]
 8005fe0:	e022      	b.n	8006028 <_printf_i+0x7c>
 8005fe2:	0010      	movs	r0, r2
 8005fe4:	3863      	subs	r0, #99	@ 0x63
 8005fe6:	2815      	cmp	r0, #21
 8005fe8:	d8f7      	bhi.n	8005fda <_printf_i+0x2e>
 8005fea:	f7fa f893 	bl	8000114 <__gnu_thumb1_case_shi>
 8005fee:	0016      	.short	0x0016
 8005ff0:	fff6001f 	.word	0xfff6001f
 8005ff4:	fff6fff6 	.word	0xfff6fff6
 8005ff8:	001ffff6 	.word	0x001ffff6
 8005ffc:	fff6fff6 	.word	0xfff6fff6
 8006000:	fff6fff6 	.word	0xfff6fff6
 8006004:	0036009f 	.word	0x0036009f
 8006008:	fff6007e 	.word	0xfff6007e
 800600c:	00b0fff6 	.word	0x00b0fff6
 8006010:	0036fff6 	.word	0x0036fff6
 8006014:	fff6fff6 	.word	0xfff6fff6
 8006018:	0082      	.short	0x0082
 800601a:	0025      	movs	r5, r4
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	3542      	adds	r5, #66	@ 0x42
 8006020:	1d11      	adds	r1, r2, #4
 8006022:	6019      	str	r1, [r3, #0]
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	702b      	strb	r3, [r5, #0]
 8006028:	2301      	movs	r3, #1
 800602a:	e09e      	b.n	800616a <_printf_i+0x1be>
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	6809      	ldr	r1, [r1, #0]
 8006030:	1d02      	adds	r2, r0, #4
 8006032:	060d      	lsls	r5, r1, #24
 8006034:	d50b      	bpl.n	800604e <_printf_i+0xa2>
 8006036:	6806      	ldr	r6, [r0, #0]
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	2e00      	cmp	r6, #0
 800603c:	da03      	bge.n	8006046 <_printf_i+0x9a>
 800603e:	232d      	movs	r3, #45	@ 0x2d
 8006040:	9a03      	ldr	r2, [sp, #12]
 8006042:	4276      	negs	r6, r6
 8006044:	7013      	strb	r3, [r2, #0]
 8006046:	4b5d      	ldr	r3, [pc, #372]	@ (80061bc <_printf_i+0x210>)
 8006048:	270a      	movs	r7, #10
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	e018      	b.n	8006080 <_printf_i+0xd4>
 800604e:	6806      	ldr	r6, [r0, #0]
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	0649      	lsls	r1, r1, #25
 8006054:	d5f1      	bpl.n	800603a <_printf_i+0x8e>
 8006056:	b236      	sxth	r6, r6
 8006058:	e7ef      	b.n	800603a <_printf_i+0x8e>
 800605a:	6808      	ldr	r0, [r1, #0]
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	c940      	ldmia	r1!, {r6}
 8006060:	0605      	lsls	r5, r0, #24
 8006062:	d402      	bmi.n	800606a <_printf_i+0xbe>
 8006064:	0640      	lsls	r0, r0, #25
 8006066:	d500      	bpl.n	800606a <_printf_i+0xbe>
 8006068:	b2b6      	uxth	r6, r6
 800606a:	6019      	str	r1, [r3, #0]
 800606c:	4b53      	ldr	r3, [pc, #332]	@ (80061bc <_printf_i+0x210>)
 800606e:	270a      	movs	r7, #10
 8006070:	9304      	str	r3, [sp, #16]
 8006072:	2a6f      	cmp	r2, #111	@ 0x6f
 8006074:	d100      	bne.n	8006078 <_printf_i+0xcc>
 8006076:	3f02      	subs	r7, #2
 8006078:	0023      	movs	r3, r4
 800607a:	2200      	movs	r2, #0
 800607c:	3343      	adds	r3, #67	@ 0x43
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	6863      	ldr	r3, [r4, #4]
 8006082:	60a3      	str	r3, [r4, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	db06      	blt.n	8006096 <_printf_i+0xea>
 8006088:	2104      	movs	r1, #4
 800608a:	6822      	ldr	r2, [r4, #0]
 800608c:	9d03      	ldr	r5, [sp, #12]
 800608e:	438a      	bics	r2, r1
 8006090:	6022      	str	r2, [r4, #0]
 8006092:	4333      	orrs	r3, r6
 8006094:	d00c      	beq.n	80060b0 <_printf_i+0x104>
 8006096:	9d03      	ldr	r5, [sp, #12]
 8006098:	0030      	movs	r0, r6
 800609a:	0039      	movs	r1, r7
 800609c:	f7fa f8ca 	bl	8000234 <__aeabi_uidivmod>
 80060a0:	9b04      	ldr	r3, [sp, #16]
 80060a2:	3d01      	subs	r5, #1
 80060a4:	5c5b      	ldrb	r3, [r3, r1]
 80060a6:	702b      	strb	r3, [r5, #0]
 80060a8:	0033      	movs	r3, r6
 80060aa:	0006      	movs	r6, r0
 80060ac:	429f      	cmp	r7, r3
 80060ae:	d9f3      	bls.n	8006098 <_printf_i+0xec>
 80060b0:	2f08      	cmp	r7, #8
 80060b2:	d109      	bne.n	80060c8 <_printf_i+0x11c>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07db      	lsls	r3, r3, #31
 80060b8:	d506      	bpl.n	80060c8 <_printf_i+0x11c>
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	6923      	ldr	r3, [r4, #16]
 80060be:	429a      	cmp	r2, r3
 80060c0:	dc02      	bgt.n	80060c8 <_printf_i+0x11c>
 80060c2:	2330      	movs	r3, #48	@ 0x30
 80060c4:	3d01      	subs	r5, #1
 80060c6:	702b      	strb	r3, [r5, #0]
 80060c8:	9b03      	ldr	r3, [sp, #12]
 80060ca:	1b5b      	subs	r3, r3, r5
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	9b07      	ldr	r3, [sp, #28]
 80060d0:	0021      	movs	r1, r4
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	9805      	ldr	r0, [sp, #20]
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	aa09      	add	r2, sp, #36	@ 0x24
 80060da:	f7ff fef7 	bl	8005ecc <_printf_common>
 80060de:	3001      	adds	r0, #1
 80060e0:	d148      	bne.n	8006174 <_printf_i+0x1c8>
 80060e2:	2001      	movs	r0, #1
 80060e4:	4240      	negs	r0, r0
 80060e6:	b00b      	add	sp, #44	@ 0x2c
 80060e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ea:	2220      	movs	r2, #32
 80060ec:	6809      	ldr	r1, [r1, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	2278      	movs	r2, #120	@ 0x78
 80060f4:	4932      	ldr	r1, [pc, #200]	@ (80061c0 <_printf_i+0x214>)
 80060f6:	9104      	str	r1, [sp, #16]
 80060f8:	0021      	movs	r1, r4
 80060fa:	3145      	adds	r1, #69	@ 0x45
 80060fc:	700a      	strb	r2, [r1, #0]
 80060fe:	6819      	ldr	r1, [r3, #0]
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	c940      	ldmia	r1!, {r6}
 8006104:	0610      	lsls	r0, r2, #24
 8006106:	d402      	bmi.n	800610e <_printf_i+0x162>
 8006108:	0650      	lsls	r0, r2, #25
 800610a:	d500      	bpl.n	800610e <_printf_i+0x162>
 800610c:	b2b6      	uxth	r6, r6
 800610e:	6019      	str	r1, [r3, #0]
 8006110:	07d3      	lsls	r3, r2, #31
 8006112:	d502      	bpl.n	800611a <_printf_i+0x16e>
 8006114:	2320      	movs	r3, #32
 8006116:	4313      	orrs	r3, r2
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	2e00      	cmp	r6, #0
 800611c:	d001      	beq.n	8006122 <_printf_i+0x176>
 800611e:	2710      	movs	r7, #16
 8006120:	e7aa      	b.n	8006078 <_printf_i+0xcc>
 8006122:	2220      	movs	r2, #32
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	4393      	bics	r3, r2
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	e7f8      	b.n	800611e <_printf_i+0x172>
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	680d      	ldr	r5, [r1, #0]
 8006130:	1d10      	adds	r0, r2, #4
 8006132:	6949      	ldr	r1, [r1, #20]
 8006134:	6018      	str	r0, [r3, #0]
 8006136:	6813      	ldr	r3, [r2, #0]
 8006138:	062e      	lsls	r6, r5, #24
 800613a:	d501      	bpl.n	8006140 <_printf_i+0x194>
 800613c:	6019      	str	r1, [r3, #0]
 800613e:	e002      	b.n	8006146 <_printf_i+0x19a>
 8006140:	066d      	lsls	r5, r5, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0x190>
 8006144:	8019      	strh	r1, [r3, #0]
 8006146:	2300      	movs	r3, #0
 8006148:	9d03      	ldr	r5, [sp, #12]
 800614a:	6123      	str	r3, [r4, #16]
 800614c:	e7bf      	b.n	80060ce <_printf_i+0x122>
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	1d11      	adds	r1, r2, #4
 8006152:	6019      	str	r1, [r3, #0]
 8006154:	6815      	ldr	r5, [r2, #0]
 8006156:	2100      	movs	r1, #0
 8006158:	0028      	movs	r0, r5
 800615a:	6862      	ldr	r2, [r4, #4]
 800615c:	f000 f856 	bl	800620c <memchr>
 8006160:	2800      	cmp	r0, #0
 8006162:	d001      	beq.n	8006168 <_printf_i+0x1bc>
 8006164:	1b40      	subs	r0, r0, r5
 8006166:	6060      	str	r0, [r4, #4]
 8006168:	6863      	ldr	r3, [r4, #4]
 800616a:	6123      	str	r3, [r4, #16]
 800616c:	2300      	movs	r3, #0
 800616e:	9a03      	ldr	r2, [sp, #12]
 8006170:	7013      	strb	r3, [r2, #0]
 8006172:	e7ac      	b.n	80060ce <_printf_i+0x122>
 8006174:	002a      	movs	r2, r5
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	9906      	ldr	r1, [sp, #24]
 800617a:	9805      	ldr	r0, [sp, #20]
 800617c:	9d07      	ldr	r5, [sp, #28]
 800617e:	47a8      	blx	r5
 8006180:	3001      	adds	r0, #1
 8006182:	d0ae      	beq.n	80060e2 <_printf_i+0x136>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	079b      	lsls	r3, r3, #30
 8006188:	d415      	bmi.n	80061b6 <_printf_i+0x20a>
 800618a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618c:	68e0      	ldr	r0, [r4, #12]
 800618e:	4298      	cmp	r0, r3
 8006190:	daa9      	bge.n	80060e6 <_printf_i+0x13a>
 8006192:	0018      	movs	r0, r3
 8006194:	e7a7      	b.n	80060e6 <_printf_i+0x13a>
 8006196:	0022      	movs	r2, r4
 8006198:	2301      	movs	r3, #1
 800619a:	9906      	ldr	r1, [sp, #24]
 800619c:	9805      	ldr	r0, [sp, #20]
 800619e:	9e07      	ldr	r6, [sp, #28]
 80061a0:	3219      	adds	r2, #25
 80061a2:	47b0      	blx	r6
 80061a4:	3001      	adds	r0, #1
 80061a6:	d09c      	beq.n	80060e2 <_printf_i+0x136>
 80061a8:	3501      	adds	r5, #1
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	dcf0      	bgt.n	8006196 <_printf_i+0x1ea>
 80061b4:	e7e9      	b.n	800618a <_printf_i+0x1de>
 80061b6:	2500      	movs	r5, #0
 80061b8:	e7f7      	b.n	80061aa <_printf_i+0x1fe>
 80061ba:	46c0      	nop			@ (mov r8, r8)
 80061bc:	08006586 	.word	0x08006586
 80061c0:	08006597 	.word	0x08006597

080061c4 <memmove>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	4288      	cmp	r0, r1
 80061c8:	d902      	bls.n	80061d0 <memmove+0xc>
 80061ca:	188b      	adds	r3, r1, r2
 80061cc:	4298      	cmp	r0, r3
 80061ce:	d308      	bcc.n	80061e2 <memmove+0x1e>
 80061d0:	2300      	movs	r3, #0
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d007      	beq.n	80061e6 <memmove+0x22>
 80061d6:	5ccc      	ldrb	r4, [r1, r3]
 80061d8:	54c4      	strb	r4, [r0, r3]
 80061da:	3301      	adds	r3, #1
 80061dc:	e7f9      	b.n	80061d2 <memmove+0xe>
 80061de:	5c8b      	ldrb	r3, [r1, r2]
 80061e0:	5483      	strb	r3, [r0, r2]
 80061e2:	3a01      	subs	r2, #1
 80061e4:	d2fb      	bcs.n	80061de <memmove+0x1a>
 80061e6:	bd10      	pop	{r4, pc}

080061e8 <_sbrk_r>:
 80061e8:	2300      	movs	r3, #0
 80061ea:	b570      	push	{r4, r5, r6, lr}
 80061ec:	4d06      	ldr	r5, [pc, #24]	@ (8006208 <_sbrk_r+0x20>)
 80061ee:	0004      	movs	r4, r0
 80061f0:	0008      	movs	r0, r1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	f7fa ff10 	bl	8001018 <_sbrk>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d103      	bne.n	8006204 <_sbrk_r+0x1c>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d000      	beq.n	8006204 <_sbrk_r+0x1c>
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	bd70      	pop	{r4, r5, r6, pc}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	20000348 	.word	0x20000348

0800620c <memchr>:
 800620c:	b2c9      	uxtb	r1, r1
 800620e:	1882      	adds	r2, r0, r2
 8006210:	4290      	cmp	r0, r2
 8006212:	d101      	bne.n	8006218 <memchr+0xc>
 8006214:	2000      	movs	r0, #0
 8006216:	4770      	bx	lr
 8006218:	7803      	ldrb	r3, [r0, #0]
 800621a:	428b      	cmp	r3, r1
 800621c:	d0fb      	beq.n	8006216 <memchr+0xa>
 800621e:	3001      	adds	r0, #1
 8006220:	e7f6      	b.n	8006210 <memchr+0x4>

08006222 <memcpy>:
 8006222:	2300      	movs	r3, #0
 8006224:	b510      	push	{r4, lr}
 8006226:	429a      	cmp	r2, r3
 8006228:	d100      	bne.n	800622c <memcpy+0xa>
 800622a:	bd10      	pop	{r4, pc}
 800622c:	5ccc      	ldrb	r4, [r1, r3]
 800622e:	54c4      	strb	r4, [r0, r3]
 8006230:	3301      	adds	r3, #1
 8006232:	e7f8      	b.n	8006226 <memcpy+0x4>

08006234 <_realloc_r>:
 8006234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006236:	0006      	movs	r6, r0
 8006238:	000c      	movs	r4, r1
 800623a:	0015      	movs	r5, r2
 800623c:	2900      	cmp	r1, #0
 800623e:	d105      	bne.n	800624c <_realloc_r+0x18>
 8006240:	0011      	movs	r1, r2
 8006242:	f7ff fc55 	bl	8005af0 <_malloc_r>
 8006246:	0004      	movs	r4, r0
 8006248:	0020      	movs	r0, r4
 800624a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800624c:	2a00      	cmp	r2, #0
 800624e:	d103      	bne.n	8006258 <_realloc_r+0x24>
 8006250:	f7ff fbe2 	bl	8005a18 <_free_r>
 8006254:	002c      	movs	r4, r5
 8006256:	e7f7      	b.n	8006248 <_realloc_r+0x14>
 8006258:	f000 f81c 	bl	8006294 <_malloc_usable_size_r>
 800625c:	0007      	movs	r7, r0
 800625e:	4285      	cmp	r5, r0
 8006260:	d802      	bhi.n	8006268 <_realloc_r+0x34>
 8006262:	0843      	lsrs	r3, r0, #1
 8006264:	42ab      	cmp	r3, r5
 8006266:	d3ef      	bcc.n	8006248 <_realloc_r+0x14>
 8006268:	0029      	movs	r1, r5
 800626a:	0030      	movs	r0, r6
 800626c:	f7ff fc40 	bl	8005af0 <_malloc_r>
 8006270:	9001      	str	r0, [sp, #4]
 8006272:	2800      	cmp	r0, #0
 8006274:	d101      	bne.n	800627a <_realloc_r+0x46>
 8006276:	9c01      	ldr	r4, [sp, #4]
 8006278:	e7e6      	b.n	8006248 <_realloc_r+0x14>
 800627a:	002a      	movs	r2, r5
 800627c:	42bd      	cmp	r5, r7
 800627e:	d900      	bls.n	8006282 <_realloc_r+0x4e>
 8006280:	003a      	movs	r2, r7
 8006282:	0021      	movs	r1, r4
 8006284:	9801      	ldr	r0, [sp, #4]
 8006286:	f7ff ffcc 	bl	8006222 <memcpy>
 800628a:	0021      	movs	r1, r4
 800628c:	0030      	movs	r0, r6
 800628e:	f7ff fbc3 	bl	8005a18 <_free_r>
 8006292:	e7f0      	b.n	8006276 <_realloc_r+0x42>

08006294 <_malloc_usable_size_r>:
 8006294:	1f0b      	subs	r3, r1, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1f18      	subs	r0, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	da01      	bge.n	80062a2 <_malloc_usable_size_r+0xe>
 800629e:	580b      	ldr	r3, [r1, r0]
 80062a0:	18c0      	adds	r0, r0, r3
 80062a2:	4770      	bx	lr

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	46c0      	nop			@ (mov r8, r8)
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
