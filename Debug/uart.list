
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061fc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080062b8  080062b8  000072b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ac  080065ac  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ac  080065ac  000075ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065b0  080065b0  000075b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080065b4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000060  08006614  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006614  00008358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c68  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002483  00000000  00000000  00018cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0001b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b86  00000000  00000000  0001c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d92  00000000  00000000  0001cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001220c  00000000  00000000  00035930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a12b6  00000000  00000000  00047b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8df2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000e8e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ec8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080062a0 	.word	0x080062a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	080062a0 	.word	0x080062a0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fd4b 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f87f 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f9e1 	bl	8000a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f991 	bl	8000978 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000656:	f000 f941 	bl	80008dc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800065a:	f000 f8bf 	bl	80007dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx1, 1);
 800065e:	492e      	ldr	r1, [pc, #184]	@ (8000718 <main+0xd8>)
 8000660:	4b2e      	ldr	r3, [pc, #184]	@ (800071c <main+0xdc>)
 8000662:	2201      	movs	r2, #1
 8000664:	0018      	movs	r0, r3
 8000666:	f003 f8a7 	bl	80037b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx2, 1);
 800066a:	492d      	ldr	r1, [pc, #180]	@ (8000720 <main+0xe0>)
 800066c:	4b2d      	ldr	r3, [pc, #180]	@ (8000724 <main+0xe4>)
 800066e:	2201      	movs	r2, #1
 8000670:	0018      	movs	r0, r3
 8000672:	f003 f8a1 	bl	80037b8 <HAL_UART_Receive_IT>

  // Uruchomienie PWM na kanale 1 (dioda)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000676:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <main+0xe8>)
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f002 f862 	bl	8002744 <HAL_TIM_PWM_Start>

  // Wyślij instrukcje na start
  char* welcome_msg = "Wpisz liczbe 0-100 i nacisnij Enter aby ustawic jasnosc LED\r\nWpisz 'b' aby wlaczyc tryb oddychania\r\n";
 8000680:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <main+0xec>)
 8000682:	607b      	str	r3, [r7, #4]
  //HAL_UART_Transmit(&huart1, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff fd3c 	bl	8000104 <strlen>
 800068c:	0003      	movs	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	4823      	ldr	r0, [pc, #140]	@ (8000724 <main+0xe4>)
 8000698:	f002 ffea 	bl	8003670 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (breathing_mode)
 800069c:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <main+0xf0>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0fb      	beq.n	800069c <main+0x5c>
    {
      // Efekt oddychania diody
      breathing_counter++;
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <main+0xf4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <main+0xf4>)
 80006ac:	601a      	str	r2, [r3, #0]
      if (breathing_counter >= 3000) // Opóźnienie dla płynnego efektu
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <main+0xf4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <main+0xf8>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d9f1      	bls.n	800069c <main+0x5c>
      {
        breathing_counter = 0;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <main+0xf4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]

        if (breathing_direction == 1) // Zwiększanie jasności
 80006be:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <main+0xfc>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d111      	bne.n	80006ea <main+0xaa>
        {
          pwm_value += 200; // Krok zwiększania
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <main+0x100>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	33c8      	adds	r3, #200	@ 0xc8
 80006cc:	001a      	movs	r2, r3
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <main+0x100>)
 80006d0:	601a      	str	r2, [r3, #0]
          if (pwm_value >= 50000) // Maksymalna wartość PWM
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <main+0x100>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <main+0x104>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d917      	bls.n	800070c <main+0xcc>
          {
            pwm_value = 50000;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <main+0x100>)
 80006de:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <main+0x108>)
 80006e0:	601a      	str	r2, [r3, #0]
            breathing_direction = 0; // Zmieniamy kierunek na zmniejszanie
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <main+0xfc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e010      	b.n	800070c <main+0xcc>
          }
        }
        else // Zmniejszanie jasności
        {
          if (pwm_value >= 200)
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <main+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80006f0:	d906      	bls.n	8000700 <main+0xc0>
          {
            pwm_value -= 200; // Krok zmniejszania
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <main+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3bc8      	subs	r3, #200	@ 0xc8
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <main+0x100>)
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e005      	b.n	800070c <main+0xcc>
          }
          else
          {
            pwm_value = 0;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <main+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
            breathing_direction = 1; // Zmieniamy kierunek na zwiększanie
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <main+0xfc>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
          }
        }

        // Ustawienie nowej wartości PWM
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <main+0xe8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <main+0x100>)
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
    if (breathing_mode)
 8000716:	e7c1      	b.n	800069c <main+0x5c>
 8000718:	200001f0 	.word	0x200001f0
 800071c:	200000c8 	.word	0x200000c8
 8000720:	200001f1 	.word	0x200001f1
 8000724:	2000015c 	.word	0x2000015c
 8000728:	2000007c 	.word	0x2000007c
 800072c:	080062b8 	.word	0x080062b8
 8000730:	20000001 	.word	0x20000001
 8000734:	200001f8 	.word	0x200001f8
 8000738:	00000bb7 	.word	0x00000bb7
 800073c:	20000000 	.word	0x20000000
 8000740:	200001f4 	.word	0x200001f4
 8000744:	0000c34f 	.word	0x0000c34f
 8000748:	0000c350 	.word	0x0000c350

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b093      	sub	sp, #76	@ 0x4c
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	2410      	movs	r4, #16
 8000754:	193b      	adds	r3, r7, r4
 8000756:	0018      	movs	r0, r3
 8000758:	2338      	movs	r3, #56	@ 0x38
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f005 f925 	bl	80059ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000762:	003b      	movs	r3, r7
 8000764:	0018      	movs	r0, r3
 8000766:	2310      	movs	r3, #16
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f005 f91e 	bl	80059ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2380      	movs	r3, #128	@ 0x80
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f001 f865 	bl	8001844 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2202      	movs	r2, #2
 800077e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	0052      	lsls	r2, r2, #1
 8000786:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2240      	movs	r2, #64	@ 0x40
 8000792:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	193b      	adds	r3, r7, r4
 800079c:	0018      	movs	r0, r3
 800079e:	f001 f89d 	bl	80018dc <HAL_RCC_OscConfig>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007a6:	f000 fac7 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	003b      	movs	r3, r7
 80007ac:	2207      	movs	r2, #7
 80007ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c2:	003b      	movs	r3, r7
 80007c4:	2100      	movs	r1, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fba2 	bl	8001f10 <HAL_RCC_ClockConfig>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007d0:	f000 fab2 	bl	8000d38 <Error_Handler>
  }
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b013      	add	sp, #76	@ 0x4c
 80007da:	bd90      	pop	{r4, r7, pc}

080007dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	@ 0x38
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	2328      	movs	r3, #40	@ 0x28
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f005 f8dd 	bl	80059ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f2:	231c      	movs	r3, #28
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	230c      	movs	r3, #12
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f005 f8d5 	bl	80059ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	231c      	movs	r3, #28
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f005 f8ce 	bl	80059ac <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000810:	4b30      	ldr	r3, [pc, #192]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	05d2      	lsls	r2, r2, #23
 8000816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000818:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8000824:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000826:	4a2c      	ldr	r2, [pc, #176]	@ (80008d8 <MX_TIM2_Init+0xfc>)
 8000828:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b28      	ldr	r3, [pc, #160]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000836:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fecb 	bl	80025d4 <HAL_TIM_Base_Init>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 fa79 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000846:	2128      	movs	r1, #40	@ 0x28
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2280      	movs	r2, #128	@ 0x80
 800084c:	0152      	lsls	r2, r2, #5
 800084e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000850:	187a      	adds	r2, r7, r1
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f002 f95e 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000860:	f000 fa6a 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000866:	0018      	movs	r0, r3
 8000868:	f001 ff0c 	bl	8002684 <HAL_TIM_PWM_Init>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000870:	f000 fa62 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	211c      	movs	r1, #28
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000882:	187a      	adds	r2, r7, r1
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f002 fe2d 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000892:	f000 fa51 	bl	8000d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000896:	003b      	movs	r3, r7
 8000898:	2260      	movs	r2, #96	@ 0x60
 800089a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800089c:	003b      	movs	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	003b      	movs	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ae:	0039      	movs	r1, r7
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 f82f 	bl	8002918 <HAL_TIM_PWM_ConfigChannel>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80008be:	f000 fa3b 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <MX_TIM2_Init+0xf8>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fa7d 	bl	8000dc4 <HAL_TIM_MspPostInit>

}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b00e      	add	sp, #56	@ 0x38
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	2000007c 	.word	0x2000007c
 80008d8:	0000c350 	.word	0x0000c350

080008dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e0:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008e2:	4a24      	ldr	r2, [pc, #144]	@ (8000974 <MX_USART1_UART_Init+0x98>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008e8:	22e1      	movs	r2, #225	@ 0xe1
 80008ea:	0252      	lsls	r2, r2, #9
 80008ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fe4c 	bl	80035c4 <HAL_UART_Init>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000930:	f000 fa02 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000936:	2100      	movs	r1, #0
 8000938:	0018      	movs	r0, r3
 800093a:	f004 fe99 	bl	8005670 <HAL_UARTEx_SetTxFifoThreshold>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000942:	f000 f9f9 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 8000948:	2100      	movs	r1, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f004 fed0 	bl	80056f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000954:	f000 f9f0 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <MX_USART1_UART_Init+0x94>)
 800095a:	0018      	movs	r0, r3
 800095c:	f004 fe4e 	bl	80055fc <HAL_UARTEx_DisableFifoMode>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 f9e8 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	200000c8 	.word	0x200000c8
 8000974:	40013800 	.word	0x40013800

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b23      	ldr	r3, [pc, #140]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 800097e:	4a24      	ldr	r2, [pc, #144]	@ (8000a10 <MX_USART2_UART_Init+0x98>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000982:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 8000984:	22e1      	movs	r2, #225	@ 0xe1
 8000986:	0252      	lsls	r2, r2, #9
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 fdfe 	bl	80035c4 <HAL_UART_Init>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f9b4 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f004 fe4b 	bl	8005670 <HAL_UARTEx_SetTxFifoThreshold>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f9ab 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f004 fe82 	bl	80056f0 <HAL_UARTEx_SetRxFifoThreshold>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f9a2 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <MX_USART2_UART_Init+0x94>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f004 fe00 	bl	80055fc <HAL_UARTEx_DisableFifoMode>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f99a 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	2000015c 	.word	0x2000015c
 8000a10:	40004400 	.word	0x40004400

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b089      	sub	sp, #36	@ 0x24
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	240c      	movs	r4, #12
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2314      	movs	r3, #20
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f004 ffc1 	bl	80059ac <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2e:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a30:	2104      	movs	r1, #4
 8000a32:	430a      	orrs	r2, r1
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a42:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a48:	2120      	movs	r1, #32
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a52:	2220      	movs	r2, #32
 8000a54:	4013      	ands	r3, r2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a66:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_GPIO_Init+0x9c>)
 8000a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_Pin_GPIO_Port, LED_GREEN_Pin_Pin, GPIO_PIN_RESET);
 8000a72:	23a0      	movs	r3, #160	@ 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fec4 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin_Pin;
 8000a80:	0021      	movs	r1, r4
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2240      	movs	r2, #64	@ 0x40
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_Pin_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	187a      	adds	r2, r7, r1
 8000a9c:	23a0      	movs	r3, #160	@ 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fd4c 	bl	8001540 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b009      	add	sp, #36	@ 0x24
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <SetBrightness>:

/* USER CODE BEGIN 4 */
void SetBrightness(uint8_t percent)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b091      	sub	sp, #68	@ 0x44
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	701a      	strb	r2, [r3, #0]
  if (percent > 100) percent = 100;
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b64      	cmp	r3, #100	@ 0x64
 8000ac6:	d902      	bls.n	8000ace <SetBrightness+0x1a>
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	2264      	movs	r2, #100	@ 0x64
 8000acc:	701a      	strb	r2, [r3, #0]

  // Przelicz procent na wartość PWM (0-50000)
  uint32_t pwm_val = (uint32_t)((percent * 50000) / 100);
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	0013      	movs	r3, r2
 8000ad4:	015b      	lsls	r3, r3, #5
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	189b      	adds	r3, r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Ustaw PWM
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_val);
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <SetBrightness+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ae6:	635a      	str	r2, [r3, #52]	@ 0x34

  // Wyślij potwierdzenie
  char response[50];
  sprintf(response, "Jasnosc ustawiona na: %d%%\r\n", percent);
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	490b      	ldr	r1, [pc, #44]	@ (8000b1c <SetBrightness+0x68>)
 8000aee:	2408      	movs	r4, #8
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	0018      	movs	r0, r3
 8000af4:	f004 ff38 	bl	8005968 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff fb02 	bl	8000104 <strlen>
 8000b00:	0003      	movs	r3, r0
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	2301      	movs	r3, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	1939      	adds	r1, r7, r4
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <SetBrightness+0x6c>)
 8000b0c:	f002 fdb0 	bl	8003670 <HAL_UART_Transmit>
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b011      	add	sp, #68	@ 0x44
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	2000007c 	.word	0x2000007c
 8000b1c:	08006320 	.word	0x08006320
 8000b20:	200000c8 	.word	0x200000c8

08000b24 <ProcessInput>:

void ProcessInput(uint8_t data)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	701a      	strb	r2, [r3, #0]
  // Echo znaku
  HAL_UART_Transmit(&huart1, &data, 1, HAL_MAX_DELAY);
 8000b30:	2301      	movs	r3, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	1df9      	adds	r1, r7, #7
 8000b36:	484f      	ldr	r0, [pc, #316]	@ (8000c74 <ProcessInput+0x150>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f002 fd99 	bl	8003670 <HAL_UART_Transmit>

  if (data == '\r' || data == '\n') // Enter
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b0d      	cmp	r3, #13
 8000b44:	d003      	beq.n	8000b4e <ProcessInput+0x2a>
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b0a      	cmp	r3, #10
 8000b4c:	d147      	bne.n	8000bde <ProcessInput+0xba>
  {
    if (input_index > 0)
 8000b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c78 <ProcessInput+0x154>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d03b      	beq.n	8000bce <ProcessInput+0xaa>
    {
      input_buffer[input_index] = '\0'; // Zakończ string
 8000b56:	4b48      	ldr	r3, [pc, #288]	@ (8000c78 <ProcessInput+0x154>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	4b47      	ldr	r3, [pc, #284]	@ (8000c7c <ProcessInput+0x158>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	5499      	strb	r1, [r3, r2]

      // Sprawdź czy to komenda 'b' dla trybu oddychania
      if (input_buffer[0] == 'b' && input_index == 1)
 8000b62:	4b46      	ldr	r3, [pc, #280]	@ (8000c7c <ProcessInput+0x158>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b62      	cmp	r3, #98	@ 0x62
 8000b68:	d10e      	bne.n	8000b88 <ProcessInput+0x64>
 8000b6a:	4b43      	ldr	r3, [pc, #268]	@ (8000c78 <ProcessInput+0x154>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10a      	bne.n	8000b88 <ProcessInput+0x64>
      {
        breathing_mode = 1;
 8000b72:	4b43      	ldr	r3, [pc, #268]	@ (8000c80 <ProcessInput+0x15c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nTryb oddychania wlaczony\r\n", 28, HAL_MAX_DELAY);
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	4941      	ldr	r1, [pc, #260]	@ (8000c84 <ProcessInput+0x160>)
 8000b7e:	483d      	ldr	r0, [pc, #244]	@ (8000c74 <ProcessInput+0x150>)
 8000b80:	221c      	movs	r2, #28
 8000b82:	f002 fd75 	bl	8003670 <HAL_UART_Transmit>
 8000b86:	e01f      	b.n	8000bc8 <ProcessInput+0xa4>
      }
      else
      {
        // Konwertuj na liczbę
        int value = atoi((char*)input_buffer);
 8000b88:	4b3c      	ldr	r3, [pc, #240]	@ (8000c7c <ProcessInput+0x158>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f004 fe50 	bl	8005830 <atoi>
 8000b90:	0003      	movs	r3, r0
 8000b92:	60fb      	str	r3, [r7, #12]
        if (value >= 0 && value <= 100)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0f      	blt.n	8000bba <ProcessInput+0x96>
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b64      	cmp	r3, #100	@ 0x64
 8000b9e:	dc0c      	bgt.n	8000bba <ProcessInput+0x96>
        {
          breathing_mode = 0; // Wyłącz tryb oddychania
 8000ba0:	4b37      	ldr	r3, [pc, #220]	@ (8000c80 <ProcessInput+0x15c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
          brightness_percent = value;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b37      	ldr	r3, [pc, #220]	@ (8000c88 <ProcessInput+0x164>)
 8000bac:	701a      	strb	r2, [r3, #0]
          SetBrightness(brightness_percent);
 8000bae:	4b36      	ldr	r3, [pc, #216]	@ (8000c88 <ProcessInput+0x164>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff7e 	bl	8000ab4 <SetBrightness>
 8000bb8:	e006      	b.n	8000bc8 <ProcessInput+0xa4>
        }
        else
        {
          HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nBledna wartosc! Wpisz liczbe 0-100\r\n", 38, HAL_MAX_DELAY);
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	4933      	ldr	r1, [pc, #204]	@ (8000c8c <ProcessInput+0x168>)
 8000bc0:	482c      	ldr	r0, [pc, #176]	@ (8000c74 <ProcessInput+0x150>)
 8000bc2:	2226      	movs	r2, #38	@ 0x26
 8000bc4:	f002 fd54 	bl	8003670 <HAL_UART_Transmit>
        }
      }

      input_index = 0; // Resetuj bufor
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <ProcessInput+0x154>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n> ", 4, HAL_MAX_DELAY);
 8000bce:	2301      	movs	r3, #1
 8000bd0:	425b      	negs	r3, r3
 8000bd2:	492f      	ldr	r1, [pc, #188]	@ (8000c90 <ProcessInput+0x16c>)
 8000bd4:	4827      	ldr	r0, [pc, #156]	@ (8000c74 <ProcessInput+0x150>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	f002 fd4a 	bl	8003670 <HAL_UART_Transmit>
 8000bdc:	e045      	b.n	8000c6a <ProcessInput+0x146>
  }
  else if (data == 8 || data == 127) // Backspace
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d003      	beq.n	8000bee <ProcessInput+0xca>
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bec:	d111      	bne.n	8000c12 <ProcessInput+0xee>
  {
    if (input_index > 0)
 8000bee:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <ProcessInput+0x154>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d039      	beq.n	8000c6a <ProcessInput+0x146>
    {
      input_index--;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <ProcessInput+0x154>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <ProcessInput+0x154>)
 8000c00:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)" \b", 2, HAL_MAX_DELAY);
 8000c02:	2301      	movs	r3, #1
 8000c04:	425b      	negs	r3, r3
 8000c06:	4923      	ldr	r1, [pc, #140]	@ (8000c94 <ProcessInput+0x170>)
 8000c08:	481a      	ldr	r0, [pc, #104]	@ (8000c74 <ProcessInput+0x150>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	f002 fd30 	bl	8003670 <HAL_UART_Transmit>
    if (input_index > 0)
 8000c10:	e02b      	b.n	8000c6a <ProcessInput+0x146>
    }
  }
  else if (data >= '0' && data <= '9' && input_index < sizeof(input_buffer) - 1)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c18:	d913      	bls.n	8000c42 <ProcessInput+0x11e>
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b39      	cmp	r3, #57	@ 0x39
 8000c20:	d80f      	bhi.n	8000c42 <ProcessInput+0x11e>
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <ProcessInput+0x154>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d80b      	bhi.n	8000c42 <ProcessInput+0x11e>
  {
    input_buffer[input_index++] = data;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <ProcessInput+0x154>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	b2d1      	uxtb	r1, r2
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <ProcessInput+0x154>)
 8000c34:	7011      	strb	r1, [r2, #0]
 8000c36:	001a      	movs	r2, r3
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	7819      	ldrb	r1, [r3, #0]
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <ProcessInput+0x158>)
 8000c3e:	5499      	strb	r1, [r3, r2]
 8000c40:	e013      	b.n	8000c6a <ProcessInput+0x146>
  }
  else if (data == 'b' && input_index < sizeof(input_buffer) - 1)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b62      	cmp	r3, #98	@ 0x62
 8000c48:	d10f      	bne.n	8000c6a <ProcessInput+0x146>
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <ProcessInput+0x154>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d80b      	bhi.n	8000c6a <ProcessInput+0x146>
  {
    input_buffer[input_index++] = data;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <ProcessInput+0x154>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	b2d1      	uxtb	r1, r2
 8000c5a:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <ProcessInput+0x154>)
 8000c5c:	7011      	strb	r1, [r2, #0]
 8000c5e:	001a      	movs	r2, r3
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	7819      	ldrb	r1, [r3, #0]
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <ProcessInput+0x158>)
 8000c66:	5499      	strb	r1, [r3, r2]
  }
}
 8000c68:	e7ff      	b.n	8000c6a <ProcessInput+0x146>
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	200000c8 	.word	0x200000c8
 8000c78:	20000206 	.word	0x20000206
 8000c7c:	200001fc 	.word	0x200001fc
 8000c80:	20000001 	.word	0x20000001
 8000c84:	08006340 	.word	0x08006340
 8000c88:	20000002 	.word	0x20000002
 8000c8c:	08006360 	.word	0x08006360
 8000c90:	08006388 	.word	0x08006388
 8000c94:	08006390 	.word	0x08006390

08000c98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d24 <HAL_UART_RxCpltCallback+0x8c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_UART_RxCpltCallback+0x2a>
  {
    ProcessInput(rx2);
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <HAL_UART_RxCpltCallback+0x90>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff ff38 	bl	8000b24 <ProcessInput>
    HAL_UART_Receive_IT(&huart1, &rx2, 1);
 8000cb4:	491c      	ldr	r1, [pc, #112]	@ (8000d28 <HAL_UART_RxCpltCallback+0x90>)
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <HAL_UART_RxCpltCallback+0x94>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f002 fd7c 	bl	80037b8 <HAL_UART_Receive_IT>
    }

    HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
    HAL_UART_Receive_IT(&huart2, &rx1, 1);
  }
}
 8000cc0:	e02c      	b.n	8000d1c <HAL_UART_RxCpltCallback+0x84>
  else if (huart->Instance == USART2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_UART_RxCpltCallback+0x8c>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d127      	bne.n	8000d1c <HAL_UART_RxCpltCallback+0x84>
    if (rx1 >= '0' && rx1 <= '9')
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HAL_UART_RxCpltCallback+0x98>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cd2:	d911      	bls.n	8000cf8 <HAL_UART_RxCpltCallback+0x60>
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_UART_RxCpltCallback+0x98>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b39      	cmp	r3, #57	@ 0x39
 8000cda:	d80d      	bhi.n	8000cf8 <HAL_UART_RxCpltCallback+0x60>
      tx = rx1;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <HAL_UART_RxCpltCallback+0x98>)
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
      if (tx > '9') tx = '0';
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	18bb      	adds	r3, r7, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b39      	cmp	r3, #57	@ 0x39
 8000cee:	d907      	bls.n	8000d00 <HAL_UART_RxCpltCallback+0x68>
 8000cf0:	18bb      	adds	r3, r7, r2
 8000cf2:	2230      	movs	r2, #48	@ 0x30
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e003      	b.n	8000d00 <HAL_UART_RxCpltCallback+0x68>
      tx = '!';
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2221      	movs	r2, #33	@ 0x21
 8000cfe:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
 8000d00:	2301      	movs	r3, #1
 8000d02:	425b      	negs	r3, r3
 8000d04:	220f      	movs	r2, #15
 8000d06:	18b9      	adds	r1, r7, r2
 8000d08:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <HAL_UART_RxCpltCallback+0x94>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f002 fcb0 	bl	8003670 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, &rx1, 1);
 8000d10:	4907      	ldr	r1, [pc, #28]	@ (8000d30 <HAL_UART_RxCpltCallback+0x98>)
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_UART_RxCpltCallback+0x9c>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	0018      	movs	r0, r3
 8000d18:	f002 fd4e 	bl	80037b8 <HAL_UART_Receive_IT>
}
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40004400 	.word	0x40004400
 8000d28:	200001f1 	.word	0x200001f1
 8000d2c:	200000c8 	.word	0x200000c8
 8000d30:	200001f0 	.word	0x200001f0
 8000d34:	2000015c 	.word	0x2000015c

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	e7fd      	b.n	8000d40 <Error_Handler+0x8>

08000d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d68:	2180      	movs	r1, #128	@ 0x80
 8000d6a:	0549      	lsls	r1, r1, #21
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d74:	2380      	movs	r3, #128	@ 0x80
 8000d76:	055b      	lsls	r3, r3, #21
 8000d78:	4013      	ands	r3, r2
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d10b      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x34>)
 8000da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x34>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	430a      	orrs	r2, r1
 8000daa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x34>)
 8000dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000db0:	2201      	movs	r2, #1
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b004      	add	sp, #16
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	240c      	movs	r4, #12
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f004 fde8 	bl	80059ac <memset>
  if(htim->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2380      	movs	r3, #128	@ 0x80
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d122      	bne.n	8000e2e <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <HAL_TIM_MspPostInit+0x74>)
 8000dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_TIM_MspPostInit+0x74>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	430a      	orrs	r2, r1
 8000df2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000df4:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <HAL_TIM_MspPostInit+0x74>)
 8000df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e00:	0021      	movs	r1, r4
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2220      	movs	r2, #32
 8000e06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	187a      	adds	r2, r7, r1
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fb89 	bl	8001540 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b009      	add	sp, #36	@ 0x24
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b099      	sub	sp, #100	@ 0x64
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	234c      	movs	r3, #76	@ 0x4c
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f004 fdac 	bl	80059ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	2418      	movs	r4, #24
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	0018      	movs	r0, r3
 8000e5a:	2334      	movs	r3, #52	@ 0x34
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f004 fda4 	bl	80059ac <memset>
  if(huart->Instance==USART1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa0 <HAL_UART_MspInit+0x164>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d146      	bne.n	8000efc <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f001 f9f1 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e86:	f7ff ff57 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8a:	4b46      	ldr	r3, [pc, #280]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e8e:	4b45      	ldr	r3, [pc, #276]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	01c9      	lsls	r1, r1, #7
 8000e94:	430a      	orrs	r2, r1
 8000e96:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e98:	4b42      	ldr	r3, [pc, #264]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000e9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	01db      	lsls	r3, r3, #7
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000eac:	2104      	movs	r1, #4
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ebe:	214c      	movs	r1, #76	@ 0x4c
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2230      	movs	r2, #48	@ 0x30
 8000ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2202      	movs	r2, #2
 8000eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2201      	movs	r2, #1
 8000edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	4a31      	ldr	r2, [pc, #196]	@ (8000fa8 <HAL_UART_MspInit+0x16c>)
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	0010      	movs	r0, r2
 8000ee6:	f000 fb2b 	bl	8001540 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	201b      	movs	r0, #27
 8000ef0:	f000 fa28 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ef4:	201b      	movs	r0, #27
 8000ef6:	f000 fa3a 	bl	800136e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000efa:	e04c      	b.n	8000f96 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <HAL_UART_MspInit+0x170>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d147      	bne.n	8000f96 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f06:	2118      	movs	r1, #24
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	0018      	movs	r0, r3
 8000f18:	f001 f9a4 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000f20:	f7ff ff0a 	bl	8000d38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f24:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	0289      	lsls	r1, r1, #10
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_UART_MspInit+0x168>)
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f50:	2201      	movs	r2, #1
 8000f52:	4013      	ands	r3, r2
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f58:	214c      	movs	r1, #76	@ 0x4c
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2202      	movs	r2, #2
 8000f64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2201      	movs	r2, #1
 8000f6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2201      	movs	r2, #1
 8000f76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	187a      	adds	r2, r7, r1
 8000f7a:	23a0      	movs	r3, #160	@ 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f000 fadd 	bl	8001540 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	201c      	movs	r0, #28
 8000f8c:	f000 f9da 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f90:	201c      	movs	r0, #28
 8000f92:	f000 f9ec 	bl	800136e <HAL_NVIC_EnableIRQ>
}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b019      	add	sp, #100	@ 0x64
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	40013800 	.word	0x40013800
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	50000800 	.word	0x50000800
 8000fac:	40004400 	.word	0x40004400

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f8ec 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <USART1_IRQHandler+0x14>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f002 fc42 	bl	8003874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	200000c8 	.word	0x200000c8

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <USART2_IRQHandler+0x14>)
 8001002:	0018      	movs	r0, r3
 8001004:	f002 fc36 	bl	8003874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	2000015c 	.word	0x2000015c

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	18d3      	adds	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f004 fcba 	bl	80059bc <__errno>
 8001048:	0003      	movs	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	2301      	movs	r3, #1
 8001050:	425b      	negs	r3, r3
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	18d2      	adds	r2, r2, r3
 8001062:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <_sbrk+0x64>)
 8001064:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b006      	add	sp, #24
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20009000 	.word	0x20009000
 8001074:	00000400 	.word	0x00000400
 8001078:	20000208 	.word	0x20000208
 800107c:	20000358 	.word	0x20000358

08001080 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800108c:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800108e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001090:	f7ff fff6 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <LoopForever+0xe>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	@ (80010d8 <LoopForever+0x16>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ba:	f004 fc85 	bl	80059c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010be:	f7ff fabf 	bl	8000640 <main>

080010c2 <LoopForever>:

LoopForever:
  b LoopForever
 80010c2:	e7fe      	b.n	80010c2 <LoopForever>
  ldr   r0, =_estack
 80010c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010d0:	080065b4 	.word	0x080065b4
  ldr r2, =_sbss
 80010d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010d8:	20000358 	.word	0x20000358

080010dc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_COMP_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <HAL_Init+0x3c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_Init+0x3c>)
 80010f2:	2180      	movs	r1, #128	@ 0x80
 80010f4:	0049      	lsls	r1, r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f810 	bl	8001120 <HAL_InitTick>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d003      	beq.n	800110c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e001      	b.n	8001110 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fe1a 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <HAL_InitTick+0x88>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d02b      	beq.n	8001190 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001138:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <HAL_InitTick+0x8c>)
 800113a:	681c      	ldr	r4, [r3, #0]
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_InitTick+0x88>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0019      	movs	r1, r3
 8001142:	23fa      	movs	r3, #250	@ 0xfa
 8001144:	0098      	lsls	r0, r3, #2
 8001146:	f7fe ffef 	bl	8000128 <__udivsi3>
 800114a:	0003      	movs	r3, r0
 800114c:	0019      	movs	r1, r3
 800114e:	0020      	movs	r0, r4
 8001150:	f7fe ffea 	bl	8000128 <__udivsi3>
 8001154:	0003      	movs	r3, r0
 8001156:	0018      	movs	r0, r3
 8001158:	f000 f919 	bl	800138e <HAL_SYSTICK_Config>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d112      	bne.n	8001186 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d80a      	bhi.n	800117c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2301      	movs	r3, #1
 800116a:	425b      	negs	r3, r3
 800116c:	2200      	movs	r2, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f000 f8e8 	bl	8001344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <HAL_InitTick+0x90>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e00d      	b.n	8001198 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e008      	b.n	8001198 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001186:	230f      	movs	r3, #15
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e003      	b.n	8001198 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b005      	add	sp, #20
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	2000000c 	.word	0x2000000c
 80011ac:	20000004 	.word	0x20000004
 80011b0:	20000008 	.word	0x20000008

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	001a      	movs	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	18d2      	adds	r2, r2, r3
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_IncTick+0x20>)
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	2000000c 	.word	0x2000000c
 80011d4:	2000020c 	.word	0x2000020c

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	@ (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	2000020c 	.word	0x2000020c

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	0002      	movs	r2, r0
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80011fe:	d809      	bhi.n	8001214 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	001a      	movs	r2, r3
 8001206:	231f      	movs	r3, #31
 8001208:	401a      	ands	r2, r3
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <__NVIC_EnableIRQ+0x30>)
 800120c:	2101      	movs	r1, #1
 800120e:	4091      	lsls	r1, r2
 8001210:	000a      	movs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	0002      	movs	r2, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b7f      	cmp	r3, #127	@ 0x7f
 8001234:	d828      	bhi.n	8001288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001236:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <__NVIC_SetPriority+0xd4>)
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b25b      	sxtb	r3, r3
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	33c0      	adds	r3, #192	@ 0xc0
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	589b      	ldr	r3, [r3, r2]
 8001246:	1dfa      	adds	r2, r7, #7
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	0011      	movs	r1, r2
 800124c:	2203      	movs	r2, #3
 800124e:	400a      	ands	r2, r1
 8001250:	00d2      	lsls	r2, r2, #3
 8001252:	21ff      	movs	r1, #255	@ 0xff
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	43d2      	mvns	r2, r2
 800125a:	401a      	ands	r2, r3
 800125c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	019b      	lsls	r3, r3, #6
 8001262:	22ff      	movs	r2, #255	@ 0xff
 8001264:	401a      	ands	r2, r3
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0018      	movs	r0, r3
 800126c:	2303      	movs	r3, #3
 800126e:	4003      	ands	r3, r0
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001274:	481f      	ldr	r0, [pc, #124]	@ (80012f4 <__NVIC_SetPriority+0xd4>)
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	430a      	orrs	r2, r1
 8001280:	33c0      	adds	r3, #192	@ 0xc0
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001286:	e031      	b.n	80012ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <__NVIC_SetPriority+0xd8>)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0019      	movs	r1, r3
 8001290:	230f      	movs	r3, #15
 8001292:	400b      	ands	r3, r1
 8001294:	3b08      	subs	r3, #8
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3306      	adds	r3, #6
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	18d3      	adds	r3, r2, r3
 800129e:	3304      	adds	r3, #4
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1dfa      	adds	r2, r7, #7
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	0011      	movs	r1, r2
 80012a8:	2203      	movs	r2, #3
 80012aa:	400a      	ands	r2, r1
 80012ac:	00d2      	lsls	r2, r2, #3
 80012ae:	21ff      	movs	r1, #255	@ 0xff
 80012b0:	4091      	lsls	r1, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	43d2      	mvns	r2, r2
 80012b6:	401a      	ands	r2, r3
 80012b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	019b      	lsls	r3, r3, #6
 80012be:	22ff      	movs	r2, #255	@ 0xff
 80012c0:	401a      	ands	r2, r3
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	0018      	movs	r0, r3
 80012c8:	2303      	movs	r3, #3
 80012ca:	4003      	ands	r3, r0
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d0:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <__NVIC_SetPriority+0xd8>)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	001c      	movs	r4, r3
 80012d8:	230f      	movs	r3, #15
 80012da:	4023      	ands	r3, r4
 80012dc:	3b08      	subs	r3, #8
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	430a      	orrs	r2, r1
 80012e2:	3306      	adds	r3, #6
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	18c3      	adds	r3, r0, r3
 80012e8:	3304      	adds	r3, #4
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b003      	add	sp, #12
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	045b      	lsls	r3, r3, #17
 800130c:	429a      	cmp	r2, r3
 800130e:	d301      	bcc.n	8001314 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001310:	2301      	movs	r3, #1
 8001312:	e010      	b.n	8001336 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <SysTick_Config+0x44>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	3a01      	subs	r2, #1
 800131a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131c:	2301      	movs	r3, #1
 800131e:	425b      	negs	r3, r3
 8001320:	2103      	movs	r1, #3
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff ff7c 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <SysTick_Config+0x44>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <SysTick_Config+0x44>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	210f      	movs	r1, #15
 8001350:	187b      	adds	r3, r7, r1
 8001352:	1c02      	adds	r2, r0, #0
 8001354:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	187b      	adds	r3, r7, r1
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b004      	add	sp, #16
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	0002      	movs	r2, r0
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff ff33 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ffaf 	bl	80012fc <SysTick_Config>
 800139e:	0003      	movs	r3, r0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e050      	b.n	800145c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2225      	movs	r2, #37	@ 0x25
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d008      	beq.n	80013d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2204      	movs	r2, #4
 80013ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	@ 0x24
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e041      	b.n	800145c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	210e      	movs	r1, #14
 80013e4:	438a      	bics	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	491c      	ldr	r1, [pc, #112]	@ (8001464 <HAL_DMA_Abort+0xbc>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2101      	movs	r1, #1
 8001404:	438a      	bics	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_DMA_Abort+0xc0>)
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	221c      	movs	r2, #28
 8001412:	4013      	ands	r3, r2
 8001414:	2201      	movs	r2, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <HAL_DMA_Abort+0xc0>)
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001426:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00c      	beq.n	800144a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800143a:	490a      	ldr	r1, [pc, #40]	@ (8001464 <HAL_DMA_Abort+0xbc>)
 800143c:	400a      	ands	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001448:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2225      	movs	r2, #37	@ 0x25
 800144e:	2101      	movs	r1, #1
 8001450:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2224      	movs	r2, #36	@ 0x24
 8001456:	2100      	movs	r1, #0
 8001458:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}
 8001464:	fffffeff 	.word	0xfffffeff
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001474:	210f      	movs	r1, #15
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2225      	movs	r2, #37	@ 0x25
 8001480:	5c9b      	ldrb	r3, [r3, r2]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d006      	beq.n	8001496 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2204      	movs	r2, #4
 800148c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
 8001494:	e049      	b.n	800152a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	210e      	movs	r1, #14
 80014a2:	438a      	bics	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	438a      	bics	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c0:	491d      	ldr	r1, [pc, #116]	@ (8001538 <HAL_DMA_Abort_IT+0xcc>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <HAL_DMA_Abort_IT+0xd0>)
 80014c8:	6859      	ldr	r1, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	221c      	movs	r2, #28
 80014d0:	4013      	ands	r3, r2
 80014d2:	2201      	movs	r2, #1
 80014d4:	409a      	lsls	r2, r3
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_DMA_Abort_IT+0xd0>)
 80014d8:	430a      	orrs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014f8:	490f      	ldr	r1, [pc, #60]	@ (8001538 <HAL_DMA_Abort_IT+0xcc>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001506:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2225      	movs	r2, #37	@ 0x25
 800150c:	2101      	movs	r1, #1
 800150e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2224      	movs	r2, #36	@ 0x24
 8001514:	2100      	movs	r1, #0
 8001516:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	0010      	movs	r0, r2
 8001528:	4798      	blx	r3
    }
  }
  return status;
 800152a:	230f      	movs	r3, #15
 800152c:	18fb      	adds	r3, r7, r3
 800152e:	781b      	ldrb	r3, [r3, #0]
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b004      	add	sp, #16
 8001536:	bd80      	pop	{r7, pc}
 8001538:	fffffeff 	.word	0xfffffeff
 800153c:	40020000 	.word	0x40020000

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	e147      	b.n	80017e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4091      	lsls	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d100      	bne.n	8001568 <HAL_GPIO_Init+0x28>
 8001566:	e138      	b.n	80017da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	4013      	ands	r3, r2
 8001570:	2b01      	cmp	r3, #1
 8001572:	d005      	beq.n	8001580 <HAL_GPIO_Init+0x40>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2203      	movs	r2, #3
 800157a:	4013      	ands	r3, r2
 800157c:	2b02      	cmp	r3, #2
 800157e:	d130      	bne.n	80015e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	409a      	lsls	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	409a      	lsls	r2, r3
 80015a2:	0013      	movs	r3, r2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015b6:	2201      	movs	r2, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	2201      	movs	r2, #1
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2203      	movs	r2, #3
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d017      	beq.n	800161e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	4013      	ands	r3, r2
 8001626:	2b02      	cmp	r3, #2
 8001628:	d123      	bne.n	8001672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	58d3      	ldr	r3, [r2, r3]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2207      	movs	r2, #7
 800163c:	4013      	ands	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	43da      	mvns	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2107      	movs	r1, #7
 8001656:	400b      	ands	r3, r1
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	6939      	ldr	r1, [r7, #16]
 8001670:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2203      	movs	r2, #3
 8001690:	401a      	ands	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	23c0      	movs	r3, #192	@ 0xc0
 80016ac:	029b      	lsls	r3, r3, #10
 80016ae:	4013      	ands	r3, r2
 80016b0:	d100      	bne.n	80016b4 <HAL_GPIO_Init+0x174>
 80016b2:	e092      	b.n	80017da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016b4:	4a50      	ldr	r2, [pc, #320]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3318      	adds	r3, #24
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	589b      	ldr	r3, [r3, r2]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2203      	movs	r2, #3
 80016c6:	4013      	ands	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	220f      	movs	r2, #15
 80016cc:	409a      	lsls	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	43da      	mvns	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	23a0      	movs	r3, #160	@ 0xa0
 80016dc:	05db      	lsls	r3, r3, #23
 80016de:	429a      	cmp	r2, r3
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x1ca>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a45      	ldr	r2, [pc, #276]	@ (80017fc <HAL_GPIO_Init+0x2bc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x1c6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a44      	ldr	r2, [pc, #272]	@ (8001800 <HAL_GPIO_Init+0x2c0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x1c2>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a43      	ldr	r2, [pc, #268]	@ (8001804 <HAL_GPIO_Init+0x2c4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x1be>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x1cc>
 80016fe:	2305      	movs	r3, #5
 8001700:	e004      	b.n	800170c <HAL_GPIO_Init+0x1cc>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x1cc>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x1cc>
 800170a:	2300      	movs	r3, #0
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	2103      	movs	r1, #3
 8001710:	400a      	ands	r2, r1
 8001712:	00d2      	lsls	r2, r2, #3
 8001714:	4093      	lsls	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800171c:	4936      	ldr	r1, [pc, #216]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3318      	adds	r3, #24
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800172a:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	2380      	movs	r3, #128	@ 0x80
 8001740:	035b      	lsls	r3, r3, #13
 8001742:	4013      	ands	r3, r2
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174e:	4b2a      	ldr	r3, [pc, #168]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	039b      	lsls	r3, r3, #14
 800176c:	4013      	ands	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177e:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 8001780:	2384      	movs	r3, #132	@ 0x84
 8001782:	58d3      	ldr	r3, [r2, r3]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43da      	mvns	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a4:	4914      	ldr	r1, [pc, #80]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80017a6:	2284      	movs	r2, #132	@ 0x84
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017ac:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	58d3      	ldr	r3, [r2, r3]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	4013      	ands	r3, r2
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d2:	4909      	ldr	r1, [pc, #36]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 80017d4:	2280      	movs	r2, #128	@ 0x80
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	40da      	lsrs	r2, r3
 80017e8:	1e13      	subs	r3, r2, #0
 80017ea:	d000      	beq.n	80017ee <HAL_GPIO_Init+0x2ae>
 80017ec:	e6b0      	b.n	8001550 <HAL_GPIO_Init+0x10>
  }
}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b006      	add	sp, #24
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021800 	.word	0x40021800
 80017fc:	50000400 	.word	0x50000400
 8001800:	50000800 	.word	0x50000800
 8001804:	50000c00 	.word	0x50000c00

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	0008      	movs	r0, r1
 8001812:	0011      	movs	r1, r2
 8001814:	1cbb      	adds	r3, r7, #2
 8001816:	1c02      	adds	r2, r0, #0
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	1c7b      	adds	r3, r7, #1
 800181c:	1c0a      	adds	r2, r1, #0
 800181e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001820:	1c7b      	adds	r3, r7, #1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001828:	1cbb      	adds	r3, r7, #2
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001852:	4013      	ands	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	429a      	cmp	r2, r3
 8001866:	d11f      	bne.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	0013      	movs	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	189b      	adds	r3, r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4912      	ldr	r1, [pc, #72]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001876:	0018      	movs	r0, r3
 8001878:	f7fe fc56 	bl	8000128 <__udivsi3>
 800187c:	0003      	movs	r3, r0
 800187e:	3301      	adds	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001882:	e008      	b.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3b01      	subs	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e001      	b.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e009      	b.n	80018aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	401a      	ands	r2, r3
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d0ed      	beq.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	40007000 	.word	0x40007000
 80018b8:	fffff9ff 	.word	0xfffff9ff
 80018bc:	20000004 	.word	0x20000004
 80018c0:	000f4240 	.word	0x000f4240

080018c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	23e0      	movs	r3, #224	@ 0xe0
 80018ce:	01db      	lsls	r3, r3, #7
 80018d0:	4013      	ands	r3, r2
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e2fe      	b.n	8001eec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	d100      	bne.n	80018fa <HAL_RCC_OscConfig+0x1e>
 80018f8:	e07c      	b.n	80019f4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fa:	4bc3      	ldr	r3, [pc, #780]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2238      	movs	r2, #56	@ 0x38
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001904:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2203      	movs	r2, #3
 800190a:	4013      	ands	r3, r2
 800190c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2b10      	cmp	r3, #16
 8001912:	d102      	bne.n	800191a <HAL_RCC_OscConfig+0x3e>
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d002      	beq.n	8001920 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d10b      	bne.n	8001938 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	4bb9      	ldr	r3, [pc, #740]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	029b      	lsls	r3, r3, #10
 8001928:	4013      	ands	r3, r2
 800192a:	d062      	beq.n	80019f2 <HAL_RCC_OscConfig+0x116>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d15e      	bne.n	80019f2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e2d9      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	025b      	lsls	r3, r3, #9
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_RCC_OscConfig+0x78>
 8001944:	4bb0      	ldr	r3, [pc, #704]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4baf      	ldr	r3, [pc, #700]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 800194a:	2180      	movs	r1, #128	@ 0x80
 800194c:	0249      	lsls	r1, r1, #9
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e020      	b.n	8001996 <HAL_RCC_OscConfig+0xba>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	23a0      	movs	r3, #160	@ 0xa0
 800195a:	02db      	lsls	r3, r3, #11
 800195c:	429a      	cmp	r2, r3
 800195e:	d10e      	bne.n	800197e <HAL_RCC_OscConfig+0xa2>
 8001960:	4ba9      	ldr	r3, [pc, #676]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001966:	2180      	movs	r1, #128	@ 0x80
 8001968:	02c9      	lsls	r1, r1, #11
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	4ba6      	ldr	r3, [pc, #664]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4ba5      	ldr	r3, [pc, #660]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001974:	2180      	movs	r1, #128	@ 0x80
 8001976:	0249      	lsls	r1, r1, #9
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e00b      	b.n	8001996 <HAL_RCC_OscConfig+0xba>
 800197e:	4ba2      	ldr	r3, [pc, #648]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4ba1      	ldr	r3, [pc, #644]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001984:	49a1      	ldr	r1, [pc, #644]	@ (8001c0c <HAL_RCC_OscConfig+0x330>)
 8001986:	400a      	ands	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	4b9f      	ldr	r3, [pc, #636]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b9e      	ldr	r3, [pc, #632]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001990:	499f      	ldr	r1, [pc, #636]	@ (8001c10 <HAL_RCC_OscConfig+0x334>)
 8001992:	400a      	ands	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d014      	beq.n	80019c8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff fc1b 	bl	80011d8 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff fc16 	bl	80011d8 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	@ 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e298      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ba:	4b93      	ldr	r3, [pc, #588]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0xcc>
 80019c6:	e015      	b.n	80019f4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fc06 	bl	80011d8 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff fc01 	bl	80011d8 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	@ 0x64
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e283      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e4:	4b88      	ldr	r3, [pc, #544]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0xf6>
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2202      	movs	r2, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d100      	bne.n	8001a00 <HAL_RCC_OscConfig+0x124>
 80019fe:	e099      	b.n	8001b34 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a00:	4b81      	ldr	r3, [pc, #516]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2238      	movs	r2, #56	@ 0x38
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d102      	bne.n	8001a20 <HAL_RCC_OscConfig+0x144>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d002      	beq.n	8001a26 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d135      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a26:	4b78      	ldr	r3, [pc, #480]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x162>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e256      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b72      	ldr	r3, [pc, #456]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a74      	ldr	r2, [pc, #464]	@ (8001c14 <HAL_RCC_OscConfig+0x338>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	021a      	lsls	r2, r3, #8
 8001a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a5a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c18 <HAL_RCC_OscConfig+0x33c>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	4b67      	ldr	r3, [pc, #412]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a6e:	4b66      	ldr	r3, [pc, #408]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0adb      	lsrs	r3, r3, #11
 8001a74:	2207      	movs	r2, #7
 8001a76:	4013      	ands	r3, r2
 8001a78:	4a68      	ldr	r2, [pc, #416]	@ (8001c1c <HAL_RCC_OscConfig+0x340>)
 8001a7a:	40da      	lsrs	r2, r3
 8001a7c:	4b68      	ldr	r3, [pc, #416]	@ (8001c20 <HAL_RCC_OscConfig+0x344>)
 8001a7e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a80:	4b68      	ldr	r3, [pc, #416]	@ (8001c24 <HAL_RCC_OscConfig+0x348>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fb4b 	bl	8001120 <HAL_InitTick>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d051      	beq.n	8001b32 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e22c      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d030      	beq.n	8001afc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001c18 <HAL_RCC_OscConfig+0x33c>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	4b57      	ldr	r3, [pc, #348]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001aae:	4b56      	ldr	r3, [pc, #344]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4b55      	ldr	r3, [pc, #340]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001ab4:	2180      	movs	r1, #128	@ 0x80
 8001ab6:	0049      	lsls	r1, r1, #1
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb8c 	bl	80011d8 <HAL_GetTick>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fb87 	bl	80011d8 <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e209      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4b48      	ldr	r3, [pc, #288]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8001c14 <HAL_RCC_OscConfig+0x338>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	021a      	lsls	r2, r3, #8
 8001af4:	4b44      	ldr	r3, [pc, #272]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	e01b      	b.n	8001b34 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001afc:	4b42      	ldr	r3, [pc, #264]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	4949      	ldr	r1, [pc, #292]	@ (8001c28 <HAL_RCC_OscConfig+0x34c>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fb66 	bl	80011d8 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff fb61 	bl	80011d8 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1e3      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b24:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x236>
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b32:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2208      	movs	r2, #8
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d047      	beq.n	8001bce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b3e:	4b32      	ldr	r3, [pc, #200]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2238      	movs	r2, #56	@ 0x38
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b18      	cmp	r3, #24
 8001b48:	d10a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d03c      	beq.n	8001bce <HAL_RCC_OscConfig+0x2f2>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d138      	bne.n	8001bce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e1c5      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d019      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b68:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b6c:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	430a      	orrs	r2, r1
 8001b72:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff fb30 	bl	80011d8 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fb2b 	bl	80011d8 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1ad      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0f1      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2a2>
 8001b9a:	e018      	b.n	8001bce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fb16 	bl	80011d8 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fb11 	bl	80011d8 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e193      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1f1      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d100      	bne.n	8001bda <HAL_RCC_OscConfig+0x2fe>
 8001bd8:	e0c6      	b.n	8001d68 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bda:	231f      	movs	r3, #31
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2238      	movs	r2, #56	@ 0x38
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d11e      	bne.n	8001c2c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_RCC_OscConfig+0x32c>)
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <HAL_RCC_OscConfig+0x31e>
 8001bf8:	e0b6      	b.n	8001d68 <HAL_RCC_OscConfig+0x48c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d000      	beq.n	8001c04 <HAL_RCC_OscConfig+0x328>
 8001c02:	e0b1      	b.n	8001d68 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e171      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	fffeffff 	.word	0xfffeffff
 8001c10:	fffbffff 	.word	0xfffbffff
 8001c14:	ffff80ff 	.word	0xffff80ff
 8001c18:	ffffc7ff 	.word	0xffffc7ff
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	20000004 	.word	0x20000004
 8001c24:	20000008 	.word	0x20000008
 8001c28:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c2c:	4bb1      	ldr	r3, [pc, #708]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	055b      	lsls	r3, r3, #21
 8001c34:	4013      	ands	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_OscConfig+0x360>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x362>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d011      	beq.n	8001c66 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4bac      	ldr	r3, [pc, #688]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001c44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c46:	4bab      	ldr	r3, [pc, #684]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	0549      	lsls	r1, r1, #21
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c50:	4ba8      	ldr	r3, [pc, #672]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	055b      	lsls	r3, r3, #21
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c5e:	231f      	movs	r3, #31
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c66:	4ba4      	ldr	r3, [pc, #656]	@ (8001ef8 <HAL_RCC_OscConfig+0x61c>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d11a      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c72:	4ba1      	ldr	r3, [pc, #644]	@ (8001ef8 <HAL_RCC_OscConfig+0x61c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef8 <HAL_RCC_OscConfig+0x61c>)
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	0049      	lsls	r1, r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c80:	f7ff faaa 	bl	80011d8 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff faa5 	bl	80011d8 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e127      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9c:	4b96      	ldr	r3, [pc, #600]	@ (8001ef8 <HAL_RCC_OscConfig+0x61c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3e2>
 8001cb0:	4b90      	ldr	r3, [pc, #576]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001cb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cbc:	e01c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x404>
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001cc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cca:	4b8a      	ldr	r3, [pc, #552]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001ccc:	2104      	movs	r1, #4
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cd2:	4b88      	ldr	r3, [pc, #544]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001cd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cd6:	4b87      	ldr	r3, [pc, #540]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
 8001ce0:	4b84      	ldr	r3, [pc, #528]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ce4:	4b83      	ldr	r3, [pc, #524]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	438a      	bics	r2, r1
 8001cea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cec:	4b81      	ldr	r3, [pc, #516]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001cee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cf0:	4b80      	ldr	r3, [pc, #512]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d014      	beq.n	8001d2a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa6a 	bl	80011d8 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff fa65 	bl	80011d8 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a79      	ldr	r2, [pc, #484]	@ (8001efc <HAL_RCC_OscConfig+0x620>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0e6      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1e:	4b75      	ldr	r3, [pc, #468]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x42e>
 8001d28:	e013      	b.n	8001d52 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fa55 	bl	80011d8 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d32:	e009      	b.n	8001d48 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff fa50 	bl	80011d8 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8001efc <HAL_RCC_OscConfig+0x620>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0d1      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d48:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d52:	231f      	movs	r3, #31
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d5c:	4b65      	ldr	r3, [pc, #404]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d60:	4b64      	ldr	r3, [pc, #400]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001d62:	4967      	ldr	r1, [pc, #412]	@ (8001f00 <HAL_RCC_OscConfig+0x624>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d100      	bne.n	8001d72 <HAL_RCC_OscConfig+0x496>
 8001d70:	e0bb      	b.n	8001eea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d72:	4b60      	ldr	r3, [pc, #384]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2238      	movs	r2, #56	@ 0x38
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d100      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4a4>
 8001d7e:	e07b      	b.n	8001e78 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d156      	bne.n	8001e36 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d88:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b59      	ldr	r3, [pc, #356]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001d8e:	495d      	ldr	r1, [pc, #372]	@ (8001f04 <HAL_RCC_OscConfig+0x628>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fa20 	bl	80011d8 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7ff fa1b 	bl	80011d8 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e09d      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db0:	4b50      	ldr	r3, [pc, #320]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	@ 0x80
 8001db6:	049b      	lsls	r3, r3, #18
 8001db8:	4013      	ands	r3, r2
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a51      	ldr	r2, [pc, #324]	@ (8001f08 <HAL_RCC_OscConfig+0x62c>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de8:	431a      	orrs	r2, r3
 8001dea:	4b42      	ldr	r3, [pc, #264]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b40      	ldr	r3, [pc, #256]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001df6:	2180      	movs	r1, #128	@ 0x80
 8001df8:	0449      	lsls	r1, r1, #17
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	0549      	lsls	r1, r1, #21
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f9e4 	bl	80011d8 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff f9df 	bl	80011d8 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e061      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e28:	4b32      	ldr	r3, [pc, #200]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	049b      	lsls	r3, r3, #18
 8001e30:	4013      	ands	r3, r2
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x53a>
 8001e34:	e059      	b.n	8001eea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e3c:	4931      	ldr	r1, [pc, #196]	@ (8001f04 <HAL_RCC_OscConfig+0x628>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f9c9 	bl	80011d8 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f9c4 	bl	80011d8 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e046      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5e:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	049b      	lsls	r3, r3, #18
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e70:	4926      	ldr	r1, [pc, #152]	@ (8001f0c <HAL_RCC_OscConfig+0x630>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	e038      	b.n	8001eea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e033      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_RCC_OscConfig+0x618>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d126      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2270      	movs	r2, #112	@ 0x70
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d11f      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	23fe      	movs	r3, #254	@ 0xfe
 8001eaa:	01db      	lsls	r3, r3, #7
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d116      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	23f8      	movs	r3, #248	@ 0xf8
 8001ebc:	039b      	lsls	r3, r3, #14
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d10e      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	23e0      	movs	r3, #224	@ 0xe0
 8001ecc:	051b      	lsls	r3, r3, #20
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	0f5b      	lsrs	r3, r3, #29
 8001edc:	075a      	lsls	r2, r3, #29
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b008      	add	sp, #32
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	00001388 	.word	0x00001388
 8001f00:	efffffff 	.word	0xefffffff
 8001f04:	feffffff 	.word	0xfeffffff
 8001f08:	11c1808c 	.word	0x11c1808c
 8001f0c:	eefefffc 	.word	0xeefefffc

08001f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0e9      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f24:	4b76      	ldr	r3, [pc, #472]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2207      	movs	r2, #7
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d91e      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b73      	ldr	r3, [pc, #460]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2207      	movs	r2, #7
 8001f38:	4393      	bics	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	4b70      	ldr	r3, [pc, #448]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f44:	f7ff f948 	bl	80011d8 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7ff f943 	bl	80011d8 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a6a      	ldr	r2, [pc, #424]	@ (8002104 <HAL_RCC_ClockConfig+0x1f4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0ca      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f62:	4b67      	ldr	r3, [pc, #412]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2207      	movs	r2, #7
 8001f68:	4013      	ands	r3, r2
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2202      	movs	r2, #2
 8001f76:	4013      	ands	r3, r2
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	d006      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f84:	4b60      	ldr	r3, [pc, #384]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b5f      	ldr	r3, [pc, #380]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8a:	21e0      	movs	r1, #224	@ 0xe0
 8001f8c:	01c9      	lsls	r1, r1, #7
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f92:	4b5d      	ldr	r3, [pc, #372]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a5d      	ldr	r2, [pc, #372]	@ (800210c <HAL_RCC_ClockConfig+0x1fc>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4b59      	ldr	r3, [pc, #356]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2201      	movs	r2, #1
 8001fac:	4013      	ands	r3, r2
 8001fae:	d057      	beq.n	8002060 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb8:	4b53      	ldr	r3, [pc, #332]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d12b      	bne.n	800201c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e097      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	049b      	lsls	r3, r3, #18
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d11f      	bne.n	800201c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e08b      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe8:	4b47      	ldr	r3, [pc, #284]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d113      	bne.n	800201c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e07f      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002000:	4b41      	ldr	r3, [pc, #260]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d108      	bne.n	800201c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e074      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	4b3e      	ldr	r3, [pc, #248]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e06d      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800201c:	4b3a      	ldr	r3, [pc, #232]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2207      	movs	r2, #7
 8002022:	4393      	bics	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4b37      	ldr	r3, [pc, #220]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002030:	f7ff f8d2 	bl	80011d8 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002038:	e009      	b.n	800204e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203a:	f7ff f8cd 	bl	80011d8 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4a2f      	ldr	r2, [pc, #188]	@ (8002104 <HAL_RCC_ClockConfig+0x1f4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e054      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2238      	movs	r2, #56	@ 0x38
 8002054:	401a      	ands	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	429a      	cmp	r2, r3
 800205e:	d1ec      	bne.n	800203a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002060:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2207      	movs	r2, #7
 8002066:	4013      	ands	r3, r2
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d21e      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b24      	ldr	r3, [pc, #144]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2207      	movs	r2, #7
 8002074:	4393      	bics	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002080:	f7ff f8aa 	bl	80011d8 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002088:	e009      	b.n	800209e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208a:	f7ff f8a5 	bl	80011d8 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	4a1b      	ldr	r2, [pc, #108]	@ (8002104 <HAL_RCC_ClockConfig+0x1f4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e02c      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800209e:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2207      	movs	r2, #7
 80020a4:	4013      	ands	r3, r2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2204      	movs	r2, #4
 80020b2:	4013      	ands	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020b6:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4a15      	ldr	r2, [pc, #84]	@ (8002110 <HAL_RCC_ClockConfig+0x200>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020ca:	f000 f829 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020ce:	0001      	movs	r1, r0
 80020d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	220f      	movs	r2, #15
 80020d8:	401a      	ands	r2, r3
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_RCC_ClockConfig+0x204>)
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	58d3      	ldr	r3, [r2, r3]
 80020e0:	221f      	movs	r2, #31
 80020e2:	4013      	ands	r3, r2
 80020e4:	000a      	movs	r2, r1
 80020e6:	40da      	lsrs	r2, r3
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_RCC_ClockConfig+0x208>)
 80020ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_ClockConfig+0x20c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7ff f815 	bl	8001120 <HAL_InitTick>
 80020f6:	0003      	movs	r3, r0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40022000 	.word	0x40022000
 8002104:	00001388 	.word	0x00001388
 8002108:	40021000 	.word	0x40021000
 800210c:	fffff0ff 	.word	0xfffff0ff
 8002110:	ffff8fff 	.word	0xffff8fff
 8002114:	08006394 	.word	0x08006394
 8002118:	20000004 	.word	0x20000004
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002126:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2238      	movs	r2, #56	@ 0x38
 800212c:	4013      	ands	r3, r2
 800212e:	d10f      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002130:	4b39      	ldr	r3, [pc, #228]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0adb      	lsrs	r3, r3, #11
 8002136:	2207      	movs	r2, #7
 8002138:	4013      	ands	r3, r2
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	0013      	movs	r3, r2
 8002140:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	4835      	ldr	r0, [pc, #212]	@ (800221c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002146:	f7fd ffef 	bl	8000128 <__udivsi3>
 800214a:	0003      	movs	r3, r0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e05d      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002150:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2238      	movs	r2, #56	@ 0x38
 8002156:	4013      	ands	r3, r2
 8002158:	2b08      	cmp	r3, #8
 800215a:	d102      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800215c:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x100>)
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e054      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002162:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2238      	movs	r2, #56	@ 0x38
 8002168:	4013      	ands	r3, r2
 800216a:	2b10      	cmp	r3, #16
 800216c:	d138      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800216e:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2203      	movs	r2, #3
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	2207      	movs	r2, #7
 8002180:	4013      	ands	r3, r2
 8002182:	3301      	adds	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d10d      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	4824      	ldr	r0, [pc, #144]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x100>)
 8002190:	f7fd ffca 	bl	8000128 <__udivsi3>
 8002194:	0003      	movs	r3, r0
 8002196:	0019      	movs	r1, r3
 8002198:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	227f      	movs	r2, #127	@ 0x7f
 80021a0:	4013      	ands	r3, r2
 80021a2:	434b      	muls	r3, r1
 80021a4:	617b      	str	r3, [r7, #20]
        break;
 80021a6:	e00d      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	481c      	ldr	r0, [pc, #112]	@ (800221c <HAL_RCC_GetSysClockFreq+0xfc>)
 80021ac:	f7fd ffbc 	bl	8000128 <__udivsi3>
 80021b0:	0003      	movs	r3, r0
 80021b2:	0019      	movs	r1, r3
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	227f      	movs	r2, #127	@ 0x7f
 80021bc:	4013      	ands	r3, r2
 80021be:	434b      	muls	r3, r1
 80021c0:	617b      	str	r3, [r7, #20]
        break;
 80021c2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0f5b      	lsrs	r3, r3, #29
 80021ca:	2207      	movs	r2, #7
 80021cc:	4013      	ands	r3, r2
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	6978      	ldr	r0, [r7, #20]
 80021d6:	f7fd ffa7 	bl	8000128 <__udivsi3>
 80021da:	0003      	movs	r3, r0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e015      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2238      	movs	r2, #56	@ 0x38
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d103      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021ec:	2380      	movs	r3, #128	@ 0x80
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e00b      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2238      	movs	r2, #56	@ 0x38
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b18      	cmp	r3, #24
 80021fe:	d103      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002200:	23fa      	movs	r3, #250	@ 0xfa
 8002202:	01db      	lsls	r3, r3, #7
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	e001      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800220c:	693b      	ldr	r3, [r7, #16]
}
 800220e:	0018      	movs	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	b006      	add	sp, #24
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	40021000 	.word	0x40021000
 800221c:	00f42400 	.word	0x00f42400
 8002220:	007a1200 	.word	0x007a1200

08002224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b02      	ldr	r3, [pc, #8]	@ (8002234 <HAL_RCC_GetHCLKFreq+0x10>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800223c:	f7ff fff2 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002240:	0004      	movs	r4, r0
 8002242:	f7ff fb3f 	bl	80018c4 <LL_RCC_GetAPB1Prescaler>
 8002246:	0003      	movs	r3, r0
 8002248:	0b1a      	lsrs	r2, r3, #12
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_RCC_GetPCLK1Freq+0x28>)
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	58d3      	ldr	r3, [r2, r3]
 8002250:	221f      	movs	r2, #31
 8002252:	4013      	ands	r3, r2
 8002254:	40dc      	lsrs	r4, r3
 8002256:	0023      	movs	r3, r4
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	bdb0      	pop	{r4, r5, r7, pc}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	080063d4 	.word	0x080063d4

08002264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800226c:	2313      	movs	r3, #19
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002274:	2312      	movs	r3, #18
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	4013      	ands	r3, r2
 8002286:	d100      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002288:	e0a3      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2011      	movs	r0, #17
 800228c:	183b      	adds	r3, r7, r0
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4bc3      	ldr	r3, [pc, #780]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	4013      	ands	r3, r2
 800229c:	d110      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4bc0      	ldr	r3, [pc, #768]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022a2:	4bbf      	ldr	r3, [pc, #764]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a4:	2180      	movs	r1, #128	@ 0x80
 80022a6:	0549      	lsls	r1, r1, #21
 80022a8:	430a      	orrs	r2, r1
 80022aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022ac:	4bbc      	ldr	r3, [pc, #752]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	055b      	lsls	r3, r3, #21
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c0:	4bb8      	ldr	r3, [pc, #736]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4bb7      	ldr	r3, [pc, #732]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022c6:	2180      	movs	r1, #128	@ 0x80
 80022c8:	0049      	lsls	r1, r1, #1
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ce:	f7fe ff83 	bl	80011d8 <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d6:	e00b      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7fe ff7e 	bl	80011d8 <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d904      	bls.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022e6:	2313      	movs	r3, #19
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	2203      	movs	r2, #3
 80022ec:	701a      	strb	r2, [r3, #0]
        break;
 80022ee:	e005      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022f0:	4bac      	ldr	r3, [pc, #688]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0ed      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80022fc:	2313      	movs	r3, #19
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d154      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002306:	4ba6      	ldr	r3, [pc, #664]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800230a:	23c0      	movs	r3, #192	@ 0xc0
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4013      	ands	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d019      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	429a      	cmp	r2, r3
 8002320:	d014      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002322:	4b9f      	ldr	r3, [pc, #636]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002326:	4aa0      	ldr	r2, [pc, #640]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002328:	4013      	ands	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800232c:	4b9c      	ldr	r3, [pc, #624]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002330:	4b9b      	ldr	r3, [pc, #620]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	0249      	lsls	r1, r1, #9
 8002336:	430a      	orrs	r2, r1
 8002338:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800233a:	4b99      	ldr	r3, [pc, #612]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800233e:	4b98      	ldr	r3, [pc, #608]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002340:	499a      	ldr	r1, [pc, #616]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002342:	400a      	ands	r2, r1
 8002344:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002346:	4b96      	ldr	r3, [pc, #600]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d016      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe ff40 	bl	80011d8 <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235c:	e00c      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe ff3b 	bl	80011d8 <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	4a91      	ldr	r2, [pc, #580]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d904      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800236e:	2313      	movs	r3, #19
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	2203      	movs	r2, #3
 8002374:	701a      	strb	r2, [r3, #0]
            break;
 8002376:	e004      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002378:	4b89      	ldr	r3, [pc, #548]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	2202      	movs	r2, #2
 800237e:	4013      	ands	r3, r2
 8002380:	d0ed      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002382:	2313      	movs	r3, #19
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238c:	4b84      	ldr	r3, [pc, #528]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	4a85      	ldr	r2, [pc, #532]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800239a:	4b81      	ldr	r3, [pc, #516]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239c:	430a      	orrs	r2, r1
 800239e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023a0:	e00c      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a2:	2312      	movs	r3, #18
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2213      	movs	r2, #19
 80023a8:	18ba      	adds	r2, r7, r2
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e005      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	2312      	movs	r3, #18
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2213      	movs	r2, #19
 80023b6:	18ba      	adds	r2, r7, r2
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023bc:	2311      	movs	r3, #17
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4b76      	ldr	r3, [pc, #472]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ca:	4b75      	ldr	r3, [pc, #468]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023cc:	4979      	ldr	r1, [pc, #484]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023dc:	4b70      	ldr	r3, [pc, #448]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e0:	2203      	movs	r2, #3
 80023e2:	4393      	bics	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4b6d      	ldr	r3, [pc, #436]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023fa:	4b69      	ldr	r3, [pc, #420]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fe:	220c      	movs	r2, #12
 8002400:	4393      	bics	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4b65      	ldr	r3, [pc, #404]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240a:	430a      	orrs	r2, r1
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2210      	movs	r2, #16
 8002414:	4013      	ands	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002418:	4b61      	ldr	r3, [pc, #388]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	4a66      	ldr	r2, [pc, #408]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b5e      	ldr	r3, [pc, #376]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002428:	430a      	orrs	r2, r1
 800242a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002438:	4b59      	ldr	r3, [pc, #356]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	4a5f      	ldr	r2, [pc, #380]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800243e:	4013      	ands	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	4b56      	ldr	r3, [pc, #344]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002448:	430a      	orrs	r2, r1
 800244a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4013      	ands	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002458:	4b51      	ldr	r3, [pc, #324]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	4a58      	ldr	r2, [pc, #352]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	4b4e      	ldr	r3, [pc, #312]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002468:	430a      	orrs	r2, r1
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2220      	movs	r2, #32
 8002472:	4013      	ands	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002476:	4b4a      	ldr	r3, [pc, #296]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	4a52      	ldr	r2, [pc, #328]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	4b46      	ldr	r3, [pc, #280]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002486:	430a      	orrs	r2, r1
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	01db      	lsls	r3, r3, #7
 8002492:	4013      	ands	r3, r2
 8002494:	d015      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002496:	4b42      	ldr	r3, [pc, #264]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	0899      	lsrs	r1, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1a      	ldr	r2, [r3, #32]
 80024a2:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a4:	430a      	orrs	r2, r1
 80024a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	05db      	lsls	r3, r3, #23
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d106      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024b4:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ba:	2180      	movs	r1, #128	@ 0x80
 80024bc:	0249      	lsls	r1, r1, #9
 80024be:	430a      	orrs	r2, r1
 80024c0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	031b      	lsls	r3, r3, #12
 80024ca:	4013      	ands	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024ce:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d2:	2240      	movs	r2, #64	@ 0x40
 80024d4:	4393      	bics	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024dc:	4b30      	ldr	r3, [pc, #192]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	@ 0x80
 80024e8:	039b      	lsls	r3, r3, #14
 80024ea:	4013      	ands	r3, r2
 80024ec:	d016      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024ee:	4b2c      	ldr	r3, [pc, #176]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f2:	4a35      	ldr	r2, [pc, #212]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024fc:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024fe:	430a      	orrs	r2, r1
 8002500:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	03db      	lsls	r3, r3, #15
 800250a:	429a      	cmp	r2, r3
 800250c:	d106      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800250e:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002514:	2180      	movs	r1, #128	@ 0x80
 8002516:	0449      	lsls	r1, r1, #17
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	03db      	lsls	r3, r3, #15
 8002524:	4013      	ands	r3, r2
 8002526:	d016      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002528:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	4a27      	ldr	r2, [pc, #156]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800252e:	4013      	ands	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002536:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002538:	430a      	orrs	r2, r1
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	045b      	lsls	r3, r3, #17
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002548:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800254e:	2180      	movs	r1, #128	@ 0x80
 8002550:	0449      	lsls	r1, r1, #17
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	4013      	ands	r3, r2
 8002560:	d016      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002562:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002566:	4a1a      	ldr	r2, [pc, #104]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002568:	4013      	ands	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002572:	430a      	orrs	r2, r1
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	01db      	lsls	r3, r3, #7
 800257e:	429a      	cmp	r2, r3
 8002580:	d106      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002588:	2180      	movs	r1, #128	@ 0x80
 800258a:	0249      	lsls	r1, r1, #9
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002590:	2312      	movs	r3, #18
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b006      	add	sp, #24
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
 80025a8:	fffffcff 	.word	0xfffffcff
 80025ac:	fffeffff 	.word	0xfffeffff
 80025b0:	00001388 	.word	0x00001388
 80025b4:	efffffff 	.word	0xefffffff
 80025b8:	fffff3ff 	.word	0xfffff3ff
 80025bc:	fff3ffff 	.word	0xfff3ffff
 80025c0:	ffcfffff 	.word	0xffcfffff
 80025c4:	ffffcfff 	.word	0xffffcfff
 80025c8:	ffbfffff 	.word	0xffbfffff
 80025cc:	feffffff 	.word	0xfeffffff
 80025d0:	ffff3fff 	.word	0xffff3fff

080025d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e04a      	b.n	800267c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	223d      	movs	r2, #61	@ 0x3d
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223c      	movs	r2, #60	@ 0x3c
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7fe fbc5 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223d      	movs	r2, #61	@ 0x3d
 8002606:	2102      	movs	r1, #2
 8002608:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f000 fb55 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2248      	movs	r2, #72	@ 0x48
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	223e      	movs	r2, #62	@ 0x3e
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	223f      	movs	r2, #63	@ 0x3f
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2240      	movs	r2, #64	@ 0x40
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2241      	movs	r2, #65	@ 0x41
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2242      	movs	r2, #66	@ 0x42
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2243      	movs	r2, #67	@ 0x43
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2244      	movs	r2, #68	@ 0x44
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2245      	movs	r2, #69	@ 0x45
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2246      	movs	r2, #70	@ 0x46
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2247      	movs	r2, #71	@ 0x47
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	223d      	movs	r2, #61	@ 0x3d
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e04a      	b.n	800272c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223d      	movs	r2, #61	@ 0x3d
 800269a:	5c9b      	ldrb	r3, [r3, r2]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	223c      	movs	r2, #60	@ 0x3c
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 f841 	bl	8002734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	223d      	movs	r2, #61	@ 0x3d
 80026b6:	2102      	movs	r1, #2
 80026b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	0019      	movs	r1, r3
 80026c4:	0010      	movs	r0, r2
 80026c6:	f000 fafd 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2248      	movs	r2, #72	@ 0x48
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223e      	movs	r2, #62	@ 0x3e
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223f      	movs	r2, #63	@ 0x3f
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2240      	movs	r2, #64	@ 0x40
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2241      	movs	r2, #65	@ 0x41
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2242      	movs	r2, #66	@ 0x42
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2243      	movs	r2, #67	@ 0x43
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2244      	movs	r2, #68	@ 0x44
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2245      	movs	r2, #69	@ 0x45
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2246      	movs	r2, #70	@ 0x46
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2247      	movs	r2, #71	@ 0x47
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	223d      	movs	r2, #61	@ 0x3d
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800273c:	46c0      	nop			@ (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d108      	bne.n	8002766 <HAL_TIM_PWM_Start+0x22>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	223e      	movs	r2, #62	@ 0x3e
 8002758:	5c9b      	ldrb	r3, [r3, r2]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	1e5a      	subs	r2, r3, #1
 8002760:	4193      	sbcs	r3, r2
 8002762:	b2db      	uxtb	r3, r3
 8002764:	e037      	b.n	80027d6 <HAL_TIM_PWM_Start+0x92>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d108      	bne.n	800277e <HAL_TIM_PWM_Start+0x3a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	223f      	movs	r2, #63	@ 0x3f
 8002770:	5c9b      	ldrb	r3, [r3, r2]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	4193      	sbcs	r3, r2
 800277a:	b2db      	uxtb	r3, r3
 800277c:	e02b      	b.n	80027d6 <HAL_TIM_PWM_Start+0x92>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d108      	bne.n	8002796 <HAL_TIM_PWM_Start+0x52>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	5c9b      	ldrb	r3, [r3, r2]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	4193      	sbcs	r3, r2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	e01f      	b.n	80027d6 <HAL_TIM_PWM_Start+0x92>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b0c      	cmp	r3, #12
 800279a:	d108      	bne.n	80027ae <HAL_TIM_PWM_Start+0x6a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2241      	movs	r2, #65	@ 0x41
 80027a0:	5c9b      	ldrb	r3, [r3, r2]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	1e5a      	subs	r2, r3, #1
 80027a8:	4193      	sbcs	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e013      	b.n	80027d6 <HAL_TIM_PWM_Start+0x92>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d108      	bne.n	80027c6 <HAL_TIM_PWM_Start+0x82>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2242      	movs	r2, #66	@ 0x42
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	4193      	sbcs	r3, r2
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	e007      	b.n	80027d6 <HAL_TIM_PWM_Start+0x92>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2243      	movs	r2, #67	@ 0x43
 80027ca:	5c9b      	ldrb	r3, [r3, r2]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	1e5a      	subs	r2, r3, #1
 80027d2:	4193      	sbcs	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e08b      	b.n	80028f6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0xaa>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	223e      	movs	r2, #62	@ 0x3e
 80027e8:	2102      	movs	r1, #2
 80027ea:	5499      	strb	r1, [r3, r2]
 80027ec:	e023      	b.n	8002836 <HAL_TIM_PWM_Start+0xf2>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_PWM_Start+0xba>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	223f      	movs	r2, #63	@ 0x3f
 80027f8:	2102      	movs	r1, #2
 80027fa:	5499      	strb	r1, [r3, r2]
 80027fc:	e01b      	b.n	8002836 <HAL_TIM_PWM_Start+0xf2>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d104      	bne.n	800280e <HAL_TIM_PWM_Start+0xca>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	2102      	movs	r1, #2
 800280a:	5499      	strb	r1, [r3, r2]
 800280c:	e013      	b.n	8002836 <HAL_TIM_PWM_Start+0xf2>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d104      	bne.n	800281e <HAL_TIM_PWM_Start+0xda>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2241      	movs	r2, #65	@ 0x41
 8002818:	2102      	movs	r1, #2
 800281a:	5499      	strb	r1, [r3, r2]
 800281c:	e00b      	b.n	8002836 <HAL_TIM_PWM_Start+0xf2>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b10      	cmp	r3, #16
 8002822:	d104      	bne.n	800282e <HAL_TIM_PWM_Start+0xea>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2242      	movs	r2, #66	@ 0x42
 8002828:	2102      	movs	r1, #2
 800282a:	5499      	strb	r1, [r3, r2]
 800282c:	e003      	b.n	8002836 <HAL_TIM_PWM_Start+0xf2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2243      	movs	r2, #67	@ 0x43
 8002832:	2102      	movs	r1, #2
 8002834:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6839      	ldr	r1, [r7, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fe2e 	bl	80034a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2d      	ldr	r2, [pc, #180]	@ (8002900 <HAL_TIM_PWM_Start+0x1bc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_TIM_PWM_Start+0x128>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2c      	ldr	r2, [pc, #176]	@ (8002904 <HAL_TIM_PWM_Start+0x1c0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_TIM_PWM_Start+0x128>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2a      	ldr	r2, [pc, #168]	@ (8002908 <HAL_TIM_PWM_Start+0x1c4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_TIM_PWM_Start+0x128>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a29      	ldr	r2, [pc, #164]	@ (800290c <HAL_TIM_PWM_Start+0x1c8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_TIM_PWM_Start+0x12c>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_TIM_PWM_Start+0x12e>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2180      	movs	r1, #128	@ 0x80
 8002882:	0209      	lsls	r1, r1, #8
 8002884:	430a      	orrs	r2, r1
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1c      	ldr	r2, [pc, #112]	@ (8002900 <HAL_TIM_PWM_Start+0x1bc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00f      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x16e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	05db      	lsls	r3, r3, #23
 800289a:	429a      	cmp	r2, r3
 800289c:	d009      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x16e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <HAL_TIM_PWM_Start+0x1cc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x16e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <HAL_TIM_PWM_Start+0x1c0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d116      	bne.n	80028e0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a16      	ldr	r2, [pc, #88]	@ (8002914 <HAL_TIM_PWM_Start+0x1d0>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d016      	beq.n	80028f2 <HAL_TIM_PWM_Start+0x1ae>
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	025b      	lsls	r3, r3, #9
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d011      	beq.n	80028f2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028de:	e008      	b.n	80028f2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2101      	movs	r1, #1
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e000      	b.n	80028f4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b004      	add	sp, #16
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800
 8002910:	40000400 	.word	0x40000400
 8002914:	00010007 	.word	0x00010007

08002918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	2317      	movs	r3, #23
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	223c      	movs	r2, #60	@ 0x3c
 8002930:	5c9b      	ldrb	r3, [r3, r2]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002936:	2302      	movs	r3, #2
 8002938:	e0e5      	b.n	8002b06 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	223c      	movs	r2, #60	@ 0x3c
 800293e:	2101      	movs	r1, #1
 8002940:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b14      	cmp	r3, #20
 8002946:	d900      	bls.n	800294a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002948:	e0d1      	b.n	8002aee <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	009a      	lsls	r2, r3, #2
 800294e:	4b70      	ldr	r3, [pc, #448]	@ (8002b10 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002950:	18d3      	adds	r3, r2, r3
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	0011      	movs	r1, r2
 800295e:	0018      	movs	r0, r3
 8002960:	f000 fa3e 	bl	8002de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2108      	movs	r1, #8
 8002970:	430a      	orrs	r2, r1
 8002972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2104      	movs	r1, #4
 8002980:	438a      	bics	r2, r1
 8002982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6999      	ldr	r1, [r3, #24]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	619a      	str	r2, [r3, #24]
      break;
 8002996:	e0af      	b.n	8002af8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	0011      	movs	r1, r2
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 faa7 	bl	8002ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2180      	movs	r1, #128	@ 0x80
 80029b2:	0109      	lsls	r1, r1, #4
 80029b4:	430a      	orrs	r2, r1
 80029b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4954      	ldr	r1, [pc, #336]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80029c4:	400a      	ands	r2, r1
 80029c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6999      	ldr	r1, [r3, #24]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	021a      	lsls	r2, r3, #8
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	619a      	str	r2, [r3, #24]
      break;
 80029dc:	e08c      	b.n	8002af8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	0011      	movs	r1, r2
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 fb08 	bl	8002ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2108      	movs	r1, #8
 80029f8:	430a      	orrs	r2, r1
 80029fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2104      	movs	r1, #4
 8002a08:	438a      	bics	r2, r1
 8002a0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69d9      	ldr	r1, [r3, #28]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	61da      	str	r2, [r3, #28]
      break;
 8002a1e:	e06b      	b.n	8002af8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	0011      	movs	r1, r2
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 fb6f 	bl	800310c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2180      	movs	r1, #128	@ 0x80
 8002a3a:	0109      	lsls	r1, r1, #4
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4932      	ldr	r1, [pc, #200]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69d9      	ldr	r1, [r3, #28]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	021a      	lsls	r2, r3, #8
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	61da      	str	r2, [r3, #28]
      break;
 8002a64:	e048      	b.n	8002af8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fbb6 	bl	80031e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2108      	movs	r1, #8
 8002a80:	430a      	orrs	r2, r1
 8002a82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2104      	movs	r1, #4
 8002a90:	438a      	bics	r2, r1
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002aa6:	e027      	b.n	8002af8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	0011      	movs	r1, r2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 fbf5 	bl	80032a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2180      	movs	r1, #128	@ 0x80
 8002ac2:	0109      	lsls	r1, r1, #4
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4910      	ldr	r1, [pc, #64]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	021a      	lsls	r2, r3, #8
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002aec:	e004      	b.n	8002af8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002aee:	2317      	movs	r3, #23
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
      break;
 8002af6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	223c      	movs	r2, #60	@ 0x3c
 8002afc:	2100      	movs	r1, #0
 8002afe:	5499      	strb	r1, [r3, r2]

  return status;
 8002b00:	2317      	movs	r3, #23
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	781b      	ldrb	r3, [r3, #0]
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b006      	add	sp, #24
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	080063f4 	.word	0x080063f4
 8002b14:	fffffbff 	.word	0xfffffbff

08002b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	230f      	movs	r3, #15
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	223c      	movs	r2, #60	@ 0x3c
 8002b2e:	5c9b      	ldrb	r3, [r3, r2]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_TIM_ConfigClockSource+0x20>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e0bc      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x19a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	223c      	movs	r2, #60	@ 0x3c
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	223d      	movs	r2, #61	@ 0x3d
 8002b44:	2102      	movs	r1, #2
 8002b46:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4a5a      	ldr	r2, [pc, #360]	@ (8002cbc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4a59      	ldr	r2, [pc, #356]	@ (8002cc0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	0192      	lsls	r2, r2, #6
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d040      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xde>
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	0192      	lsls	r2, r2, #6
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d900      	bls.n	8002b7e <HAL_TIM_ConfigClockSource+0x66>
 8002b7c:	e088      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002b7e:	2280      	movs	r2, #128	@ 0x80
 8002b80:	0152      	lsls	r2, r2, #5
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d100      	bne.n	8002b88 <HAL_TIM_ConfigClockSource+0x70>
 8002b86:	e088      	b.n	8002c9a <HAL_TIM_ConfigClockSource+0x182>
 8002b88:	2280      	movs	r2, #128	@ 0x80
 8002b8a:	0152      	lsls	r2, r2, #5
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d900      	bls.n	8002b92 <HAL_TIM_ConfigClockSource+0x7a>
 8002b90:	e07e      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002b92:	2b70      	cmp	r3, #112	@ 0x70
 8002b94:	d018      	beq.n	8002bc8 <HAL_TIM_ConfigClockSource+0xb0>
 8002b96:	d900      	bls.n	8002b9a <HAL_TIM_ConfigClockSource+0x82>
 8002b98:	e07a      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002b9a:	2b60      	cmp	r3, #96	@ 0x60
 8002b9c:	d04f      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x126>
 8002b9e:	d900      	bls.n	8002ba2 <HAL_TIM_ConfigClockSource+0x8a>
 8002ba0:	e076      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002ba2:	2b50      	cmp	r3, #80	@ 0x50
 8002ba4:	d03b      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x106>
 8002ba6:	d900      	bls.n	8002baa <HAL_TIM_ConfigClockSource+0x92>
 8002ba8:	e072      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002baa:	2b40      	cmp	r3, #64	@ 0x40
 8002bac:	d057      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x146>
 8002bae:	d900      	bls.n	8002bb2 <HAL_TIM_ConfigClockSource+0x9a>
 8002bb0:	e06e      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002bb2:	2b30      	cmp	r3, #48	@ 0x30
 8002bb4:	d063      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002bb6:	d86b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d060      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002bbc:	d868      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d05d      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d05b      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x166>
 8002bc6:	e063      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bd8:	f000 fc42 	bl	8003460 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2277      	movs	r2, #119	@ 0x77
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	609a      	str	r2, [r3, #8]
      break;
 8002bf4:	e052      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c06:	f000 fc2b 	bl	8003460 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2180      	movs	r1, #128	@ 0x80
 8002c16:	01c9      	lsls	r1, r1, #7
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
      break;
 8002c1c:	e03e      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	f000 fb9c 	bl	8003368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2150      	movs	r1, #80	@ 0x50
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fbf6 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e02e      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	f000 fbba 	bl	80033c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2160      	movs	r1, #96	@ 0x60
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 fbe6 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e01e      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	f000 fb7c 	bl	8003368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2140      	movs	r1, #64	@ 0x40
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 fbd6 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e00e      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0019      	movs	r1, r3
 8002c88:	0010      	movs	r0, r2
 8002c8a:	f000 fbcd 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002c8e:	e005      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c90:	230f      	movs	r3, #15
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
      break;
 8002c98:	e000      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c9a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	223d      	movs	r2, #61	@ 0x3d
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	223c      	movs	r2, #60	@ 0x3c
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

  return status;
 8002cac:	230f      	movs	r3, #15
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	ffceff88 	.word	0xffceff88
 8002cc0:	ffff00ff 	.word	0xffff00ff

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a3b      	ldr	r2, [pc, #236]	@ (8002dc4 <TIM_Base_SetConfig+0x100>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d008      	beq.n	8002cee <TIM_Base_SetConfig+0x2a>
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	05db      	lsls	r3, r3, #23
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d003      	beq.n	8002cee <TIM_Base_SetConfig+0x2a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a37      	ldr	r2, [pc, #220]	@ (8002dc8 <TIM_Base_SetConfig+0x104>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d108      	bne.n	8002d00 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2270      	movs	r2, #112	@ 0x70
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a30      	ldr	r2, [pc, #192]	@ (8002dc4 <TIM_Base_SetConfig+0x100>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d018      	beq.n	8002d3a <TIM_Base_SetConfig+0x76>
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d013      	beq.n	8002d3a <TIM_Base_SetConfig+0x76>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2c      	ldr	r2, [pc, #176]	@ (8002dc8 <TIM_Base_SetConfig+0x104>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00f      	beq.n	8002d3a <TIM_Base_SetConfig+0x76>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dcc <TIM_Base_SetConfig+0x108>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00b      	beq.n	8002d3a <TIM_Base_SetConfig+0x76>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <TIM_Base_SetConfig+0x10c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <TIM_Base_SetConfig+0x76>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a29      	ldr	r2, [pc, #164]	@ (8002dd4 <TIM_Base_SetConfig+0x110>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_Base_SetConfig+0x76>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d108      	bne.n	8002d4c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a27      	ldr	r2, [pc, #156]	@ (8002ddc <TIM_Base_SetConfig+0x118>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	4393      	bics	r3, r2
 8002d52:	001a      	movs	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a13      	ldr	r2, [pc, #76]	@ (8002dc4 <TIM_Base_SetConfig+0x100>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <TIM_Base_SetConfig+0xce>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <TIM_Base_SetConfig+0x10c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <TIM_Base_SetConfig+0xce>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <TIM_Base_SetConfig+0x110>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <TIM_Base_SetConfig+0xce>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d103      	bne.n	8002d9a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d106      	bne.n	8002dba <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2201      	movs	r2, #1
 8002db2:	4393      	bics	r3, r2
 8002db4:	001a      	movs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	611a      	str	r2, [r3, #16]
  }
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40002000 	.word	0x40002000
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800
 8002ddc:	fffffcff 	.word	0xfffffcff

08002de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4393      	bics	r3, r2
 8002df8:	001a      	movs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a32      	ldr	r2, [pc, #200]	@ (8002ed8 <TIM_OC1_SetConfig+0xf8>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2203      	movs	r2, #3
 8002e16:	4393      	bics	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2202      	movs	r2, #2
 8002e28:	4393      	bics	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a28      	ldr	r2, [pc, #160]	@ (8002edc <TIM_OC1_SetConfig+0xfc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <TIM_OC1_SetConfig+0x76>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a27      	ldr	r2, [pc, #156]	@ (8002ee0 <TIM_OC1_SetConfig+0x100>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <TIM_OC1_SetConfig+0x76>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a26      	ldr	r2, [pc, #152]	@ (8002ee4 <TIM_OC1_SetConfig+0x104>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_OC1_SetConfig+0x76>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a25      	ldr	r2, [pc, #148]	@ (8002ee8 <TIM_OC1_SetConfig+0x108>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10c      	bne.n	8002e70 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	4393      	bics	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <TIM_OC1_SetConfig+0xfc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <TIM_OC1_SetConfig+0xb0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ee0 <TIM_OC1_SetConfig+0x100>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <TIM_OC1_SetConfig+0xb0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a18      	ldr	r2, [pc, #96]	@ (8002ee4 <TIM_OC1_SetConfig+0x104>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_OC1_SetConfig+0xb0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ee8 <TIM_OC1_SetConfig+0x108>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d111      	bne.n	8002eb4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4a16      	ldr	r2, [pc, #88]	@ (8002eec <TIM_OC1_SetConfig+0x10c>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ef0 <TIM_OC1_SetConfig+0x110>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	621a      	str	r2, [r3, #32]
}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b006      	add	sp, #24
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	fffeff8f 	.word	0xfffeff8f
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40014000 	.word	0x40014000
 8002ee4:	40014400 	.word	0x40014400
 8002ee8:	40014800 	.word	0x40014800
 8002eec:	fffffeff 	.word	0xfffffeff
 8002ef0:	fffffdff 	.word	0xfffffdff

08002ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	4393      	bics	r3, r2
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a2e      	ldr	r2, [pc, #184]	@ (8002fdc <TIM_OC2_SetConfig+0xe8>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe0 <TIM_OC2_SetConfig+0xec>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	4393      	bics	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a24      	ldr	r2, [pc, #144]	@ (8002fe4 <TIM_OC2_SetConfig+0xf0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10d      	bne.n	8002f72 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2240      	movs	r2, #64	@ 0x40
 8002f6e:	4393      	bics	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <TIM_OC2_SetConfig+0xf0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00b      	beq.n	8002f92 <TIM_OC2_SetConfig+0x9e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <TIM_OC2_SetConfig+0xf4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <TIM_OC2_SetConfig+0x9e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <TIM_OC2_SetConfig+0xf8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d003      	beq.n	8002f92 <TIM_OC2_SetConfig+0x9e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a18      	ldr	r2, [pc, #96]	@ (8002ff0 <TIM_OC2_SetConfig+0xfc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d113      	bne.n	8002fba <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <TIM_OC2_SetConfig+0x100>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4a16      	ldr	r2, [pc, #88]	@ (8002ff8 <TIM_OC2_SetConfig+0x104>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	621a      	str	r2, [r3, #32]
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b006      	add	sp, #24
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	feff8fff 	.word	0xfeff8fff
 8002fe0:	fffffcff 	.word	0xfffffcff
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	fffffbff 	.word	0xfffffbff
 8002ff8:	fffff7ff 	.word	0xfffff7ff

08002ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4a33      	ldr	r2, [pc, #204]	@ (80030e0 <TIM_OC3_SetConfig+0xe4>)
 8003012:	401a      	ands	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a2f      	ldr	r2, [pc, #188]	@ (80030e4 <TIM_OC3_SetConfig+0xe8>)
 8003028:	4013      	ands	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2203      	movs	r2, #3
 8003030:	4393      	bics	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a29      	ldr	r2, [pc, #164]	@ (80030e8 <TIM_OC3_SetConfig+0xec>)
 8003042:	4013      	ands	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a25      	ldr	r2, [pc, #148]	@ (80030ec <TIM_OC3_SetConfig+0xf0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10d      	bne.n	8003076 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	4a24      	ldr	r2, [pc, #144]	@ (80030f0 <TIM_OC3_SetConfig+0xf4>)
 800305e:	4013      	ands	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4a20      	ldr	r2, [pc, #128]	@ (80030f4 <TIM_OC3_SetConfig+0xf8>)
 8003072:	4013      	ands	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <TIM_OC3_SetConfig+0xf0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_OC3_SetConfig+0x9a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <TIM_OC3_SetConfig+0xfc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_OC3_SetConfig+0x9a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <TIM_OC3_SetConfig+0x100>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_OC3_SetConfig+0x9a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1b      	ldr	r2, [pc, #108]	@ (8003100 <TIM_OC3_SetConfig+0x104>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d113      	bne.n	80030be <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4a1a      	ldr	r2, [pc, #104]	@ (8003104 <TIM_OC3_SetConfig+0x108>)
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4a19      	ldr	r2, [pc, #100]	@ (8003108 <TIM_OC3_SetConfig+0x10c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b006      	add	sp, #24
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	fffffeff 	.word	0xfffffeff
 80030e4:	fffeff8f 	.word	0xfffeff8f
 80030e8:	fffffdff 	.word	0xfffffdff
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	fffff7ff 	.word	0xfffff7ff
 80030f4:	fffffbff 	.word	0xfffffbff
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40014400 	.word	0x40014400
 8003100:	40014800 	.word	0x40014800
 8003104:	ffffefff 	.word	0xffffefff
 8003108:	ffffdfff 	.word	0xffffdfff

0800310c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a26      	ldr	r2, [pc, #152]	@ (80031bc <TIM_OC4_SetConfig+0xb0>)
 8003122:	401a      	ands	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a22      	ldr	r2, [pc, #136]	@ (80031c0 <TIM_OC4_SetConfig+0xb4>)
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a21      	ldr	r2, [pc, #132]	@ (80031c4 <TIM_OC4_SetConfig+0xb8>)
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4a1d      	ldr	r2, [pc, #116]	@ (80031c8 <TIM_OC4_SetConfig+0xbc>)
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	031b      	lsls	r3, r3, #12
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a19      	ldr	r2, [pc, #100]	@ (80031cc <TIM_OC4_SetConfig+0xc0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00b      	beq.n	8003184 <TIM_OC4_SetConfig+0x78>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <TIM_OC4_SetConfig+0xc4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <TIM_OC4_SetConfig+0x78>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <TIM_OC4_SetConfig+0xc8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_OC4_SetConfig+0x78>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a16      	ldr	r2, [pc, #88]	@ (80031d8 <TIM_OC4_SetConfig+0xcc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d109      	bne.n	8003198 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	4a15      	ldr	r2, [pc, #84]	@ (80031dc <TIM_OC4_SetConfig+0xd0>)
 8003188:	4013      	ands	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b006      	add	sp, #24
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	ffffefff 	.word	0xffffefff
 80031c0:	feff8fff 	.word	0xfeff8fff
 80031c4:	fffffcff 	.word	0xfffffcff
 80031c8:	ffffdfff 	.word	0xffffdfff
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40014400 	.word	0x40014400
 80031d8:	40014800 	.word	0x40014800
 80031dc:	ffffbfff 	.word	0xffffbfff

080031e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a23      	ldr	r2, [pc, #140]	@ (8003284 <TIM_OC5_SetConfig+0xa4>)
 80031f6:	401a      	ands	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <TIM_OC5_SetConfig+0xa8>)
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4a1b      	ldr	r2, [pc, #108]	@ (800328c <TIM_OC5_SetConfig+0xac>)
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <TIM_OC5_SetConfig+0xb0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00b      	beq.n	800324e <TIM_OC5_SetConfig+0x6e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a16      	ldr	r2, [pc, #88]	@ (8003294 <TIM_OC5_SetConfig+0xb4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <TIM_OC5_SetConfig+0x6e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a15      	ldr	r2, [pc, #84]	@ (8003298 <TIM_OC5_SetConfig+0xb8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_OC5_SetConfig+0x6e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a14      	ldr	r2, [pc, #80]	@ (800329c <TIM_OC5_SetConfig+0xbc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d109      	bne.n	8003262 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4a0c      	ldr	r2, [pc, #48]	@ (8003284 <TIM_OC5_SetConfig+0xa4>)
 8003252:	4013      	ands	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	621a      	str	r2, [r3, #32]
}
 800327c:	46c0      	nop			@ (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b006      	add	sp, #24
 8003282:	bd80      	pop	{r7, pc}
 8003284:	fffeffff 	.word	0xfffeffff
 8003288:	fffeff8f 	.word	0xfffeff8f
 800328c:	fffdffff 	.word	0xfffdffff
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40014000 	.word	0x40014000
 8003298:	40014400 	.word	0x40014400
 800329c:	40014800 	.word	0x40014800

080032a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a24      	ldr	r2, [pc, #144]	@ (8003348 <TIM_OC6_SetConfig+0xa8>)
 80032b6:	401a      	ands	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a20      	ldr	r2, [pc, #128]	@ (800334c <TIM_OC6_SetConfig+0xac>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4a1c      	ldr	r2, [pc, #112]	@ (8003350 <TIM_OC6_SetConfig+0xb0>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	051b      	lsls	r3, r3, #20
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a18      	ldr	r2, [pc, #96]	@ (8003354 <TIM_OC6_SetConfig+0xb4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00b      	beq.n	8003310 <TIM_OC6_SetConfig+0x70>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <TIM_OC6_SetConfig+0xb8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_OC6_SetConfig+0x70>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a16      	ldr	r2, [pc, #88]	@ (800335c <TIM_OC6_SetConfig+0xbc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_OC6_SetConfig+0x70>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <TIM_OC6_SetConfig+0xc0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d109      	bne.n	8003324 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4a14      	ldr	r2, [pc, #80]	@ (8003364 <TIM_OC6_SetConfig+0xc4>)
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	029b      	lsls	r3, r3, #10
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b006      	add	sp, #24
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	ffefffff 	.word	0xffefffff
 800334c:	feff8fff 	.word	0xfeff8fff
 8003350:	ffdfffff 	.word	0xffdfffff
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800
 8003364:	fffbffff 	.word	0xfffbffff

08003368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	2201      	movs	r2, #1
 8003380:	4393      	bics	r3, r2
 8003382:	001a      	movs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	22f0      	movs	r2, #240	@ 0xf0
 8003392:	4393      	bics	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	220a      	movs	r2, #10
 80033a4:	4393      	bics	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	2210      	movs	r2, #16
 80033dc:	4393      	bics	r3, r2
 80033de:	001a      	movs	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <TIM_TI2_ConfigInputStage+0x60>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	031b      	lsls	r3, r3, #12
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	22a0      	movs	r2, #160	@ 0xa0
 8003400:	4393      	bics	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b006      	add	sp, #24
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	ffff0fff 	.word	0xffff0fff

08003428 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a08      	ldr	r2, [pc, #32]	@ (800345c <TIM_ITRx_SetConfig+0x34>)
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	2207      	movs	r2, #7
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b004      	add	sp, #16
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	ffcfff8f 	.word	0xffcfff8f

08003460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	4a09      	ldr	r2, [pc, #36]	@ (800349c <TIM_ETR_SetConfig+0x3c>)
 8003478:	4013      	ands	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	021a      	lsls	r2, r3, #8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	431a      	orrs	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b006      	add	sp, #24
 800349a:	bd80      	pop	{r7, pc}
 800349c:	ffff00ff 	.word	0xffff00ff

080034a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	221f      	movs	r2, #31
 80034b0:	4013      	ands	r3, r2
 80034b2:	2201      	movs	r2, #1
 80034b4:	409a      	lsls	r2, r3
 80034b6:	0013      	movs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	43d2      	mvns	r2, r2
 80034c2:	401a      	ands	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	211f      	movs	r1, #31
 80034d0:	400b      	ands	r3, r1
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4099      	lsls	r1, r3
 80034d6:	000b      	movs	r3, r1
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b006      	add	sp, #24
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	223c      	movs	r2, #60	@ 0x3c
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e055      	b.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223c      	movs	r2, #60	@ 0x3c
 8003504:	2101      	movs	r1, #1
 8003506:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	223d      	movs	r2, #61	@ 0x3d
 800350c:	2102      	movs	r1, #2
 800350e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a23      	ldr	r2, [pc, #140]	@ (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d108      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a22      	ldr	r2, [pc, #136]	@ (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2270      	movs	r2, #112	@ 0x70
 8003540:	4393      	bics	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	@ (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00f      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	@ 0x80
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	429a      	cmp	r2, r3
 800356a:	d009      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10c      	bne.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2280      	movs	r2, #128	@ 0x80
 8003584:	4393      	bics	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	223d      	movs	r2, #61	@ 0x3d
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	223c      	movs	r2, #60	@ 0x3c
 80035a6:	2100      	movs	r1, #0
 80035a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	ff0fffff 	.word	0xff0fffff
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40014000 	.word	0x40014000

080035c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e046      	b.n	8003664 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2288      	movs	r2, #136	@ 0x88
 80035da:	589b      	ldr	r3, [r3, r2]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d107      	bne.n	80035f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2284      	movs	r2, #132	@ 0x84
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7fd fc26 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2288      	movs	r2, #136	@ 0x88
 80035f4:	2124      	movs	r1, #36	@ 0x24
 80035f6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	438a      	bics	r2, r1
 8003606:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 ff2e 	bl	8004474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0018      	movs	r0, r3
 800361c:	f000 fc6c 	bl	8003ef8 <UART_SetConfig>
 8003620:	0003      	movs	r3, r0
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e01c      	b.n	8003664 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	490d      	ldr	r1, [pc, #52]	@ (800366c <HAL_UART_Init+0xa8>)
 8003636:	400a      	ands	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	212a      	movs	r1, #42	@ 0x2a
 8003646:	438a      	bics	r2, r1
 8003648:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2101      	movs	r1, #1
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	0018      	movs	r0, r3
 800365e:	f000 ffbd 	bl	80045dc <UART_CheckIdleState>
 8003662:	0003      	movs	r3, r0
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b002      	add	sp, #8
 800366a:	bd80      	pop	{r7, pc}
 800366c:	ffffb7ff 	.word	0xffffb7ff

08003670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	@ 0x28
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	1dbb      	adds	r3, r7, #6
 800367e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2288      	movs	r2, #136	@ 0x88
 8003684:	589b      	ldr	r3, [r3, r2]
 8003686:	2b20      	cmp	r3, #32
 8003688:	d000      	beq.n	800368c <HAL_UART_Transmit+0x1c>
 800368a:	e090      	b.n	80037ae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_UART_Transmit+0x2a>
 8003692:	1dbb      	adds	r3, r7, #6
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e088      	b.n	80037b0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	015b      	lsls	r3, r3, #5
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d109      	bne.n	80036be <HAL_UART_Transmit+0x4e>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	d001      	beq.n	80036be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e078      	b.n	80037b0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2290      	movs	r2, #144	@ 0x90
 80036c2:	2100      	movs	r1, #0
 80036c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2288      	movs	r2, #136	@ 0x88
 80036ca:	2121      	movs	r1, #33	@ 0x21
 80036cc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ce:	f7fd fd83 	bl	80011d8 <HAL_GetTick>
 80036d2:	0003      	movs	r3, r0
 80036d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1dba      	adds	r2, r7, #6
 80036da:	2154      	movs	r1, #84	@ 0x54
 80036dc:	8812      	ldrh	r2, [r2, #0]
 80036de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1dba      	adds	r2, r7, #6
 80036e4:	2156      	movs	r1, #86	@ 0x56
 80036e6:	8812      	ldrh	r2, [r2, #0]
 80036e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	2380      	movs	r3, #128	@ 0x80
 80036f0:	015b      	lsls	r3, r3, #5
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d108      	bne.n	8003708 <HAL_UART_Transmit+0x98>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d104      	bne.n	8003708 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	e003      	b.n	8003710 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800370c:	2300      	movs	r3, #0
 800370e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003710:	e030      	b.n	8003774 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	0013      	movs	r3, r2
 800371c:	2200      	movs	r2, #0
 800371e:	2180      	movs	r1, #128	@ 0x80
 8003720:	f001 f806 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d005      	beq.n	8003734 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2288      	movs	r2, #136	@ 0x88
 800372c:	2120      	movs	r1, #32
 800372e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e03d      	b.n	80037b0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	001a      	movs	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	05d2      	lsls	r2, r2, #23
 8003746:	0dd2      	lsrs	r2, r2, #23
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	3302      	adds	r3, #2
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	e007      	b.n	8003762 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	3301      	adds	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2256      	movs	r2, #86	@ 0x56
 8003766:	5a9b      	ldrh	r3, [r3, r2]
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b299      	uxth	r1, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2256      	movs	r2, #86	@ 0x56
 8003772:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2256      	movs	r2, #86	@ 0x56
 8003778:	5a9b      	ldrh	r3, [r3, r2]
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1c8      	bne.n	8003712 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	0013      	movs	r3, r2
 800378a:	2200      	movs	r2, #0
 800378c:	2140      	movs	r1, #64	@ 0x40
 800378e:	f000 ffcf 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d005      	beq.n	80037a2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2288      	movs	r2, #136	@ 0x88
 800379a:	2120      	movs	r1, #32
 800379c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e006      	b.n	80037b0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2288      	movs	r2, #136	@ 0x88
 80037a6:	2120      	movs	r1, #32
 80037a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b008      	add	sp, #32
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	1dbb      	adds	r3, r7, #6
 80037c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	228c      	movs	r2, #140	@ 0x8c
 80037ca:	589b      	ldr	r3, [r3, r2]
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d14a      	bne.n	8003866 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_UART_Receive_IT+0x26>
 80037d6:	1dbb      	adds	r3, r7, #6
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e042      	b.n	8003868 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	015b      	lsls	r3, r3, #5
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d109      	bne.n	8003802 <HAL_UART_Receive_IT+0x4a>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d105      	bne.n	8003802 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2201      	movs	r2, #1
 80037fa:	4013      	ands	r3, r2
 80037fc:	d001      	beq.n	8003802 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e032      	b.n	8003868 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <HAL_UART_Receive_IT+0xb8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d020      	beq.n	8003854 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	4013      	ands	r3, r2
 800381e:	d019      	beq.n	8003854 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003820:	f3ef 8310 	mrs	r3, PRIMASK
 8003824:	613b      	str	r3, [r7, #16]
  return(result);
 8003826:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	2301      	movs	r3, #1
 800382c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f383 8810 	msr	PRIMASK, r3
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2180      	movs	r1, #128	@ 0x80
 8003842:	04c9      	lsls	r1, r1, #19
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f383 8810 	msr	PRIMASK, r3
}
 8003852:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003854:	1dbb      	adds	r3, r7, #6
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	0018      	movs	r0, r3
 800385e:	f000 ffd7 	bl	8004810 <UART_Start_Receive_IT>
 8003862:	0003      	movs	r3, r0
 8003864:	e000      	b.n	8003868 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b008      	add	sp, #32
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40008000 	.word	0x40008000

08003874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003874:	b5b0      	push	{r4, r5, r7, lr}
 8003876:	b0aa      	sub	sp, #168	@ 0xa8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	22a4      	movs	r2, #164	@ 0xa4
 8003884:	18b9      	adds	r1, r7, r2
 8003886:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	20a0      	movs	r0, #160	@ 0xa0
 8003890:	1839      	adds	r1, r7, r0
 8003892:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	249c      	movs	r4, #156	@ 0x9c
 800389c:	1939      	adds	r1, r7, r4
 800389e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038a0:	0011      	movs	r1, r2
 80038a2:	18bb      	adds	r3, r7, r2
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4aa2      	ldr	r2, [pc, #648]	@ (8003b30 <HAL_UART_IRQHandler+0x2bc>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	2298      	movs	r2, #152	@ 0x98
 80038ac:	18bd      	adds	r5, r7, r2
 80038ae:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80038b0:	18bb      	adds	r3, r7, r2
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11a      	bne.n	80038ee <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2220      	movs	r2, #32
 80038be:	4013      	ands	r3, r2
 80038c0:	d015      	beq.n	80038ee <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038c2:	183b      	adds	r3, r7, r0
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2220      	movs	r2, #32
 80038c8:	4013      	ands	r3, r2
 80038ca:	d105      	bne.n	80038d8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038cc:	193b      	adds	r3, r7, r4
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	055b      	lsls	r3, r3, #21
 80038d4:	4013      	ands	r3, r2
 80038d6:	d00a      	beq.n	80038ee <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d100      	bne.n	80038e2 <HAL_UART_IRQHandler+0x6e>
 80038e0:	e2dc      	b.n	8003e9c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	0010      	movs	r0, r2
 80038ea:	4798      	blx	r3
      }
      return;
 80038ec:	e2d6      	b.n	8003e9c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038ee:	2398      	movs	r3, #152	@ 0x98
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d100      	bne.n	80038fa <HAL_UART_IRQHandler+0x86>
 80038f8:	e122      	b.n	8003b40 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80038fa:	239c      	movs	r3, #156	@ 0x9c
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a8c      	ldr	r2, [pc, #560]	@ (8003b34 <HAL_UART_IRQHandler+0x2c0>)
 8003902:	4013      	ands	r3, r2
 8003904:	d106      	bne.n	8003914 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003906:	23a0      	movs	r3, #160	@ 0xa0
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a8a      	ldr	r2, [pc, #552]	@ (8003b38 <HAL_UART_IRQHandler+0x2c4>)
 800390e:	4013      	ands	r3, r2
 8003910:	d100      	bne.n	8003914 <HAL_UART_IRQHandler+0xa0>
 8003912:	e115      	b.n	8003b40 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003914:	23a4      	movs	r3, #164	@ 0xa4
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2201      	movs	r2, #1
 800391c:	4013      	ands	r3, r2
 800391e:	d012      	beq.n	8003946 <HAL_UART_IRQHandler+0xd2>
 8003920:	23a0      	movs	r3, #160	@ 0xa0
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4013      	ands	r3, r2
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2201      	movs	r2, #1
 8003934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2290      	movs	r2, #144	@ 0x90
 800393a:	589b      	ldr	r3, [r3, r2]
 800393c:	2201      	movs	r2, #1
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2190      	movs	r1, #144	@ 0x90
 8003944:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003946:	23a4      	movs	r3, #164	@ 0xa4
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2202      	movs	r2, #2
 800394e:	4013      	ands	r3, r2
 8003950:	d011      	beq.n	8003976 <HAL_UART_IRQHandler+0x102>
 8003952:	239c      	movs	r3, #156	@ 0x9c
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	4013      	ands	r3, r2
 800395c:	d00b      	beq.n	8003976 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2202      	movs	r2, #2
 8003964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2290      	movs	r2, #144	@ 0x90
 800396a:	589b      	ldr	r3, [r3, r2]
 800396c:	2204      	movs	r2, #4
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2190      	movs	r1, #144	@ 0x90
 8003974:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003976:	23a4      	movs	r3, #164	@ 0xa4
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2204      	movs	r2, #4
 800397e:	4013      	ands	r3, r2
 8003980:	d011      	beq.n	80039a6 <HAL_UART_IRQHandler+0x132>
 8003982:	239c      	movs	r3, #156	@ 0x9c
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2201      	movs	r2, #1
 800398a:	4013      	ands	r3, r2
 800398c:	d00b      	beq.n	80039a6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2204      	movs	r2, #4
 8003994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2290      	movs	r2, #144	@ 0x90
 800399a:	589b      	ldr	r3, [r3, r2]
 800399c:	2202      	movs	r2, #2
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2190      	movs	r1, #144	@ 0x90
 80039a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039a6:	23a4      	movs	r3, #164	@ 0xa4
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2208      	movs	r2, #8
 80039ae:	4013      	ands	r3, r2
 80039b0:	d017      	beq.n	80039e2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039b2:	23a0      	movs	r3, #160	@ 0xa0
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2220      	movs	r2, #32
 80039ba:	4013      	ands	r3, r2
 80039bc:	d105      	bne.n	80039ca <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039be:	239c      	movs	r3, #156	@ 0x9c
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5b      	ldr	r2, [pc, #364]	@ (8003b34 <HAL_UART_IRQHandler+0x2c0>)
 80039c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039c8:	d00b      	beq.n	80039e2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2208      	movs	r2, #8
 80039d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2290      	movs	r2, #144	@ 0x90
 80039d6:	589b      	ldr	r3, [r3, r2]
 80039d8:	2208      	movs	r2, #8
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2190      	movs	r1, #144	@ 0x90
 80039e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039e2:	23a4      	movs	r3, #164	@ 0xa4
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	@ 0x80
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	4013      	ands	r3, r2
 80039ee:	d013      	beq.n	8003a18 <HAL_UART_IRQHandler+0x1a4>
 80039f0:	23a0      	movs	r3, #160	@ 0xa0
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	04db      	lsls	r3, r3, #19
 80039fa:	4013      	ands	r3, r2
 80039fc:	d00c      	beq.n	8003a18 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2280      	movs	r2, #128	@ 0x80
 8003a04:	0112      	lsls	r2, r2, #4
 8003a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2290      	movs	r2, #144	@ 0x90
 8003a0c:	589b      	ldr	r3, [r3, r2]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2190      	movs	r1, #144	@ 0x90
 8003a16:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2290      	movs	r2, #144	@ 0x90
 8003a1c:	589b      	ldr	r3, [r3, r2]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d100      	bne.n	8003a24 <HAL_UART_IRQHandler+0x1b0>
 8003a22:	e23d      	b.n	8003ea0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a24:	23a4      	movs	r3, #164	@ 0xa4
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d015      	beq.n	8003a5c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a30:	23a0      	movs	r3, #160	@ 0xa0
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2220      	movs	r2, #32
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d106      	bne.n	8003a4a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a3c:	239c      	movs	r3, #156	@ 0x9c
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	055b      	lsls	r3, r3, #21
 8003a46:	4013      	ands	r3, r2
 8003a48:	d008      	beq.n	8003a5c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	0010      	movs	r0, r2
 8003a5a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2290      	movs	r2, #144	@ 0x90
 8003a60:	589b      	ldr	r3, [r3, r2]
 8003a62:	2194      	movs	r1, #148	@ 0x94
 8003a64:	187a      	adds	r2, r7, r1
 8003a66:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2240      	movs	r2, #64	@ 0x40
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b40      	cmp	r3, #64	@ 0x40
 8003a74:	d004      	beq.n	8003a80 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2228      	movs	r2, #40	@ 0x28
 8003a7c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a7e:	d04c      	beq.n	8003b1a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 ffe8 	bl	8004a58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2240      	movs	r2, #64	@ 0x40
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b40      	cmp	r3, #64	@ 0x40
 8003a94:	d13c      	bne.n	8003b10 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a96:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9e:	2090      	movs	r0, #144	@ 0x90
 8003aa0:	183a      	adds	r2, r7, r0
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2140      	movs	r1, #64	@ 0x40
 8003abc:	438a      	bics	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	183b      	adds	r3, r7, r0
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2280      	movs	r2, #128	@ 0x80
 8003ad2:	589b      	ldr	r3, [r3, r2]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d016      	beq.n	8003b06 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2280      	movs	r2, #128	@ 0x80
 8003adc:	589b      	ldr	r3, [r3, r2]
 8003ade:	4a17      	ldr	r2, [pc, #92]	@ (8003b3c <HAL_UART_IRQHandler+0x2c8>)
 8003ae0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2280      	movs	r2, #128	@ 0x80
 8003ae6:	589b      	ldr	r3, [r3, r2]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f7fd fcbf 	bl	800146c <HAL_DMA_Abort_IT>
 8003aee:	1e03      	subs	r3, r0, #0
 8003af0:	d01c      	beq.n	8003b2c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2280      	movs	r2, #128	@ 0x80
 8003af6:	589b      	ldr	r3, [r3, r2]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	2180      	movs	r1, #128	@ 0x80
 8003afe:	5852      	ldr	r2, [r2, r1]
 8003b00:	0010      	movs	r0, r2
 8003b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e012      	b.n	8003b2c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 f9e1 	bl	8003ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0e:	e00d      	b.n	8003b2c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 f9dc 	bl	8003ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	e008      	b.n	8003b2c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 f9d7 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2290      	movs	r2, #144	@ 0x90
 8003b26:	2100      	movs	r1, #0
 8003b28:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b2a:	e1b9      	b.n	8003ea0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b2e:	e1b7      	b.n	8003ea0 <HAL_UART_IRQHandler+0x62c>
 8003b30:	0000080f 	.word	0x0000080f
 8003b34:	10000001 	.word	0x10000001
 8003b38:	04000120 	.word	0x04000120
 8003b3c:	08004b25 	.word	0x08004b25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d000      	beq.n	8003b4a <HAL_UART_IRQHandler+0x2d6>
 8003b48:	e13e      	b.n	8003dc8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b4a:	23a4      	movs	r3, #164	@ 0xa4
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2210      	movs	r2, #16
 8003b52:	4013      	ands	r3, r2
 8003b54:	d100      	bne.n	8003b58 <HAL_UART_IRQHandler+0x2e4>
 8003b56:	e137      	b.n	8003dc8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b58:	23a0      	movs	r3, #160	@ 0xa0
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	4013      	ands	r3, r2
 8003b62:	d100      	bne.n	8003b66 <HAL_UART_IRQHandler+0x2f2>
 8003b64:	e130      	b.n	8003dc8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2240      	movs	r2, #64	@ 0x40
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d000      	beq.n	8003b7e <HAL_UART_IRQHandler+0x30a>
 8003b7c:	e0a4      	b.n	8003cc8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2280      	movs	r2, #128	@ 0x80
 8003b82:	589b      	ldr	r3, [r3, r2]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	217e      	movs	r1, #126	@ 0x7e
 8003b8a:	187b      	adds	r3, r7, r1
 8003b8c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d100      	bne.n	8003b98 <HAL_UART_IRQHandler+0x324>
 8003b96:	e185      	b.n	8003ea4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	225c      	movs	r2, #92	@ 0x5c
 8003b9c:	5a9b      	ldrh	r3, [r3, r2]
 8003b9e:	187a      	adds	r2, r7, r1
 8003ba0:	8812      	ldrh	r2, [r2, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d300      	bcc.n	8003ba8 <HAL_UART_IRQHandler+0x334>
 8003ba6:	e17d      	b.n	8003ea4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	187a      	adds	r2, r7, r1
 8003bac:	215e      	movs	r1, #94	@ 0x5e
 8003bae:	8812      	ldrh	r2, [r2, #0]
 8003bb0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2280      	movs	r2, #128	@ 0x80
 8003bb6:	589b      	ldr	r3, [r3, r2]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d170      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bcc:	2301      	movs	r3, #1
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	49b4      	ldr	r1, [pc, #720]	@ (8003eb4 <HAL_UART_IRQHandler+0x640>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfc:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bfe:	2301      	movs	r3, #1
 8003c00:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			@ (mov r8, r8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	438a      	bics	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c30:	2301      	movs	r3, #1
 8003c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2140      	movs	r1, #64	@ 0x40
 8003c48:	438a      	bics	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c4e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	228c      	movs	r2, #140	@ 0x8c
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c66:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c70:	2301      	movs	r3, #1
 8003c72:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2110      	movs	r1, #16
 8003c88:	438a      	bics	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2280      	movs	r2, #128	@ 0x80
 8003c9c:	589b      	ldr	r3, [r3, r2]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fd fb82 	bl	80013a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	225c      	movs	r2, #92	@ 0x5c
 8003cae:	5a9a      	ldrh	r2, [r3, r2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	215e      	movs	r1, #94	@ 0x5e
 8003cb4:	5a5b      	ldrh	r3, [r3, r1]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 f90d 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cc6:	e0ed      	b.n	8003ea4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	225c      	movs	r2, #92	@ 0x5c
 8003ccc:	5a99      	ldrh	r1, [r3, r2]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	225e      	movs	r2, #94	@ 0x5e
 8003cd2:	5a9b      	ldrh	r3, [r3, r2]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	208e      	movs	r0, #142	@ 0x8e
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	1a8a      	subs	r2, r1, r2
 8003cdc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	225e      	movs	r2, #94	@ 0x5e
 8003ce2:	5a9b      	ldrh	r3, [r3, r2]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d100      	bne.n	8003cec <HAL_UART_IRQHandler+0x478>
 8003cea:	e0dd      	b.n	8003ea8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003cec:	183b      	adds	r3, r7, r0
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d100      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x482>
 8003cf4:	e0d8      	b.n	8003ea8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cfe:	2488      	movs	r4, #136	@ 0x88
 8003d00:	193a      	adds	r2, r7, r4
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	2301      	movs	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4967      	ldr	r1, [pc, #412]	@ (8003eb8 <HAL_UART_IRQHandler+0x644>)
 8003d1c:	400a      	ands	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	193b      	adds	r3, r7, r4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d32:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d34:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d36:	2484      	movs	r4, #132	@ 0x84
 8003d38:	193a      	adds	r2, r7, r4
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	495a      	ldr	r1, [pc, #360]	@ (8003ebc <HAL_UART_IRQHandler+0x648>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	228c      	movs	r2, #140	@ 0x8c
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	2480      	movs	r4, #128	@ 0x80
 8003d84:	193a      	adds	r2, r7, r4
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2110      	movs	r1, #16
 8003da0:	438a      	bics	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	193b      	adds	r3, r7, r4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003db8:	183b      	adds	r3, r7, r0
 8003dba:	881a      	ldrh	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f000 f88d 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dc6:	e06f      	b.n	8003ea8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dc8:	23a4      	movs	r3, #164	@ 0xa4
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2380      	movs	r3, #128	@ 0x80
 8003dd0:	035b      	lsls	r3, r3, #13
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d010      	beq.n	8003df8 <HAL_UART_IRQHandler+0x584>
 8003dd6:	239c      	movs	r3, #156	@ 0x9c
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	03db      	lsls	r3, r3, #15
 8003de0:	4013      	ands	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2280      	movs	r2, #128	@ 0x80
 8003dea:	0352      	lsls	r2, r2, #13
 8003dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f001 fbeb 	bl	80055cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003df6:	e05a      	b.n	8003eae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003df8:	23a4      	movs	r3, #164	@ 0xa4
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2280      	movs	r2, #128	@ 0x80
 8003e00:	4013      	ands	r3, r2
 8003e02:	d016      	beq.n	8003e32 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e04:	23a0      	movs	r3, #160	@ 0xa0
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2280      	movs	r2, #128	@ 0x80
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d106      	bne.n	8003e1e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e10:	239c      	movs	r3, #156	@ 0x9c
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d042      	beq.n	8003eac <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	0010      	movs	r0, r2
 8003e2e:	4798      	blx	r3
    }
    return;
 8003e30:	e03c      	b.n	8003eac <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e32:	23a4      	movs	r3, #164	@ 0xa4
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2240      	movs	r2, #64	@ 0x40
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d00a      	beq.n	8003e54 <HAL_UART_IRQHandler+0x5e0>
 8003e3e:	23a0      	movs	r3, #160	@ 0xa0
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2240      	movs	r2, #64	@ 0x40
 8003e46:	4013      	ands	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 fe80 	bl	8004b52 <UART_EndTransmit_IT>
    return;
 8003e52:	e02c      	b.n	8003eae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e54:	23a4      	movs	r3, #164	@ 0xa4
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <HAL_UART_IRQHandler+0x606>
 8003e62:	23a0      	movs	r3, #160	@ 0xa0
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	05db      	lsls	r3, r3, #23
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f001 fbba 	bl	80055ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e78:	e019      	b.n	8003eae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e7a:	23a4      	movs	r3, #164	@ 0xa4
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	045b      	lsls	r3, r3, #17
 8003e84:	4013      	ands	r3, r2
 8003e86:	d012      	beq.n	8003eae <HAL_UART_IRQHandler+0x63a>
 8003e88:	23a0      	movs	r3, #160	@ 0xa0
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da0d      	bge.n	8003eae <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f001 fba1 	bl	80055dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e9a:	e008      	b.n	8003eae <HAL_UART_IRQHandler+0x63a>
      return;
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	e006      	b.n	8003eae <HAL_UART_IRQHandler+0x63a>
    return;
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	e004      	b.n	8003eae <HAL_UART_IRQHandler+0x63a>
      return;
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	e002      	b.n	8003eae <HAL_UART_IRQHandler+0x63a>
      return;
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	e000      	b.n	8003eae <HAL_UART_IRQHandler+0x63a>
    return;
 8003eac:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b02a      	add	sp, #168	@ 0xa8
 8003eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb4:	fffffeff 	.word	0xfffffeff
 8003eb8:	fffffedf 	.word	0xfffffedf
 8003ebc:	effffffe 	.word	0xeffffffe

08003ec0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ed8:	46c0      	nop			@ (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	000a      	movs	r2, r1
 8003eea:	1cbb      	adds	r3, r7, #2
 8003eec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef8:	b5b0      	push	{r4, r5, r7, lr}
 8003efa:	b090      	sub	sp, #64	@ 0x40
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f00:	231a      	movs	r3, #26
 8003f02:	2220      	movs	r2, #32
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	19db      	adds	r3, r3, r7
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4aaf      	ldr	r2, [pc, #700]	@ (80041e8 <UART_SetConfig+0x2f0>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	0019      	movs	r1, r3
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f36:	430b      	orrs	r3, r1
 8003f38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4aaa      	ldr	r2, [pc, #680]	@ (80041ec <UART_SetConfig+0x2f4>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0018      	movs	r0, r3
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	68d9      	ldr	r1, [r3, #12]
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	0003      	movs	r3, r0
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4aa4      	ldr	r2, [pc, #656]	@ (80041f0 <UART_SetConfig+0x2f8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a9f      	ldr	r2, [pc, #636]	@ (80041f4 <UART_SetConfig+0x2fc>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	220f      	movs	r2, #15
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	0018      	movs	r0, r3
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	0003      	movs	r3, r0
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a95      	ldr	r2, [pc, #596]	@ (80041f8 <UART_SetConfig+0x300>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d131      	bne.n	800400c <UART_SetConfig+0x114>
 8003fa8:	4b94      	ldr	r3, [pc, #592]	@ (80041fc <UART_SetConfig+0x304>)
 8003faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fac:	2203      	movs	r2, #3
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d01d      	beq.n	8003ff0 <UART_SetConfig+0xf8>
 8003fb4:	d823      	bhi.n	8003ffe <UART_SetConfig+0x106>
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d00c      	beq.n	8003fd4 <UART_SetConfig+0xdc>
 8003fba:	d820      	bhi.n	8003ffe <UART_SetConfig+0x106>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <UART_SetConfig+0xce>
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d00e      	beq.n	8003fe2 <UART_SetConfig+0xea>
 8003fc4:	e01b      	b.n	8003ffe <UART_SetConfig+0x106>
 8003fc6:	231b      	movs	r3, #27
 8003fc8:	2220      	movs	r2, #32
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	19db      	adds	r3, r3, r7
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e0b4      	b.n	800413e <UART_SetConfig+0x246>
 8003fd4:	231b      	movs	r3, #27
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	189b      	adds	r3, r3, r2
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	2202      	movs	r2, #2
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e0ad      	b.n	800413e <UART_SetConfig+0x246>
 8003fe2:	231b      	movs	r3, #27
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	19db      	adds	r3, r3, r7
 8003fea:	2204      	movs	r2, #4
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	e0a6      	b.n	800413e <UART_SetConfig+0x246>
 8003ff0:	231b      	movs	r3, #27
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	189b      	adds	r3, r3, r2
 8003ff6:	19db      	adds	r3, r3, r7
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e09f      	b.n	800413e <UART_SetConfig+0x246>
 8003ffe:	231b      	movs	r3, #27
 8004000:	2220      	movs	r2, #32
 8004002:	189b      	adds	r3, r3, r2
 8004004:	19db      	adds	r3, r3, r7
 8004006:	2210      	movs	r2, #16
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e098      	b.n	800413e <UART_SetConfig+0x246>
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a7b      	ldr	r2, [pc, #492]	@ (8004200 <UART_SetConfig+0x308>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d131      	bne.n	800407a <UART_SetConfig+0x182>
 8004016:	4b79      	ldr	r3, [pc, #484]	@ (80041fc <UART_SetConfig+0x304>)
 8004018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401a:	220c      	movs	r2, #12
 800401c:	4013      	ands	r3, r2
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d01d      	beq.n	800405e <UART_SetConfig+0x166>
 8004022:	d823      	bhi.n	800406c <UART_SetConfig+0x174>
 8004024:	2b08      	cmp	r3, #8
 8004026:	d00c      	beq.n	8004042 <UART_SetConfig+0x14a>
 8004028:	d820      	bhi.n	800406c <UART_SetConfig+0x174>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <UART_SetConfig+0x13c>
 800402e:	2b04      	cmp	r3, #4
 8004030:	d00e      	beq.n	8004050 <UART_SetConfig+0x158>
 8004032:	e01b      	b.n	800406c <UART_SetConfig+0x174>
 8004034:	231b      	movs	r3, #27
 8004036:	2220      	movs	r2, #32
 8004038:	189b      	adds	r3, r3, r2
 800403a:	19db      	adds	r3, r3, r7
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e07d      	b.n	800413e <UART_SetConfig+0x246>
 8004042:	231b      	movs	r3, #27
 8004044:	2220      	movs	r2, #32
 8004046:	189b      	adds	r3, r3, r2
 8004048:	19db      	adds	r3, r3, r7
 800404a:	2202      	movs	r2, #2
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e076      	b.n	800413e <UART_SetConfig+0x246>
 8004050:	231b      	movs	r3, #27
 8004052:	2220      	movs	r2, #32
 8004054:	189b      	adds	r3, r3, r2
 8004056:	19db      	adds	r3, r3, r7
 8004058:	2204      	movs	r2, #4
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e06f      	b.n	800413e <UART_SetConfig+0x246>
 800405e:	231b      	movs	r3, #27
 8004060:	2220      	movs	r2, #32
 8004062:	189b      	adds	r3, r3, r2
 8004064:	19db      	adds	r3, r3, r7
 8004066:	2208      	movs	r2, #8
 8004068:	701a      	strb	r2, [r3, #0]
 800406a:	e068      	b.n	800413e <UART_SetConfig+0x246>
 800406c:	231b      	movs	r3, #27
 800406e:	2220      	movs	r2, #32
 8004070:	189b      	adds	r3, r3, r2
 8004072:	19db      	adds	r3, r3, r7
 8004074:	2210      	movs	r2, #16
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e061      	b.n	800413e <UART_SetConfig+0x246>
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a61      	ldr	r2, [pc, #388]	@ (8004204 <UART_SetConfig+0x30c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d106      	bne.n	8004092 <UART_SetConfig+0x19a>
 8004084:	231b      	movs	r3, #27
 8004086:	2220      	movs	r2, #32
 8004088:	189b      	adds	r3, r3, r2
 800408a:	19db      	adds	r3, r3, r7
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e055      	b.n	800413e <UART_SetConfig+0x246>
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a5c      	ldr	r2, [pc, #368]	@ (8004208 <UART_SetConfig+0x310>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d106      	bne.n	80040aa <UART_SetConfig+0x1b2>
 800409c:	231b      	movs	r3, #27
 800409e:	2220      	movs	r2, #32
 80040a0:	189b      	adds	r3, r3, r2
 80040a2:	19db      	adds	r3, r3, r7
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e049      	b.n	800413e <UART_SetConfig+0x246>
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a50      	ldr	r2, [pc, #320]	@ (80041f0 <UART_SetConfig+0x2f8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d13e      	bne.n	8004132 <UART_SetConfig+0x23a>
 80040b4:	4b51      	ldr	r3, [pc, #324]	@ (80041fc <UART_SetConfig+0x304>)
 80040b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040b8:	23c0      	movs	r3, #192	@ 0xc0
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	4013      	ands	r3, r2
 80040be:	22c0      	movs	r2, #192	@ 0xc0
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d027      	beq.n	8004116 <UART_SetConfig+0x21e>
 80040c6:	22c0      	movs	r2, #192	@ 0xc0
 80040c8:	0112      	lsls	r2, r2, #4
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d82a      	bhi.n	8004124 <UART_SetConfig+0x22c>
 80040ce:	2280      	movs	r2, #128	@ 0x80
 80040d0:	0112      	lsls	r2, r2, #4
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d011      	beq.n	80040fa <UART_SetConfig+0x202>
 80040d6:	2280      	movs	r2, #128	@ 0x80
 80040d8:	0112      	lsls	r2, r2, #4
 80040da:	4293      	cmp	r3, r2
 80040dc:	d822      	bhi.n	8004124 <UART_SetConfig+0x22c>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <UART_SetConfig+0x1f4>
 80040e2:	2280      	movs	r2, #128	@ 0x80
 80040e4:	00d2      	lsls	r2, r2, #3
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00e      	beq.n	8004108 <UART_SetConfig+0x210>
 80040ea:	e01b      	b.n	8004124 <UART_SetConfig+0x22c>
 80040ec:	231b      	movs	r3, #27
 80040ee:	2220      	movs	r2, #32
 80040f0:	189b      	adds	r3, r3, r2
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e021      	b.n	800413e <UART_SetConfig+0x246>
 80040fa:	231b      	movs	r3, #27
 80040fc:	2220      	movs	r2, #32
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	19db      	adds	r3, r3, r7
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e01a      	b.n	800413e <UART_SetConfig+0x246>
 8004108:	231b      	movs	r3, #27
 800410a:	2220      	movs	r2, #32
 800410c:	189b      	adds	r3, r3, r2
 800410e:	19db      	adds	r3, r3, r7
 8004110:	2204      	movs	r2, #4
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e013      	b.n	800413e <UART_SetConfig+0x246>
 8004116:	231b      	movs	r3, #27
 8004118:	2220      	movs	r2, #32
 800411a:	189b      	adds	r3, r3, r2
 800411c:	19db      	adds	r3, r3, r7
 800411e:	2208      	movs	r2, #8
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	e00c      	b.n	800413e <UART_SetConfig+0x246>
 8004124:	231b      	movs	r3, #27
 8004126:	2220      	movs	r2, #32
 8004128:	189b      	adds	r3, r3, r2
 800412a:	19db      	adds	r3, r3, r7
 800412c:	2210      	movs	r2, #16
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e005      	b.n	800413e <UART_SetConfig+0x246>
 8004132:	231b      	movs	r3, #27
 8004134:	2220      	movs	r2, #32
 8004136:	189b      	adds	r3, r3, r2
 8004138:	19db      	adds	r3, r3, r7
 800413a:	2210      	movs	r2, #16
 800413c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <UART_SetConfig+0x2f8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d000      	beq.n	800414a <UART_SetConfig+0x252>
 8004148:	e0a9      	b.n	800429e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800414a:	231b      	movs	r3, #27
 800414c:	2220      	movs	r2, #32
 800414e:	189b      	adds	r3, r3, r2
 8004150:	19db      	adds	r3, r3, r7
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d015      	beq.n	8004184 <UART_SetConfig+0x28c>
 8004158:	dc18      	bgt.n	800418c <UART_SetConfig+0x294>
 800415a:	2b04      	cmp	r3, #4
 800415c:	d00d      	beq.n	800417a <UART_SetConfig+0x282>
 800415e:	dc15      	bgt.n	800418c <UART_SetConfig+0x294>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <UART_SetConfig+0x272>
 8004164:	2b02      	cmp	r3, #2
 8004166:	d005      	beq.n	8004174 <UART_SetConfig+0x27c>
 8004168:	e010      	b.n	800418c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416a:	f7fe f865 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 800416e:	0003      	movs	r3, r0
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004172:	e014      	b.n	800419e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b25      	ldr	r3, [pc, #148]	@ (800420c <UART_SetConfig+0x314>)
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004178:	e011      	b.n	800419e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7fd ffd1 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 800417e:	0003      	movs	r3, r0
 8004180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004182:	e00c      	b.n	800419e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004184:	2380      	movs	r3, #128	@ 0x80
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800418a:	e008      	b.n	800419e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004190:	231a      	movs	r3, #26
 8004192:	2220      	movs	r2, #32
 8004194:	189b      	adds	r3, r3, r2
 8004196:	19db      	adds	r3, r3, r7
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
        break;
 800419c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800419e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d100      	bne.n	80041a6 <UART_SetConfig+0x2ae>
 80041a4:	e14b      	b.n	800443e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041aa:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <UART_SetConfig+0x318>)
 80041ac:	0052      	lsls	r2, r2, #1
 80041ae:	5ad3      	ldrh	r3, [r2, r3]
 80041b0:	0019      	movs	r1, r3
 80041b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041b4:	f7fb ffb8 	bl	8000128 <__udivsi3>
 80041b8:	0003      	movs	r3, r0
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	0013      	movs	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	189b      	adds	r3, r3, r2
 80041c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d305      	bcc.n	80041d8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d91d      	bls.n	8004214 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80041d8:	231a      	movs	r3, #26
 80041da:	2220      	movs	r2, #32
 80041dc:	189b      	adds	r3, r3, r2
 80041de:	19db      	adds	r3, r3, r7
 80041e0:	2201      	movs	r2, #1
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	e12b      	b.n	800443e <UART_SetConfig+0x546>
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	cfff69f3 	.word	0xcfff69f3
 80041ec:	ffffcfff 	.word	0xffffcfff
 80041f0:	40008000 	.word	0x40008000
 80041f4:	11fff4ff 	.word	0x11fff4ff
 80041f8:	40013800 	.word	0x40013800
 80041fc:	40021000 	.word	0x40021000
 8004200:	40004400 	.word	0x40004400
 8004204:	40004800 	.word	0x40004800
 8004208:	40004c00 	.word	0x40004c00
 800420c:	00f42400 	.word	0x00f42400
 8004210:	08006448 	.word	0x08006448
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004220:	4b92      	ldr	r3, [pc, #584]	@ (800446c <UART_SetConfig+0x574>)
 8004222:	0052      	lsls	r2, r2, #1
 8004224:	5ad3      	ldrh	r3, [r2, r3]
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	69b8      	ldr	r0, [r7, #24]
 8004232:	69f9      	ldr	r1, [r7, #28]
 8004234:	f7fc f8ee 	bl	8000414 <__aeabi_uldivmod>
 8004238:	0002      	movs	r2, r0
 800423a:	000b      	movs	r3, r1
 800423c:	0e11      	lsrs	r1, r2, #24
 800423e:	021d      	lsls	r5, r3, #8
 8004240:	430d      	orrs	r5, r1
 8004242:	0214      	lsls	r4, r2, #8
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68b8      	ldr	r0, [r7, #8]
 8004252:	68f9      	ldr	r1, [r7, #12]
 8004254:	1900      	adds	r0, r0, r4
 8004256:	4169      	adcs	r1, r5
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f7fc f8d5 	bl	8000414 <__aeabi_uldivmod>
 800426a:	0002      	movs	r2, r0
 800426c:	000b      	movs	r3, r1
 800426e:	0013      	movs	r3, r2
 8004270:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004274:	23c0      	movs	r3, #192	@ 0xc0
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	429a      	cmp	r2, r3
 800427a:	d309      	bcc.n	8004290 <UART_SetConfig+0x398>
 800427c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800427e:	2380      	movs	r3, #128	@ 0x80
 8004280:	035b      	lsls	r3, r3, #13
 8004282:	429a      	cmp	r2, r3
 8004284:	d204      	bcs.n	8004290 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800428c:	60da      	str	r2, [r3, #12]
 800428e:	e0d6      	b.n	800443e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004290:	231a      	movs	r3, #26
 8004292:	2220      	movs	r2, #32
 8004294:	189b      	adds	r3, r3, r2
 8004296:	19db      	adds	r3, r3, r7
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e0cf      	b.n	800443e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d000      	beq.n	80042ac <UART_SetConfig+0x3b4>
 80042aa:	e070      	b.n	800438e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80042ac:	231b      	movs	r3, #27
 80042ae:	2220      	movs	r2, #32
 80042b0:	189b      	adds	r3, r3, r2
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d015      	beq.n	80042e6 <UART_SetConfig+0x3ee>
 80042ba:	dc18      	bgt.n	80042ee <UART_SetConfig+0x3f6>
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d00d      	beq.n	80042dc <UART_SetConfig+0x3e4>
 80042c0:	dc15      	bgt.n	80042ee <UART_SetConfig+0x3f6>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <UART_SetConfig+0x3d4>
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d005      	beq.n	80042d6 <UART_SetConfig+0x3de>
 80042ca:	e010      	b.n	80042ee <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7fd ffb4 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80042d0:	0003      	movs	r3, r0
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042d4:	e014      	b.n	8004300 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d6:	4b66      	ldr	r3, [pc, #408]	@ (8004470 <UART_SetConfig+0x578>)
 80042d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042da:	e011      	b.n	8004300 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042dc:	f7fd ff20 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80042e0:	0003      	movs	r3, r0
 80042e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042e4:	e00c      	b.n	8004300 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e6:	2380      	movs	r3, #128	@ 0x80
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042ec:	e008      	b.n	8004300 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80042f2:	231a      	movs	r3, #26
 80042f4:	2220      	movs	r2, #32
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	19db      	adds	r3, r3, r7
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
        break;
 80042fe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004302:	2b00      	cmp	r3, #0
 8004304:	d100      	bne.n	8004308 <UART_SetConfig+0x410>
 8004306:	e09a      	b.n	800443e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800430c:	4b57      	ldr	r3, [pc, #348]	@ (800446c <UART_SetConfig+0x574>)
 800430e:	0052      	lsls	r2, r2, #1
 8004310:	5ad3      	ldrh	r3, [r2, r3]
 8004312:	0019      	movs	r1, r3
 8004314:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004316:	f7fb ff07 	bl	8000128 <__udivsi3>
 800431a:	0003      	movs	r3, r0
 800431c:	005a      	lsls	r2, r3, #1
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	18d2      	adds	r2, r2, r3
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	0019      	movs	r1, r3
 800432c:	0010      	movs	r0, r2
 800432e:	f7fb fefb 	bl	8000128 <__udivsi3>
 8004332:	0003      	movs	r3, r0
 8004334:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	2b0f      	cmp	r3, #15
 800433a:	d921      	bls.n	8004380 <UART_SetConfig+0x488>
 800433c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800433e:	2380      	movs	r3, #128	@ 0x80
 8004340:	025b      	lsls	r3, r3, #9
 8004342:	429a      	cmp	r2, r3
 8004344:	d21c      	bcs.n	8004380 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	b29a      	uxth	r2, r3
 800434a:	200e      	movs	r0, #14
 800434c:	2420      	movs	r4, #32
 800434e:	1903      	adds	r3, r0, r4
 8004350:	19db      	adds	r3, r3, r7
 8004352:	210f      	movs	r1, #15
 8004354:	438a      	bics	r2, r1
 8004356:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	b29b      	uxth	r3, r3
 800435e:	2207      	movs	r2, #7
 8004360:	4013      	ands	r3, r2
 8004362:	b299      	uxth	r1, r3
 8004364:	1903      	adds	r3, r0, r4
 8004366:	19db      	adds	r3, r3, r7
 8004368:	1902      	adds	r2, r0, r4
 800436a:	19d2      	adds	r2, r2, r7
 800436c:	8812      	ldrh	r2, [r2, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	1902      	adds	r2, r0, r4
 8004378:	19d2      	adds	r2, r2, r7
 800437a:	8812      	ldrh	r2, [r2, #0]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	e05e      	b.n	800443e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004380:	231a      	movs	r3, #26
 8004382:	2220      	movs	r2, #32
 8004384:	189b      	adds	r3, r3, r2
 8004386:	19db      	adds	r3, r3, r7
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e057      	b.n	800443e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800438e:	231b      	movs	r3, #27
 8004390:	2220      	movs	r2, #32
 8004392:	189b      	adds	r3, r3, r2
 8004394:	19db      	adds	r3, r3, r7
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d015      	beq.n	80043c8 <UART_SetConfig+0x4d0>
 800439c:	dc18      	bgt.n	80043d0 <UART_SetConfig+0x4d8>
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d00d      	beq.n	80043be <UART_SetConfig+0x4c6>
 80043a2:	dc15      	bgt.n	80043d0 <UART_SetConfig+0x4d8>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <UART_SetConfig+0x4b6>
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d005      	beq.n	80043b8 <UART_SetConfig+0x4c0>
 80043ac:	e010      	b.n	80043d0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ae:	f7fd ff43 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80043b2:	0003      	movs	r3, r0
 80043b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043b6:	e014      	b.n	80043e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004470 <UART_SetConfig+0x578>)
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043bc:	e011      	b.n	80043e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043be:	f7fd feaf 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80043c2:	0003      	movs	r3, r0
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043c6:	e00c      	b.n	80043e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c8:	2380      	movs	r3, #128	@ 0x80
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ce:	e008      	b.n	80043e2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80043d4:	231a      	movs	r3, #26
 80043d6:	2220      	movs	r2, #32
 80043d8:	189b      	adds	r3, r3, r2
 80043da:	19db      	adds	r3, r3, r7
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
        break;
 80043e0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02a      	beq.n	800443e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043ec:	4b1f      	ldr	r3, [pc, #124]	@ (800446c <UART_SetConfig+0x574>)
 80043ee:	0052      	lsls	r2, r2, #1
 80043f0:	5ad3      	ldrh	r3, [r2, r3]
 80043f2:	0019      	movs	r1, r3
 80043f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80043f6:	f7fb fe97 	bl	8000128 <__udivsi3>
 80043fa:	0003      	movs	r3, r0
 80043fc:	001a      	movs	r2, r3
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	18d2      	adds	r2, r2, r3
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	0019      	movs	r1, r3
 800440c:	0010      	movs	r0, r2
 800440e:	f7fb fe8b 	bl	8000128 <__udivsi3>
 8004412:	0003      	movs	r3, r0
 8004414:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	2b0f      	cmp	r3, #15
 800441a:	d90a      	bls.n	8004432 <UART_SetConfig+0x53a>
 800441c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	025b      	lsls	r3, r3, #9
 8004422:	429a      	cmp	r2, r3
 8004424:	d205      	bcs.n	8004432 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	b29a      	uxth	r2, r3
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	e005      	b.n	800443e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004432:	231a      	movs	r3, #26
 8004434:	2220      	movs	r2, #32
 8004436:	189b      	adds	r3, r3, r2
 8004438:	19db      	adds	r3, r3, r7
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	226a      	movs	r2, #106	@ 0x6a
 8004442:	2101      	movs	r1, #1
 8004444:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	2268      	movs	r2, #104	@ 0x68
 800444a:	2101      	movs	r1, #1
 800444c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	2200      	movs	r2, #0
 8004452:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	2200      	movs	r2, #0
 8004458:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800445a:	231a      	movs	r3, #26
 800445c:	2220      	movs	r2, #32
 800445e:	189b      	adds	r3, r3, r2
 8004460:	19db      	adds	r3, r3, r7
 8004462:	781b      	ldrb	r3, [r3, #0]
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b010      	add	sp, #64	@ 0x40
 800446a:	bdb0      	pop	{r4, r5, r7, pc}
 800446c:	08006448 	.word	0x08006448
 8004470:	00f42400 	.word	0x00f42400

08004474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	2208      	movs	r2, #8
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a4a      	ldr	r2, [pc, #296]	@ (80045b8 <UART_AdvFeatureConfig+0x144>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	2201      	movs	r2, #1
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a43      	ldr	r2, [pc, #268]	@ (80045bc <UART_AdvFeatureConfig+0x148>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a3b      	ldr	r2, [pc, #236]	@ (80045c0 <UART_AdvFeatureConfig+0x14c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e6:	2204      	movs	r2, #4
 80044e8:	4013      	ands	r3, r2
 80044ea:	d00b      	beq.n	8004504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4a34      	ldr	r2, [pc, #208]	@ (80045c4 <UART_AdvFeatureConfig+0x150>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	2210      	movs	r2, #16
 800450a:	4013      	ands	r3, r2
 800450c:	d00b      	beq.n	8004526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <UART_AdvFeatureConfig+0x154>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452a:	2220      	movs	r2, #32
 800452c:	4013      	ands	r3, r2
 800452e:	d00b      	beq.n	8004548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4a25      	ldr	r2, [pc, #148]	@ (80045cc <UART_AdvFeatureConfig+0x158>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	2240      	movs	r2, #64	@ 0x40
 800454e:	4013      	ands	r3, r2
 8004550:	d01d      	beq.n	800458e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a1d      	ldr	r2, [pc, #116]	@ (80045d0 <UART_AdvFeatureConfig+0x15c>)
 800455a:	4013      	ands	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	035b      	lsls	r3, r3, #13
 8004572:	429a      	cmp	r2, r3
 8004574:	d10b      	bne.n	800458e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a15      	ldr	r2, [pc, #84]	@ (80045d4 <UART_AdvFeatureConfig+0x160>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	2280      	movs	r2, #128	@ 0x80
 8004594:	4013      	ands	r3, r2
 8004596:	d00b      	beq.n	80045b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4a0e      	ldr	r2, [pc, #56]	@ (80045d8 <UART_AdvFeatureConfig+0x164>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }
}
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	ffff7fff 	.word	0xffff7fff
 80045bc:	fffdffff 	.word	0xfffdffff
 80045c0:	fffeffff 	.word	0xfffeffff
 80045c4:	fffbffff 	.word	0xfffbffff
 80045c8:	ffffefff 	.word	0xffffefff
 80045cc:	ffffdfff 	.word	0xffffdfff
 80045d0:	ffefffff 	.word	0xffefffff
 80045d4:	ff9fffff 	.word	0xff9fffff
 80045d8:	fff7ffff 	.word	0xfff7ffff

080045dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b092      	sub	sp, #72	@ 0x48
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2290      	movs	r2, #144	@ 0x90
 80045e8:	2100      	movs	r1, #0
 80045ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045ec:	f7fc fdf4 	bl	80011d8 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2208      	movs	r2, #8
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d12d      	bne.n	800465e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004604:	2280      	movs	r2, #128	@ 0x80
 8004606:	0391      	lsls	r1, r2, #14
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4a47      	ldr	r2, [pc, #284]	@ (8004728 <UART_CheckIdleState+0x14c>)
 800460c:	9200      	str	r2, [sp, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	f000 f88e 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 8004614:	1e03      	subs	r3, r0, #0
 8004616:	d022      	beq.n	800465e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004618:	f3ef 8310 	mrs	r3, PRIMASK
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004620:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004622:	2301      	movs	r3, #1
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2180      	movs	r1, #128	@ 0x80
 800463a:	438a      	bics	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2288      	movs	r2, #136	@ 0x88
 800464e:	2120      	movs	r1, #32
 8004650:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2284      	movs	r2, #132	@ 0x84
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e060      	b.n	8004720 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2204      	movs	r2, #4
 8004666:	4013      	ands	r3, r2
 8004668:	2b04      	cmp	r3, #4
 800466a:	d146      	bne.n	80046fa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466e:	2280      	movs	r2, #128	@ 0x80
 8004670:	03d1      	lsls	r1, r2, #15
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4a2c      	ldr	r2, [pc, #176]	@ (8004728 <UART_CheckIdleState+0x14c>)
 8004676:	9200      	str	r2, [sp, #0]
 8004678:	2200      	movs	r2, #0
 800467a:	f000 f859 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 800467e:	1e03      	subs	r3, r0, #0
 8004680:	d03b      	beq.n	80046fa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004682:	f3ef 8310 	mrs	r3, PRIMASK
 8004686:	60fb      	str	r3, [r7, #12]
  return(result);
 8004688:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800468a:	637b      	str	r3, [r7, #52]	@ 0x34
 800468c:	2301      	movs	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f383 8810 	msr	PRIMASK, r3
}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4922      	ldr	r1, [pc, #136]	@ (800472c <UART_CheckIdleState+0x150>)
 80046a4:	400a      	ands	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b4:	f3ef 8310 	mrs	r3, PRIMASK
 80046b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80046ba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80046be:	2301      	movs	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f383 8810 	msr	PRIMASK, r3
}
 80046c8:	46c0      	nop			@ (mov r8, r8)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	438a      	bics	r2, r1
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f383 8810 	msr	PRIMASK, r3
}
 80046e4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	228c      	movs	r2, #140	@ 0x8c
 80046ea:	2120      	movs	r1, #32
 80046ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2284      	movs	r2, #132	@ 0x84
 80046f2:	2100      	movs	r1, #0
 80046f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e012      	b.n	8004720 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2288      	movs	r2, #136	@ 0x88
 80046fe:	2120      	movs	r1, #32
 8004700:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	228c      	movs	r2, #140	@ 0x8c
 8004706:	2120      	movs	r1, #32
 8004708:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2284      	movs	r2, #132	@ 0x84
 800471a:	2100      	movs	r1, #0
 800471c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b010      	add	sp, #64	@ 0x40
 8004726:	bd80      	pop	{r7, pc}
 8004728:	01ffffff 	.word	0x01ffffff
 800472c:	fffffedf 	.word	0xfffffedf

08004730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004740:	e051      	b.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3301      	adds	r3, #1
 8004746:	d04e      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004748:	f7fc fd46 	bl	80011d8 <HAL_GetTick>
 800474c:	0002      	movs	r2, r0
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	429a      	cmp	r2, r3
 8004756:	d302      	bcc.n	800475e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e051      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2204      	movs	r2, #4
 800476a:	4013      	ands	r3, r2
 800476c:	d03b      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b80      	cmp	r3, #128	@ 0x80
 8004772:	d038      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b40      	cmp	r3, #64	@ 0x40
 8004778:	d035      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	2208      	movs	r2, #8
 8004782:	4013      	ands	r3, r2
 8004784:	2b08      	cmp	r3, #8
 8004786:	d111      	bne.n	80047ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2208      	movs	r2, #8
 800478e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f960 	bl	8004a58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2290      	movs	r2, #144	@ 0x90
 800479c:	2108      	movs	r1, #8
 800479e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2284      	movs	r2, #132	@ 0x84
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e02c      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	401a      	ands	r2, r3
 80047b8:	2380      	movs	r3, #128	@ 0x80
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	429a      	cmp	r2, r3
 80047be:	d112      	bne.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2280      	movs	r2, #128	@ 0x80
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 f943 	bl	8004a58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2290      	movs	r2, #144	@ 0x90
 80047d6:	2120      	movs	r1, #32
 80047d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2284      	movs	r2, #132	@ 0x84
 80047de:	2100      	movs	r1, #0
 80047e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e00f      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	425a      	negs	r2, r3
 80047f6:	4153      	adcs	r3, r2
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	001a      	movs	r2, r3
 80047fc:	1dfb      	adds	r3, r7, #7
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d09e      	beq.n	8004742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b004      	add	sp, #16
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b098      	sub	sp, #96	@ 0x60
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	1dbb      	adds	r3, r7, #6
 800481c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1dba      	adds	r2, r7, #6
 8004828:	215c      	movs	r1, #92	@ 0x5c
 800482a:	8812      	ldrh	r2, [r2, #0]
 800482c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1dba      	adds	r2, r7, #6
 8004832:	215e      	movs	r1, #94	@ 0x5e
 8004834:	8812      	ldrh	r2, [r2, #0]
 8004836:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	2380      	movs	r3, #128	@ 0x80
 8004844:	015b      	lsls	r3, r3, #5
 8004846:	429a      	cmp	r2, r3
 8004848:	d10d      	bne.n	8004866 <UART_Start_Receive_IT+0x56>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <UART_Start_Receive_IT+0x4c>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2260      	movs	r2, #96	@ 0x60
 8004856:	497b      	ldr	r1, [pc, #492]	@ (8004a44 <UART_Start_Receive_IT+0x234>)
 8004858:	5299      	strh	r1, [r3, r2]
 800485a:	e02e      	b.n	80048ba <UART_Start_Receive_IT+0xaa>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2260      	movs	r2, #96	@ 0x60
 8004860:	21ff      	movs	r1, #255	@ 0xff
 8004862:	5299      	strh	r1, [r3, r2]
 8004864:	e029      	b.n	80048ba <UART_Start_Receive_IT+0xaa>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <UART_Start_Receive_IT+0x7a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <UART_Start_Receive_IT+0x70>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2260      	movs	r2, #96	@ 0x60
 800487a:	21ff      	movs	r1, #255	@ 0xff
 800487c:	5299      	strh	r1, [r3, r2]
 800487e:	e01c      	b.n	80048ba <UART_Start_Receive_IT+0xaa>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2260      	movs	r2, #96	@ 0x60
 8004884:	217f      	movs	r1, #127	@ 0x7f
 8004886:	5299      	strh	r1, [r3, r2]
 8004888:	e017      	b.n	80048ba <UART_Start_Receive_IT+0xaa>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	2380      	movs	r3, #128	@ 0x80
 8004890:	055b      	lsls	r3, r3, #21
 8004892:	429a      	cmp	r2, r3
 8004894:	d10d      	bne.n	80048b2 <UART_Start_Receive_IT+0xa2>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <UART_Start_Receive_IT+0x98>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2260      	movs	r2, #96	@ 0x60
 80048a2:	217f      	movs	r1, #127	@ 0x7f
 80048a4:	5299      	strh	r1, [r3, r2]
 80048a6:	e008      	b.n	80048ba <UART_Start_Receive_IT+0xaa>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2260      	movs	r2, #96	@ 0x60
 80048ac:	213f      	movs	r1, #63	@ 0x3f
 80048ae:	5299      	strh	r1, [r3, r2]
 80048b0:	e003      	b.n	80048ba <UART_Start_Receive_IT+0xaa>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2260      	movs	r2, #96	@ 0x60
 80048b6:	2100      	movs	r1, #0
 80048b8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2290      	movs	r2, #144	@ 0x90
 80048be:	2100      	movs	r1, #0
 80048c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	228c      	movs	r2, #140	@ 0x8c
 80048c6:	2122      	movs	r1, #34	@ 0x22
 80048c8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ca:	f3ef 8310 	mrs	r3, PRIMASK
 80048ce:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80048d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048d4:	2301      	movs	r3, #1
 80048d6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2101      	movs	r1, #1
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004900:	2380      	movs	r3, #128	@ 0x80
 8004902:	059b      	lsls	r3, r3, #22
 8004904:	429a      	cmp	r2, r3
 8004906:	d150      	bne.n	80049aa <UART_Start_Receive_IT+0x19a>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2268      	movs	r2, #104	@ 0x68
 800490c:	5a9b      	ldrh	r3, [r3, r2]
 800490e:	1dba      	adds	r2, r7, #6
 8004910:	8812      	ldrh	r2, [r2, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d349      	bcc.n	80049aa <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	015b      	lsls	r3, r3, #5
 800491e:	429a      	cmp	r2, r3
 8004920:	d107      	bne.n	8004932 <UART_Start_Receive_IT+0x122>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a46      	ldr	r2, [pc, #280]	@ (8004a48 <UART_Start_Receive_IT+0x238>)
 800492e:	675a      	str	r2, [r3, #116]	@ 0x74
 8004930:	e002      	b.n	8004938 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a45      	ldr	r2, [pc, #276]	@ (8004a4c <UART_Start_Receive_IT+0x23c>)
 8004936:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d019      	beq.n	8004974 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004940:	f3ef 8310 	mrs	r3, PRIMASK
 8004944:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004948:	65bb      	str	r3, [r7, #88]	@ 0x58
 800494a:	2301      	movs	r3, #1
 800494c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			@ (mov r8, r8)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2180      	movs	r1, #128	@ 0x80
 8004962:	0049      	lsls	r1, r1, #1
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800497a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800497c:	657b      	str	r3, [r7, #84]	@ 0x54
 800497e:	2301      	movs	r3, #1
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004984:	f383 8810 	msr	PRIMASK, r3
}
 8004988:	46c0      	nop			@ (mov r8, r8)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2180      	movs	r1, #128	@ 0x80
 8004996:	0549      	lsls	r1, r1, #21
 8004998:	430a      	orrs	r2, r1
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	f383 8810 	msr	PRIMASK, r3
}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	e047      	b.n	8004a3a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	2380      	movs	r3, #128	@ 0x80
 80049b0:	015b      	lsls	r3, r3, #5
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d107      	bne.n	80049c6 <UART_Start_Receive_IT+0x1b6>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a23      	ldr	r2, [pc, #140]	@ (8004a50 <UART_Start_Receive_IT+0x240>)
 80049c2:	675a      	str	r2, [r3, #116]	@ 0x74
 80049c4:	e002      	b.n	80049cc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a22      	ldr	r2, [pc, #136]	@ (8004a54 <UART_Start_Receive_IT+0x244>)
 80049ca:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d019      	beq.n	8004a08 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d4:	f3ef 8310 	mrs	r3, PRIMASK
 80049d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80049da:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80049dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049de:	2301      	movs	r3, #1
 80049e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	f383 8810 	msr	PRIMASK, r3
}
 80049e8:	46c0      	nop			@ (mov r8, r8)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2190      	movs	r1, #144	@ 0x90
 80049f6:	0049      	lsls	r1, r1, #1
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	f383 8810 	msr	PRIMASK, r3
}
 8004a06:	e018      	b.n	8004a3a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a08:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a0e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a10:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a12:	2301      	movs	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f383 8810 	msr	PRIMASK, r3
}
 8004a1c:	46c0      	nop			@ (mov r8, r8)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2120      	movs	r1, #32
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b018      	add	sp, #96	@ 0x60
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	000001ff 	.word	0x000001ff
 8004a48:	08005275 	.word	0x08005275
 8004a4c:	08004f35 	.word	0x08004f35
 8004a50:	08004d71 	.word	0x08004d71
 8004a54:	08004bad 	.word	0x08004bad

08004a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08e      	sub	sp, #56	@ 0x38
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a60:	f3ef 8310 	mrs	r3, PRIMASK
 8004a64:	617b      	str	r3, [r7, #20]
  return(result);
 8004a66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	f383 8810 	msr	PRIMASK, r3
}
 8004a74:	46c0      	nop			@ (mov r8, r8)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4926      	ldr	r1, [pc, #152]	@ (8004b1c <UART_EndRxTransfer+0xc4>)
 8004a82:	400a      	ands	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f383 8810 	msr	PRIMASK, r3
}
 8004a90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	623b      	str	r3, [r7, #32]
  return(result);
 8004a98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	491b      	ldr	r1, [pc, #108]	@ (8004b20 <UART_EndRxTransfer+0xc8>)
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d118      	bne.n	8004afe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004acc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f383 8810 	msr	PRIMASK, r3
}
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2110      	movs	r1, #16
 8004aee:	438a      	bics	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f383 8810 	msr	PRIMASK, r3
}
 8004afc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	228c      	movs	r2, #140	@ 0x8c
 8004b02:	2120      	movs	r1, #32
 8004b04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b00e      	add	sp, #56	@ 0x38
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	fffffedf 	.word	0xfffffedf
 8004b20:	effffffe 	.word	0xeffffffe

08004b24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	225e      	movs	r2, #94	@ 0x5e
 8004b36:	2100      	movs	r1, #0
 8004b38:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2256      	movs	r2, #86	@ 0x56
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7ff f9c3 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b004      	add	sp, #16
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b60:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	2301      	movs	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f383 8810 	msr	PRIMASK, r3
}
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2140      	movs	r1, #64	@ 0x40
 8004b7c:	438a      	bics	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2288      	movs	r2, #136	@ 0x88
 8004b90:	2120      	movs	r1, #32
 8004b92:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff f98f 	bl	8003ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b006      	add	sp, #24
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b094      	sub	sp, #80	@ 0x50
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bb4:	204e      	movs	r0, #78	@ 0x4e
 8004bb6:	183b      	adds	r3, r7, r0
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	2160      	movs	r1, #96	@ 0x60
 8004bbc:	5a52      	ldrh	r2, [r2, r1]
 8004bbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	228c      	movs	r2, #140	@ 0x8c
 8004bc4:	589b      	ldr	r3, [r3, r2]
 8004bc6:	2b22      	cmp	r3, #34	@ 0x22
 8004bc8:	d000      	beq.n	8004bcc <UART_RxISR_8BIT+0x20>
 8004bca:	e0bf      	b.n	8004d4c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bd2:	214c      	movs	r1, #76	@ 0x4c
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	183b      	adds	r3, r7, r0
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b2d9      	uxtb	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	400a      	ands	r2, r1
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	225e      	movs	r2, #94	@ 0x5e
 8004bfc:	5a9b      	ldrh	r3, [r3, r2]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b299      	uxth	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	225e      	movs	r2, #94	@ 0x5e
 8004c08:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	225e      	movs	r2, #94	@ 0x5e
 8004c0e:	5a9b      	ldrh	r3, [r3, r2]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d000      	beq.n	8004c18 <UART_RxISR_8BIT+0x6c>
 8004c16:	e0a1      	b.n	8004d5c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c22:	2301      	movs	r3, #1
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	494a      	ldr	r1, [pc, #296]	@ (8004d64 <UART_RxISR_8BIT+0x1b8>)
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c54:	2301      	movs	r3, #1
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	228c      	movs	r2, #140	@ 0x8c
 8004c80:	2120      	movs	r1, #32
 8004c82:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a34      	ldr	r2, [pc, #208]	@ (8004d68 <UART_RxISR_8BIT+0x1bc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01f      	beq.n	8004cda <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	2380      	movs	r3, #128	@ 0x80
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d018      	beq.n	8004cda <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cac:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cae:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f383 8810 	msr	PRIMASK, r3
}
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4928      	ldr	r1, [pc, #160]	@ (8004d6c <UART_RxISR_8BIT+0x1c0>)
 8004cca:	400a      	ands	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d12f      	bne.n	8004d42 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cec:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cee:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f383 8810 	msr	PRIMASK, r3
}
 8004cfc:	46c0      	nop			@ (mov r8, r8)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2110      	movs	r1, #16
 8004d0a:	438a      	bics	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f383 8810 	msr	PRIMASK, r3
}
 8004d18:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	2210      	movs	r2, #16
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d103      	bne.n	8004d30 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	225c      	movs	r2, #92	@ 0x5c
 8004d34:	5a9a      	ldrh	r2, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	0011      	movs	r1, r2
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7ff f8d0 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d40:	e00c      	b.n	8004d5c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f7fb ffa7 	bl	8000c98 <HAL_UART_RxCpltCallback>
}
 8004d4a:	e007      	b.n	8004d5c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2108      	movs	r1, #8
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	619a      	str	r2, [r3, #24]
}
 8004d5c:	46c0      	nop			@ (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b014      	add	sp, #80	@ 0x50
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	fffffedf 	.word	0xfffffedf
 8004d68:	40008000 	.word	0x40008000
 8004d6c:	fbffffff 	.word	0xfbffffff

08004d70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b094      	sub	sp, #80	@ 0x50
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d78:	204e      	movs	r0, #78	@ 0x4e
 8004d7a:	183b      	adds	r3, r7, r0
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	2160      	movs	r1, #96	@ 0x60
 8004d80:	5a52      	ldrh	r2, [r2, r1]
 8004d82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	228c      	movs	r2, #140	@ 0x8c
 8004d88:	589b      	ldr	r3, [r3, r2]
 8004d8a:	2b22      	cmp	r3, #34	@ 0x22
 8004d8c:	d000      	beq.n	8004d90 <UART_RxISR_16BIT+0x20>
 8004d8e:	e0bf      	b.n	8004f10 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d96:	214c      	movs	r1, #76	@ 0x4c
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004da2:	187b      	adds	r3, r7, r1
 8004da4:	183a      	adds	r2, r7, r0
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	8812      	ldrh	r2, [r2, #0]
 8004daa:	4013      	ands	r3, r2
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004db0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	225e      	movs	r2, #94	@ 0x5e
 8004dc0:	5a9b      	ldrh	r3, [r3, r2]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b299      	uxth	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	225e      	movs	r2, #94	@ 0x5e
 8004dcc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	225e      	movs	r2, #94	@ 0x5e
 8004dd2:	5a9b      	ldrh	r3, [r3, r2]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d000      	beq.n	8004ddc <UART_RxISR_16BIT+0x6c>
 8004dda:	e0a1      	b.n	8004f20 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8004de0:	623b      	str	r3, [r7, #32]
  return(result);
 8004de2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de6:	2301      	movs	r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	f383 8810 	msr	PRIMASK, r3
}
 8004df0:	46c0      	nop			@ (mov r8, r8)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	494a      	ldr	r1, [pc, #296]	@ (8004f28 <UART_RxISR_16BIT+0x1b8>)
 8004dfe:	400a      	ands	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e08:	f383 8810 	msr	PRIMASK, r3
}
 8004e0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e18:	2301      	movs	r3, #1
 8004e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1e:	f383 8810 	msr	PRIMASK, r3
}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2101      	movs	r1, #1
 8004e30:	438a      	bics	r2, r1
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	f383 8810 	msr	PRIMASK, r3
}
 8004e3e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	228c      	movs	r2, #140	@ 0x8c
 8004e44:	2120      	movs	r1, #32
 8004e46:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a34      	ldr	r2, [pc, #208]	@ (8004f2c <UART_RxISR_16BIT+0x1bc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01f      	beq.n	8004e9e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	2380      	movs	r3, #128	@ 0x80
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e70:	617b      	str	r3, [r7, #20]
  return(result);
 8004e72:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e76:	2301      	movs	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f383 8810 	msr	PRIMASK, r3
}
 8004e80:	46c0      	nop			@ (mov r8, r8)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4928      	ldr	r1, [pc, #160]	@ (8004f30 <UART_RxISR_16BIT+0x1c0>)
 8004e8e:	400a      	ands	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d12f      	bne.n	8004f06 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eac:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f383 8810 	msr	PRIMASK, r3
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2110      	movs	r1, #16
 8004ece:	438a      	bics	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f383 8810 	msr	PRIMASK, r3
}
 8004edc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d103      	bne.n	8004ef4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	225c      	movs	r2, #92	@ 0x5c
 8004ef8:	5a9a      	ldrh	r2, [r3, r2]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0011      	movs	r1, r2
 8004efe:	0018      	movs	r0, r3
 8004f00:	f7fe ffee 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f04:	e00c      	b.n	8004f20 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7fb fec5 	bl	8000c98 <HAL_UART_RxCpltCallback>
}
 8004f0e:	e007      	b.n	8004f20 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2108      	movs	r1, #8
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	619a      	str	r2, [r3, #24]
}
 8004f20:	46c0      	nop			@ (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b014      	add	sp, #80	@ 0x50
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	fffffedf 	.word	0xfffffedf
 8004f2c:	40008000 	.word	0x40008000
 8004f30:	fbffffff 	.word	0xfbffffff

08004f34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b0a0      	sub	sp, #128	@ 0x80
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004f3c:	237a      	movs	r3, #122	@ 0x7a
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	2160      	movs	r1, #96	@ 0x60
 8004f44:	5a52      	ldrh	r2, [r2, r1]
 8004f46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	228c      	movs	r2, #140	@ 0x8c
 8004f64:	589b      	ldr	r3, [r3, r2]
 8004f66:	2b22      	cmp	r3, #34	@ 0x22
 8004f68:	d000      	beq.n	8004f6c <UART_RxISR_8BIT_FIFOEN+0x38>
 8004f6a:	e16a      	b.n	8005242 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f6c:	236e      	movs	r3, #110	@ 0x6e
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	2168      	movs	r1, #104	@ 0x68
 8004f74:	5a52      	ldrh	r2, [r2, r1]
 8004f76:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f78:	e111      	b.n	800519e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f80:	216c      	movs	r1, #108	@ 0x6c
 8004f82:	187b      	adds	r3, r7, r1
 8004f84:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	237a      	movs	r3, #122	@ 0x7a
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b2d9      	uxtb	r1, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f98:	400a      	ands	r2, r1
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	225e      	movs	r2, #94	@ 0x5e
 8004fac:	5a9b      	ldrh	r3, [r3, r2]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b299      	uxth	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	225e      	movs	r2, #94	@ 0x5e
 8004fb8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004fc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fc4:	2207      	movs	r2, #7
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d049      	beq.n	800505e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d010      	beq.n	8004ff4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004fd2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004fd4:	2380      	movs	r3, #128	@ 0x80
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2290      	movs	r2, #144	@ 0x90
 8004fe8:	589b      	ldr	r3, [r3, r2]
 8004fea:	2201      	movs	r2, #1
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2190      	movs	r1, #144	@ 0x90
 8004ff2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d00f      	beq.n	800501c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004ffc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ffe:	2201      	movs	r2, #1
 8005000:	4013      	ands	r3, r2
 8005002:	d00b      	beq.n	800501c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2202      	movs	r2, #2
 800500a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2290      	movs	r2, #144	@ 0x90
 8005010:	589b      	ldr	r3, [r3, r2]
 8005012:	2204      	movs	r2, #4
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2190      	movs	r1, #144	@ 0x90
 800501a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800501c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800501e:	2204      	movs	r2, #4
 8005020:	4013      	ands	r3, r2
 8005022:	d00f      	beq.n	8005044 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005024:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005026:	2201      	movs	r2, #1
 8005028:	4013      	ands	r3, r2
 800502a:	d00b      	beq.n	8005044 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2204      	movs	r2, #4
 8005032:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2290      	movs	r2, #144	@ 0x90
 8005038:	589b      	ldr	r3, [r3, r2]
 800503a:	2202      	movs	r2, #2
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2190      	movs	r1, #144	@ 0x90
 8005042:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2290      	movs	r2, #144	@ 0x90
 8005048:	589b      	ldr	r3, [r3, r2]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	0018      	movs	r0, r3
 8005052:	f7fe ff3d 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2290      	movs	r2, #144	@ 0x90
 800505a:	2100      	movs	r1, #0
 800505c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	225e      	movs	r2, #94	@ 0x5e
 8005062:	5a9b      	ldrh	r3, [r3, r2]
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d000      	beq.n	800506c <UART_RxISR_8BIT_FIFOEN+0x138>
 800506a:	e098      	b.n	800519e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506c:	f3ef 8310 	mrs	r3, PRIMASK
 8005070:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005076:	2301      	movs	r3, #1
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507c:	f383 8810 	msr	PRIMASK, r3
}
 8005080:	46c0      	nop			@ (mov r8, r8)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4973      	ldr	r1, [pc, #460]	@ (800525c <UART_RxISR_8BIT_FIFOEN+0x328>)
 800508e:	400a      	ands	r2, r1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005094:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005098:	f383 8810 	msr	PRIMASK, r3
}
 800509c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509e:	f3ef 8310 	mrs	r3, PRIMASK
 80050a2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80050a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80050a8:	2301      	movs	r3, #1
 80050aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ae:	f383 8810 	msr	PRIMASK, r3
}
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4968      	ldr	r1, [pc, #416]	@ (8005260 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80050c0:	400a      	ands	r2, r1
 80050c2:	609a      	str	r2, [r3, #8]
 80050c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ca:	f383 8810 	msr	PRIMASK, r3
}
 80050ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	228c      	movs	r2, #140	@ 0x8c
 80050d4:	2120      	movs	r1, #32
 80050d6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005264 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01f      	beq.n	800512e <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	2380      	movs	r3, #128	@ 0x80
 80050f6:	041b      	lsls	r3, r3, #16
 80050f8:	4013      	ands	r3, r2
 80050fa:	d018      	beq.n	800512e <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005104:	663b      	str	r3, [r7, #96]	@ 0x60
 8005106:	2301      	movs	r3, #1
 8005108:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	f383 8810 	msr	PRIMASK, r3
}
 8005110:	46c0      	nop			@ (mov r8, r8)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4952      	ldr	r1, [pc, #328]	@ (8005268 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800511e:	400a      	ands	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005124:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005128:	f383 8810 	msr	PRIMASK, r3
}
 800512c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005132:	2b01      	cmp	r3, #1
 8005134:	d12f      	bne.n	8005196 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513c:	f3ef 8310 	mrs	r3, PRIMASK
 8005140:	623b      	str	r3, [r7, #32]
  return(result);
 8005142:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005146:	2301      	movs	r3, #1
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	f383 8810 	msr	PRIMASK, r3
}
 8005150:	46c0      	nop			@ (mov r8, r8)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2110      	movs	r1, #16
 800515e:	438a      	bics	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005164:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005168:	f383 8810 	msr	PRIMASK, r3
}
 800516c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	2210      	movs	r2, #16
 8005176:	4013      	ands	r3, r2
 8005178:	2b10      	cmp	r3, #16
 800517a:	d103      	bne.n	8005184 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2210      	movs	r2, #16
 8005182:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	225c      	movs	r2, #92	@ 0x5c
 8005188:	5a9a      	ldrh	r2, [r3, r2]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0011      	movs	r1, r2
 800518e:	0018      	movs	r0, r3
 8005190:	f7fe fea6 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
 8005194:	e003      	b.n	800519e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0018      	movs	r0, r3
 800519a:	f7fb fd7d 	bl	8000c98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800519e:	236e      	movs	r3, #110	@ 0x6e
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d004      	beq.n	80051b2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80051a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051aa:	2220      	movs	r2, #32
 80051ac:	4013      	ands	r3, r2
 80051ae:	d000      	beq.n	80051b2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80051b0:	e6e3      	b.n	8004f7a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80051b2:	205a      	movs	r0, #90	@ 0x5a
 80051b4:	183b      	adds	r3, r7, r0
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	215e      	movs	r1, #94	@ 0x5e
 80051ba:	5a52      	ldrh	r2, [r2, r1]
 80051bc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80051be:	0001      	movs	r1, r0
 80051c0:	187b      	adds	r3, r7, r1
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d044      	beq.n	8005252 <UART_RxISR_8BIT_FIFOEN+0x31e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2268      	movs	r2, #104	@ 0x68
 80051cc:	5a9b      	ldrh	r3, [r3, r2]
 80051ce:	187a      	adds	r2, r7, r1
 80051d0:	8812      	ldrh	r2, [r2, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d23d      	bcs.n	8005252 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d6:	f3ef 8310 	mrs	r3, PRIMASK
 80051da:	60bb      	str	r3, [r7, #8]
  return(result);
 80051dc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051de:	657b      	str	r3, [r7, #84]	@ 0x54
 80051e0:	2301      	movs	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f383 8810 	msr	PRIMASK, r3
}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	491d      	ldr	r1, [pc, #116]	@ (800526c <UART_RxISR_8BIT_FIFOEN+0x338>)
 80051f8:	400a      	ands	r2, r1
 80051fa:	609a      	str	r2, [r3, #8]
 80051fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f383 8810 	msr	PRIMASK, r3
}
 8005206:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a19      	ldr	r2, [pc, #100]	@ (8005270 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800520c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520e:	f3ef 8310 	mrs	r3, PRIMASK
 8005212:	617b      	str	r3, [r7, #20]
  return(result);
 8005214:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005216:	653b      	str	r3, [r7, #80]	@ 0x50
 8005218:	2301      	movs	r3, #1
 800521a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2120      	movs	r1, #32
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005236:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f383 8810 	msr	PRIMASK, r3
}
 800523e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005240:	e007      	b.n	8005252 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2108      	movs	r1, #8
 800524e:	430a      	orrs	r2, r1
 8005250:	619a      	str	r2, [r3, #24]
}
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	46bd      	mov	sp, r7
 8005256:	b020      	add	sp, #128	@ 0x80
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	fffffeff 	.word	0xfffffeff
 8005260:	effffffe 	.word	0xeffffffe
 8005264:	40008000 	.word	0x40008000
 8005268:	fbffffff 	.word	0xfbffffff
 800526c:	efffffff 	.word	0xefffffff
 8005270:	08004bad 	.word	0x08004bad

08005274 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b0a2      	sub	sp, #136	@ 0x88
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800527c:	2382      	movs	r3, #130	@ 0x82
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	2160      	movs	r1, #96	@ 0x60
 8005284:	5a52      	ldrh	r2, [r2, r1]
 8005286:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	2284      	movs	r2, #132	@ 0x84
 8005290:	18ba      	adds	r2, r7, r2
 8005292:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	228c      	movs	r2, #140	@ 0x8c
 80052a8:	589b      	ldr	r3, [r3, r2]
 80052aa:	2b22      	cmp	r3, #34	@ 0x22
 80052ac:	d000      	beq.n	80052b0 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80052ae:	e174      	b.n	800559a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80052b0:	2376      	movs	r3, #118	@ 0x76
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	2168      	movs	r1, #104	@ 0x68
 80052b8:	5a52      	ldrh	r2, [r2, r1]
 80052ba:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052bc:	e119      	b.n	80054f2 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052c4:	2174      	movs	r1, #116	@ 0x74
 80052c6:	187b      	adds	r3, r7, r1
 80052c8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ce:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	2282      	movs	r2, #130	@ 0x82
 80052d4:	18ba      	adds	r2, r7, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	8812      	ldrh	r2, [r2, #0]
 80052da:	4013      	ands	r3, r2
 80052dc:	b29a      	uxth	r2, r3
 80052de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	1c9a      	adds	r2, r3, #2
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	225e      	movs	r2, #94	@ 0x5e
 80052f0:	5a9b      	ldrh	r3, [r3, r2]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b299      	uxth	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	225e      	movs	r2, #94	@ 0x5e
 80052fc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	2184      	movs	r1, #132	@ 0x84
 8005306:	187a      	adds	r2, r7, r1
 8005308:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800530a:	187b      	adds	r3, r7, r1
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2207      	movs	r2, #7
 8005310:	4013      	ands	r3, r2
 8005312:	d04e      	beq.n	80053b2 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005314:	187b      	adds	r3, r7, r1
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2201      	movs	r2, #1
 800531a:	4013      	ands	r3, r2
 800531c:	d010      	beq.n	8005340 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800531e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005320:	2380      	movs	r3, #128	@ 0x80
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	4013      	ands	r3, r2
 8005326:	d00b      	beq.n	8005340 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2290      	movs	r2, #144	@ 0x90
 8005334:	589b      	ldr	r3, [r3, r2]
 8005336:	2201      	movs	r2, #1
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2190      	movs	r1, #144	@ 0x90
 800533e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005340:	2384      	movs	r3, #132	@ 0x84
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	d00f      	beq.n	800536c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800534c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800534e:	2201      	movs	r2, #1
 8005350:	4013      	ands	r3, r2
 8005352:	d00b      	beq.n	800536c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2202      	movs	r2, #2
 800535a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2290      	movs	r2, #144	@ 0x90
 8005360:	589b      	ldr	r3, [r3, r2]
 8005362:	2204      	movs	r2, #4
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2190      	movs	r1, #144	@ 0x90
 800536a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800536c:	2384      	movs	r3, #132	@ 0x84
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2204      	movs	r2, #4
 8005374:	4013      	ands	r3, r2
 8005376:	d00f      	beq.n	8005398 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800537a:	2201      	movs	r2, #1
 800537c:	4013      	ands	r3, r2
 800537e:	d00b      	beq.n	8005398 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2204      	movs	r2, #4
 8005386:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2290      	movs	r2, #144	@ 0x90
 800538c:	589b      	ldr	r3, [r3, r2]
 800538e:	2202      	movs	r2, #2
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2190      	movs	r1, #144	@ 0x90
 8005396:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2290      	movs	r2, #144	@ 0x90
 800539c:	589b      	ldr	r3, [r3, r2]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7fe fd93 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2290      	movs	r2, #144	@ 0x90
 80053ae:	2100      	movs	r1, #0
 80053b0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	225e      	movs	r2, #94	@ 0x5e
 80053b6:	5a9b      	ldrh	r3, [r3, r2]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d000      	beq.n	80053c0 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80053be:	e098      	b.n	80054f2 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80053c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053ca:	2301      	movs	r3, #1
 80053cc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			@ (mov r8, r8)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4974      	ldr	r1, [pc, #464]	@ (80055b4 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f2:	f3ef 8310 	mrs	r3, PRIMASK
 80053f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80053f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053fc:	2301      	movs	r3, #1
 80053fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005402:	f383 8810 	msr	PRIMASK, r3
}
 8005406:	46c0      	nop			@ (mov r8, r8)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4969      	ldr	r1, [pc, #420]	@ (80055b8 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005414:	400a      	ands	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800541a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800541e:	f383 8810 	msr	PRIMASK, r3
}
 8005422:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	228c      	movs	r2, #140	@ 0x8c
 8005428:	2120      	movs	r1, #32
 800542a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5f      	ldr	r2, [pc, #380]	@ (80055bc <UART_RxISR_16BIT_FIFOEN+0x348>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01f      	beq.n	8005482 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	2380      	movs	r3, #128	@ 0x80
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	4013      	ands	r3, r2
 800544e:	d018      	beq.n	8005482 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005450:	f3ef 8310 	mrs	r3, PRIMASK
 8005454:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005458:	667b      	str	r3, [r7, #100]	@ 0x64
 800545a:	2301      	movs	r3, #1
 800545c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005460:	f383 8810 	msr	PRIMASK, r3
}
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4953      	ldr	r1, [pc, #332]	@ (80055c0 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005472:	400a      	ands	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005478:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d12f      	bne.n	80054ea <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005490:	f3ef 8310 	mrs	r3, PRIMASK
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005498:	663b      	str	r3, [r7, #96]	@ 0x60
 800549a:	2301      	movs	r3, #1
 800549c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	f383 8810 	msr	PRIMASK, r3
}
 80054a4:	46c0      	nop			@ (mov r8, r8)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2110      	movs	r1, #16
 80054b2:	438a      	bics	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054bc:	f383 8810 	msr	PRIMASK, r3
}
 80054c0:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	2210      	movs	r2, #16
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d103      	bne.n	80054d8 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2210      	movs	r2, #16
 80054d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	225c      	movs	r2, #92	@ 0x5c
 80054dc:	5a9a      	ldrh	r2, [r3, r2]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	0011      	movs	r1, r2
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7fe fcfc 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
 80054e8:	e003      	b.n	80054f2 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7fb fbd3 	bl	8000c98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054f2:	2376      	movs	r3, #118	@ 0x76
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d006      	beq.n	800550a <UART_RxISR_16BIT_FIFOEN+0x296>
 80054fc:	2384      	movs	r3, #132	@ 0x84
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2220      	movs	r2, #32
 8005504:	4013      	ands	r3, r2
 8005506:	d000      	beq.n	800550a <UART_RxISR_16BIT_FIFOEN+0x296>
 8005508:	e6d9      	b.n	80052be <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800550a:	205e      	movs	r0, #94	@ 0x5e
 800550c:	183b      	adds	r3, r7, r0
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	215e      	movs	r1, #94	@ 0x5e
 8005512:	5a52      	ldrh	r2, [r2, r1]
 8005514:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005516:	0001      	movs	r1, r0
 8005518:	187b      	adds	r3, r7, r1
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d044      	beq.n	80055aa <UART_RxISR_16BIT_FIFOEN+0x336>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2268      	movs	r2, #104	@ 0x68
 8005524:	5a9b      	ldrh	r3, [r3, r2]
 8005526:	187a      	adds	r2, r7, r1
 8005528:	8812      	ldrh	r2, [r2, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d23d      	bcs.n	80055aa <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552e:	f3ef 8310 	mrs	r3, PRIMASK
 8005532:	60fb      	str	r3, [r7, #12]
  return(result);
 8005534:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005536:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005538:	2301      	movs	r3, #1
 800553a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f383 8810 	msr	PRIMASK, r3
}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	491d      	ldr	r1, [pc, #116]	@ (80055c4 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005550:	400a      	ands	r2, r1
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f383 8810 	msr	PRIMASK, r3
}
 800555e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a19      	ldr	r2, [pc, #100]	@ (80055c8 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005564:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005566:	f3ef 8310 	mrs	r3, PRIMASK
 800556a:	61bb      	str	r3, [r7, #24]
  return(result);
 800556c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800556e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005570:	2301      	movs	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f383 8810 	msr	PRIMASK, r3
}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2120      	movs	r1, #32
 8005588:	430a      	orrs	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800558e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005598:	e007      	b.n	80055aa <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2108      	movs	r1, #8
 80055a6:	430a      	orrs	r2, r1
 80055a8:	619a      	str	r2, [r3, #24]
}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b022      	add	sp, #136	@ 0x88
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	fffffeff 	.word	0xfffffeff
 80055b8:	effffffe 	.word	0xeffffffe
 80055bc:	40008000 	.word	0x40008000
 80055c0:	fbffffff 	.word	0xfbffffff
 80055c4:	efffffff 	.word	0xefffffff
 80055c8:	08004d71 	.word	0x08004d71

080055cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055d4:	46c0      	nop			@ (mov r8, r8)
 80055d6:	46bd      	mov	sp, r7
 80055d8:	b002      	add	sp, #8
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055e4:	46c0      	nop			@ (mov r8, r8)
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b002      	add	sp, #8
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055f4:	46c0      	nop			@ (mov r8, r8)
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b002      	add	sp, #8
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2284      	movs	r2, #132	@ 0x84
 8005608:	5c9b      	ldrb	r3, [r3, r2]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UARTEx_DisableFifoMode+0x16>
 800560e:	2302      	movs	r3, #2
 8005610:	e027      	b.n	8005662 <HAL_UARTEx_DisableFifoMode+0x66>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2284      	movs	r2, #132	@ 0x84
 8005616:	2101      	movs	r1, #1
 8005618:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2288      	movs	r2, #136	@ 0x88
 800561e:	2124      	movs	r1, #36	@ 0x24
 8005620:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2101      	movs	r1, #1
 8005636:	438a      	bics	r2, r1
 8005638:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4a0b      	ldr	r2, [pc, #44]	@ (800566c <HAL_UARTEx_DisableFifoMode+0x70>)
 800563e:	4013      	ands	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2288      	movs	r2, #136	@ 0x88
 8005654:	2120      	movs	r1, #32
 8005656:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2284      	movs	r2, #132	@ 0x84
 800565c:	2100      	movs	r1, #0
 800565e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b004      	add	sp, #16
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	dfffffff 	.word	0xdfffffff

08005670 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2284      	movs	r2, #132	@ 0x84
 800567e:	5c9b      	ldrb	r3, [r3, r2]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e02e      	b.n	80056e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2284      	movs	r2, #132	@ 0x84
 800568c:	2101      	movs	r1, #1
 800568e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2288      	movs	r2, #136	@ 0x88
 8005694:	2124      	movs	r1, #36	@ 0x24
 8005696:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2101      	movs	r1, #1
 80056ac:	438a      	bics	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	08d9      	lsrs	r1, r3, #3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 f854 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2288      	movs	r2, #136	@ 0x88
 80056d8:	2120      	movs	r1, #32
 80056da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2284      	movs	r2, #132	@ 0x84
 80056e0:	2100      	movs	r1, #0
 80056e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b004      	add	sp, #16
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2284      	movs	r2, #132	@ 0x84
 80056fe:	5c9b      	ldrb	r3, [r3, r2]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005704:	2302      	movs	r3, #2
 8005706:	e02f      	b.n	8005768 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2284      	movs	r2, #132	@ 0x84
 800570c:	2101      	movs	r1, #1
 800570e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2288      	movs	r2, #136	@ 0x88
 8005714:	2124      	movs	r1, #36	@ 0x24
 8005716:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2101      	movs	r1, #1
 800572c:	438a      	bics	r2, r1
 800572e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	4a0e      	ldr	r2, [pc, #56]	@ (8005770 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005738:	4013      	ands	r3, r2
 800573a:	0019      	movs	r1, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	0018      	movs	r0, r3
 800574a:	f000 f813 	bl	8005774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2288      	movs	r2, #136	@ 0x88
 800575a:	2120      	movs	r1, #32
 800575c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2284      	movs	r2, #132	@ 0x84
 8005762:	2100      	movs	r1, #0
 8005764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	0018      	movs	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	b004      	add	sp, #16
 800576e:	bd80      	pop	{r7, pc}
 8005770:	f1ffffff 	.word	0xf1ffffff

08005774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005780:	2b00      	cmp	r3, #0
 8005782:	d108      	bne.n	8005796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	226a      	movs	r2, #106	@ 0x6a
 8005788:	2101      	movs	r1, #1
 800578a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2268      	movs	r2, #104	@ 0x68
 8005790:	2101      	movs	r1, #1
 8005792:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005794:	e043      	b.n	800581e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005796:	260f      	movs	r6, #15
 8005798:	19bb      	adds	r3, r7, r6
 800579a:	2208      	movs	r2, #8
 800579c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800579e:	200e      	movs	r0, #14
 80057a0:	183b      	adds	r3, r7, r0
 80057a2:	2208      	movs	r2, #8
 80057a4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	0e5b      	lsrs	r3, r3, #25
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	240d      	movs	r4, #13
 80057b2:	193b      	adds	r3, r7, r4
 80057b4:	2107      	movs	r1, #7
 80057b6:	400a      	ands	r2, r1
 80057b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	0f5b      	lsrs	r3, r3, #29
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	250c      	movs	r5, #12
 80057c6:	197b      	adds	r3, r7, r5
 80057c8:	2107      	movs	r1, #7
 80057ca:	400a      	ands	r2, r1
 80057cc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ce:	183b      	adds	r3, r7, r0
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	197a      	adds	r2, r7, r5
 80057d4:	7812      	ldrb	r2, [r2, #0]
 80057d6:	4914      	ldr	r1, [pc, #80]	@ (8005828 <UARTEx_SetNbDataToProcess+0xb4>)
 80057d8:	5c8a      	ldrb	r2, [r1, r2]
 80057da:	435a      	muls	r2, r3
 80057dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80057de:	197b      	adds	r3, r7, r5
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	4a12      	ldr	r2, [pc, #72]	@ (800582c <UARTEx_SetNbDataToProcess+0xb8>)
 80057e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057e6:	0019      	movs	r1, r3
 80057e8:	f7fa fd28 	bl	800023c <__divsi3>
 80057ec:	0003      	movs	r3, r0
 80057ee:	b299      	uxth	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	226a      	movs	r2, #106	@ 0x6a
 80057f4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f6:	19bb      	adds	r3, r7, r6
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	193a      	adds	r2, r7, r4
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	490a      	ldr	r1, [pc, #40]	@ (8005828 <UARTEx_SetNbDataToProcess+0xb4>)
 8005800:	5c8a      	ldrb	r2, [r1, r2]
 8005802:	435a      	muls	r2, r3
 8005804:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005806:	193b      	adds	r3, r7, r4
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	4a08      	ldr	r2, [pc, #32]	@ (800582c <UARTEx_SetNbDataToProcess+0xb8>)
 800580c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800580e:	0019      	movs	r1, r3
 8005810:	f7fa fd14 	bl	800023c <__divsi3>
 8005814:	0003      	movs	r3, r0
 8005816:	b299      	uxth	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2268      	movs	r2, #104	@ 0x68
 800581c:	5299      	strh	r1, [r3, r2]
}
 800581e:	46c0      	nop			@ (mov r8, r8)
 8005820:	46bd      	mov	sp, r7
 8005822:	b005      	add	sp, #20
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	08006460 	.word	0x08006460
 800582c:	08006468 	.word	0x08006468

08005830 <atoi>:
 8005830:	b510      	push	{r4, lr}
 8005832:	220a      	movs	r2, #10
 8005834:	2100      	movs	r1, #0
 8005836:	f000 f88b 	bl	8005950 <strtol>
 800583a:	bd10      	pop	{r4, pc}

0800583c <_strtol_l.isra.0>:
 800583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583e:	b085      	sub	sp, #20
 8005840:	0017      	movs	r7, r2
 8005842:	001e      	movs	r6, r3
 8005844:	9003      	str	r0, [sp, #12]
 8005846:	9101      	str	r1, [sp, #4]
 8005848:	2b24      	cmp	r3, #36	@ 0x24
 800584a:	d823      	bhi.n	8005894 <_strtol_l.isra.0+0x58>
 800584c:	000c      	movs	r4, r1
 800584e:	2b01      	cmp	r3, #1
 8005850:	d020      	beq.n	8005894 <_strtol_l.isra.0+0x58>
 8005852:	4b3d      	ldr	r3, [pc, #244]	@ (8005948 <_strtol_l.isra.0+0x10c>)
 8005854:	2208      	movs	r2, #8
 8005856:	469c      	mov	ip, r3
 8005858:	0023      	movs	r3, r4
 800585a:	4661      	mov	r1, ip
 800585c:	781d      	ldrb	r5, [r3, #0]
 800585e:	3401      	adds	r4, #1
 8005860:	5d48      	ldrb	r0, [r1, r5]
 8005862:	0001      	movs	r1, r0
 8005864:	4011      	ands	r1, r2
 8005866:	4210      	tst	r0, r2
 8005868:	d1f6      	bne.n	8005858 <_strtol_l.isra.0+0x1c>
 800586a:	2d2d      	cmp	r5, #45	@ 0x2d
 800586c:	d119      	bne.n	80058a2 <_strtol_l.isra.0+0x66>
 800586e:	7825      	ldrb	r5, [r4, #0]
 8005870:	1c9c      	adds	r4, r3, #2
 8005872:	2301      	movs	r3, #1
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	2210      	movs	r2, #16
 8005878:	0033      	movs	r3, r6
 800587a:	4393      	bics	r3, r2
 800587c:	d11d      	bne.n	80058ba <_strtol_l.isra.0+0x7e>
 800587e:	2d30      	cmp	r5, #48	@ 0x30
 8005880:	d115      	bne.n	80058ae <_strtol_l.isra.0+0x72>
 8005882:	2120      	movs	r1, #32
 8005884:	7823      	ldrb	r3, [r4, #0]
 8005886:	438b      	bics	r3, r1
 8005888:	2b58      	cmp	r3, #88	@ 0x58
 800588a:	d110      	bne.n	80058ae <_strtol_l.isra.0+0x72>
 800588c:	7865      	ldrb	r5, [r4, #1]
 800588e:	3402      	adds	r4, #2
 8005890:	2610      	movs	r6, #16
 8005892:	e012      	b.n	80058ba <_strtol_l.isra.0+0x7e>
 8005894:	f000 f892 	bl	80059bc <__errno>
 8005898:	2316      	movs	r3, #22
 800589a:	6003      	str	r3, [r0, #0]
 800589c:	2000      	movs	r0, #0
 800589e:	b005      	add	sp, #20
 80058a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a2:	9100      	str	r1, [sp, #0]
 80058a4:	2d2b      	cmp	r5, #43	@ 0x2b
 80058a6:	d1e6      	bne.n	8005876 <_strtol_l.isra.0+0x3a>
 80058a8:	7825      	ldrb	r5, [r4, #0]
 80058aa:	1c9c      	adds	r4, r3, #2
 80058ac:	e7e3      	b.n	8005876 <_strtol_l.isra.0+0x3a>
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	d1ee      	bne.n	8005890 <_strtol_l.isra.0+0x54>
 80058b2:	360a      	adds	r6, #10
 80058b4:	2d30      	cmp	r5, #48	@ 0x30
 80058b6:	d100      	bne.n	80058ba <_strtol_l.isra.0+0x7e>
 80058b8:	3e02      	subs	r6, #2
 80058ba:	4a24      	ldr	r2, [pc, #144]	@ (800594c <_strtol_l.isra.0+0x110>)
 80058bc:	9b00      	ldr	r3, [sp, #0]
 80058be:	4694      	mov	ip, r2
 80058c0:	4463      	add	r3, ip
 80058c2:	0031      	movs	r1, r6
 80058c4:	0018      	movs	r0, r3
 80058c6:	9302      	str	r3, [sp, #8]
 80058c8:	f7fa fcb4 	bl	8000234 <__aeabi_uidivmod>
 80058cc:	2200      	movs	r2, #0
 80058ce:	4684      	mov	ip, r0
 80058d0:	0010      	movs	r0, r2
 80058d2:	002b      	movs	r3, r5
 80058d4:	3b30      	subs	r3, #48	@ 0x30
 80058d6:	2b09      	cmp	r3, #9
 80058d8:	d811      	bhi.n	80058fe <_strtol_l.isra.0+0xc2>
 80058da:	001d      	movs	r5, r3
 80058dc:	42ae      	cmp	r6, r5
 80058de:	dd1d      	ble.n	800591c <_strtol_l.isra.0+0xe0>
 80058e0:	1c53      	adds	r3, r2, #1
 80058e2:	d009      	beq.n	80058f8 <_strtol_l.isra.0+0xbc>
 80058e4:	2201      	movs	r2, #1
 80058e6:	4252      	negs	r2, r2
 80058e8:	4584      	cmp	ip, r0
 80058ea:	d305      	bcc.n	80058f8 <_strtol_l.isra.0+0xbc>
 80058ec:	d101      	bne.n	80058f2 <_strtol_l.isra.0+0xb6>
 80058ee:	42a9      	cmp	r1, r5
 80058f0:	db11      	blt.n	8005916 <_strtol_l.isra.0+0xda>
 80058f2:	2201      	movs	r2, #1
 80058f4:	4370      	muls	r0, r6
 80058f6:	1828      	adds	r0, r5, r0
 80058f8:	7825      	ldrb	r5, [r4, #0]
 80058fa:	3401      	adds	r4, #1
 80058fc:	e7e9      	b.n	80058d2 <_strtol_l.isra.0+0x96>
 80058fe:	002b      	movs	r3, r5
 8005900:	3b41      	subs	r3, #65	@ 0x41
 8005902:	2b19      	cmp	r3, #25
 8005904:	d801      	bhi.n	800590a <_strtol_l.isra.0+0xce>
 8005906:	3d37      	subs	r5, #55	@ 0x37
 8005908:	e7e8      	b.n	80058dc <_strtol_l.isra.0+0xa0>
 800590a:	002b      	movs	r3, r5
 800590c:	3b61      	subs	r3, #97	@ 0x61
 800590e:	2b19      	cmp	r3, #25
 8005910:	d804      	bhi.n	800591c <_strtol_l.isra.0+0xe0>
 8005912:	3d57      	subs	r5, #87	@ 0x57
 8005914:	e7e2      	b.n	80058dc <_strtol_l.isra.0+0xa0>
 8005916:	2201      	movs	r2, #1
 8005918:	4252      	negs	r2, r2
 800591a:	e7ed      	b.n	80058f8 <_strtol_l.isra.0+0xbc>
 800591c:	1c53      	adds	r3, r2, #1
 800591e:	d108      	bne.n	8005932 <_strtol_l.isra.0+0xf6>
 8005920:	2322      	movs	r3, #34	@ 0x22
 8005922:	9a03      	ldr	r2, [sp, #12]
 8005924:	9802      	ldr	r0, [sp, #8]
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	2f00      	cmp	r7, #0
 800592a:	d0b8      	beq.n	800589e <_strtol_l.isra.0+0x62>
 800592c:	1e63      	subs	r3, r4, #1
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	e007      	b.n	8005942 <_strtol_l.isra.0+0x106>
 8005932:	9b00      	ldr	r3, [sp, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d000      	beq.n	800593a <_strtol_l.isra.0+0xfe>
 8005938:	4240      	negs	r0, r0
 800593a:	2f00      	cmp	r7, #0
 800593c:	d0af      	beq.n	800589e <_strtol_l.isra.0+0x62>
 800593e:	2a00      	cmp	r2, #0
 8005940:	d1f4      	bne.n	800592c <_strtol_l.isra.0+0xf0>
 8005942:	9b01      	ldr	r3, [sp, #4]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	e7aa      	b.n	800589e <_strtol_l.isra.0+0x62>
 8005948:	08006471 	.word	0x08006471
 800594c:	7fffffff 	.word	0x7fffffff

08005950 <strtol>:
 8005950:	b510      	push	{r4, lr}
 8005952:	4c04      	ldr	r4, [pc, #16]	@ (8005964 <strtol+0x14>)
 8005954:	0013      	movs	r3, r2
 8005956:	000a      	movs	r2, r1
 8005958:	0001      	movs	r1, r0
 800595a:	6820      	ldr	r0, [r4, #0]
 800595c:	f7ff ff6e 	bl	800583c <_strtol_l.isra.0>
 8005960:	bd10      	pop	{r4, pc}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	20000010 	.word	0x20000010

08005968 <siprintf>:
 8005968:	b40e      	push	{r1, r2, r3}
 800596a:	b510      	push	{r4, lr}
 800596c:	2400      	movs	r4, #0
 800596e:	490c      	ldr	r1, [pc, #48]	@ (80059a0 <siprintf+0x38>)
 8005970:	b09d      	sub	sp, #116	@ 0x74
 8005972:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005974:	9002      	str	r0, [sp, #8]
 8005976:	9006      	str	r0, [sp, #24]
 8005978:	9107      	str	r1, [sp, #28]
 800597a:	9104      	str	r1, [sp, #16]
 800597c:	4809      	ldr	r0, [pc, #36]	@ (80059a4 <siprintf+0x3c>)
 800597e:	490a      	ldr	r1, [pc, #40]	@ (80059a8 <siprintf+0x40>)
 8005980:	cb04      	ldmia	r3!, {r2}
 8005982:	9105      	str	r1, [sp, #20]
 8005984:	6800      	ldr	r0, [r0, #0]
 8005986:	a902      	add	r1, sp, #8
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800598c:	f000 f99e 	bl	8005ccc <_svfiprintf_r>
 8005990:	9b02      	ldr	r3, [sp, #8]
 8005992:	701c      	strb	r4, [r3, #0]
 8005994:	b01d      	add	sp, #116	@ 0x74
 8005996:	bc10      	pop	{r4}
 8005998:	bc08      	pop	{r3}
 800599a:	b003      	add	sp, #12
 800599c:	4718      	bx	r3
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	7fffffff 	.word	0x7fffffff
 80059a4:	20000010 	.word	0x20000010
 80059a8:	ffff0208 	.word	0xffff0208

080059ac <memset>:
 80059ac:	0003      	movs	r3, r0
 80059ae:	1882      	adds	r2, r0, r2
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d100      	bne.n	80059b6 <memset+0xa>
 80059b4:	4770      	bx	lr
 80059b6:	7019      	strb	r1, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	e7f9      	b.n	80059b0 <memset+0x4>

080059bc <__errno>:
 80059bc:	4b01      	ldr	r3, [pc, #4]	@ (80059c4 <__errno+0x8>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	4770      	bx	lr
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	20000010 	.word	0x20000010

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	2600      	movs	r6, #0
 80059cc:	4c0c      	ldr	r4, [pc, #48]	@ (8005a00 <__libc_init_array+0x38>)
 80059ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005a04 <__libc_init_array+0x3c>)
 80059d0:	1b64      	subs	r4, r4, r5
 80059d2:	10a4      	asrs	r4, r4, #2
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	d109      	bne.n	80059ec <__libc_init_array+0x24>
 80059d8:	2600      	movs	r6, #0
 80059da:	f000 fc61 	bl	80062a0 <_init>
 80059de:	4c0a      	ldr	r4, [pc, #40]	@ (8005a08 <__libc_init_array+0x40>)
 80059e0:	4d0a      	ldr	r5, [pc, #40]	@ (8005a0c <__libc_init_array+0x44>)
 80059e2:	1b64      	subs	r4, r4, r5
 80059e4:	10a4      	asrs	r4, r4, #2
 80059e6:	42a6      	cmp	r6, r4
 80059e8:	d105      	bne.n	80059f6 <__libc_init_array+0x2e>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	00b3      	lsls	r3, r6, #2
 80059ee:	58eb      	ldr	r3, [r5, r3]
 80059f0:	4798      	blx	r3
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7ee      	b.n	80059d4 <__libc_init_array+0xc>
 80059f6:	00b3      	lsls	r3, r6, #2
 80059f8:	58eb      	ldr	r3, [r5, r3]
 80059fa:	4798      	blx	r3
 80059fc:	3601      	adds	r6, #1
 80059fe:	e7f2      	b.n	80059e6 <__libc_init_array+0x1e>
 8005a00:	080065ac 	.word	0x080065ac
 8005a04:	080065ac 	.word	0x080065ac
 8005a08:	080065b0 	.word	0x080065b0
 8005a0c:	080065ac 	.word	0x080065ac

08005a10 <__retarget_lock_acquire_recursive>:
 8005a10:	4770      	bx	lr

08005a12 <__retarget_lock_release_recursive>:
 8005a12:	4770      	bx	lr

08005a14 <_free_r>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	0005      	movs	r5, r0
 8005a18:	1e0c      	subs	r4, r1, #0
 8005a1a:	d010      	beq.n	8005a3e <_free_r+0x2a>
 8005a1c:	3c04      	subs	r4, #4
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	da00      	bge.n	8005a26 <_free_r+0x12>
 8005a24:	18e4      	adds	r4, r4, r3
 8005a26:	0028      	movs	r0, r5
 8005a28:	f000 f8e0 	bl	8005bec <__malloc_lock>
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa4 <_free_r+0x90>)
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <_free_r+0x2c>
 8005a34:	6063      	str	r3, [r4, #4]
 8005a36:	6014      	str	r4, [r2, #0]
 8005a38:	0028      	movs	r0, r5
 8005a3a:	f000 f8df 	bl	8005bfc <__malloc_unlock>
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d908      	bls.n	8005a56 <_free_r+0x42>
 8005a44:	6820      	ldr	r0, [r4, #0]
 8005a46:	1821      	adds	r1, r4, r0
 8005a48:	428b      	cmp	r3, r1
 8005a4a:	d1f3      	bne.n	8005a34 <_free_r+0x20>
 8005a4c:	6819      	ldr	r1, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	1809      	adds	r1, r1, r0
 8005a52:	6021      	str	r1, [r4, #0]
 8005a54:	e7ee      	b.n	8005a34 <_free_r+0x20>
 8005a56:	001a      	movs	r2, r3
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <_free_r+0x4e>
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	d9f9      	bls.n	8005a56 <_free_r+0x42>
 8005a62:	6811      	ldr	r1, [r2, #0]
 8005a64:	1850      	adds	r0, r2, r1
 8005a66:	42a0      	cmp	r0, r4
 8005a68:	d10b      	bne.n	8005a82 <_free_r+0x6e>
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	1809      	adds	r1, r1, r0
 8005a6e:	1850      	adds	r0, r2, r1
 8005a70:	6011      	str	r1, [r2, #0]
 8005a72:	4283      	cmp	r3, r0
 8005a74:	d1e0      	bne.n	8005a38 <_free_r+0x24>
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	1841      	adds	r1, r0, r1
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	6053      	str	r3, [r2, #4]
 8005a80:	e7da      	b.n	8005a38 <_free_r+0x24>
 8005a82:	42a0      	cmp	r0, r4
 8005a84:	d902      	bls.n	8005a8c <_free_r+0x78>
 8005a86:	230c      	movs	r3, #12
 8005a88:	602b      	str	r3, [r5, #0]
 8005a8a:	e7d5      	b.n	8005a38 <_free_r+0x24>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	1821      	adds	r1, r4, r0
 8005a90:	428b      	cmp	r3, r1
 8005a92:	d103      	bne.n	8005a9c <_free_r+0x88>
 8005a94:	6819      	ldr	r1, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	1809      	adds	r1, r1, r0
 8005a9a:	6021      	str	r1, [r4, #0]
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	6054      	str	r4, [r2, #4]
 8005aa0:	e7ca      	b.n	8005a38 <_free_r+0x24>
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	20000354 	.word	0x20000354

08005aa8 <sbrk_aligned>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8005ae8 <sbrk_aligned+0x40>)
 8005aac:	000d      	movs	r5, r1
 8005aae:	6831      	ldr	r1, [r6, #0]
 8005ab0:	0004      	movs	r4, r0
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	d102      	bne.n	8005abc <sbrk_aligned+0x14>
 8005ab6:	f000 fb95 	bl	80061e4 <_sbrk_r>
 8005aba:	6030      	str	r0, [r6, #0]
 8005abc:	0029      	movs	r1, r5
 8005abe:	0020      	movs	r0, r4
 8005ac0:	f000 fb90 	bl	80061e4 <_sbrk_r>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d103      	bne.n	8005ad0 <sbrk_aligned+0x28>
 8005ac8:	2501      	movs	r5, #1
 8005aca:	426d      	negs	r5, r5
 8005acc:	0028      	movs	r0, r5
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	1cc5      	adds	r5, r0, #3
 8005ad4:	439d      	bics	r5, r3
 8005ad6:	42a8      	cmp	r0, r5
 8005ad8:	d0f8      	beq.n	8005acc <sbrk_aligned+0x24>
 8005ada:	1a29      	subs	r1, r5, r0
 8005adc:	0020      	movs	r0, r4
 8005ade:	f000 fb81 	bl	80061e4 <_sbrk_r>
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d1f2      	bne.n	8005acc <sbrk_aligned+0x24>
 8005ae6:	e7ef      	b.n	8005ac8 <sbrk_aligned+0x20>
 8005ae8:	20000350 	.word	0x20000350

08005aec <_malloc_r>:
 8005aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aee:	2203      	movs	r2, #3
 8005af0:	1ccb      	adds	r3, r1, #3
 8005af2:	4393      	bics	r3, r2
 8005af4:	3308      	adds	r3, #8
 8005af6:	0005      	movs	r5, r0
 8005af8:	001f      	movs	r7, r3
 8005afa:	2b0c      	cmp	r3, #12
 8005afc:	d234      	bcs.n	8005b68 <_malloc_r+0x7c>
 8005afe:	270c      	movs	r7, #12
 8005b00:	42b9      	cmp	r1, r7
 8005b02:	d833      	bhi.n	8005b6c <_malloc_r+0x80>
 8005b04:	0028      	movs	r0, r5
 8005b06:	f000 f871 	bl	8005bec <__malloc_lock>
 8005b0a:	4e37      	ldr	r6, [pc, #220]	@ (8005be8 <_malloc_r+0xfc>)
 8005b0c:	6833      	ldr	r3, [r6, #0]
 8005b0e:	001c      	movs	r4, r3
 8005b10:	2c00      	cmp	r4, #0
 8005b12:	d12f      	bne.n	8005b74 <_malloc_r+0x88>
 8005b14:	0039      	movs	r1, r7
 8005b16:	0028      	movs	r0, r5
 8005b18:	f7ff ffc6 	bl	8005aa8 <sbrk_aligned>
 8005b1c:	0004      	movs	r4, r0
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d15f      	bne.n	8005be2 <_malloc_r+0xf6>
 8005b22:	6834      	ldr	r4, [r6, #0]
 8005b24:	9400      	str	r4, [sp, #0]
 8005b26:	9b00      	ldr	r3, [sp, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d14a      	bne.n	8005bc2 <_malloc_r+0xd6>
 8005b2c:	2c00      	cmp	r4, #0
 8005b2e:	d052      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	0028      	movs	r0, r5
 8005b34:	18e3      	adds	r3, r4, r3
 8005b36:	9900      	ldr	r1, [sp, #0]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	f000 fb53 	bl	80061e4 <_sbrk_r>
 8005b3e:	9b01      	ldr	r3, [sp, #4]
 8005b40:	4283      	cmp	r3, r0
 8005b42:	d148      	bne.n	8005bd6 <_malloc_r+0xea>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	0028      	movs	r0, r5
 8005b48:	1aff      	subs	r7, r7, r3
 8005b4a:	0039      	movs	r1, r7
 8005b4c:	f7ff ffac 	bl	8005aa8 <sbrk_aligned>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d040      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	19db      	adds	r3, r3, r7
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	6833      	ldr	r3, [r6, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	d133      	bne.n	8005bca <_malloc_r+0xde>
 8005b62:	9b00      	ldr	r3, [sp, #0]
 8005b64:	6033      	str	r3, [r6, #0]
 8005b66:	e019      	b.n	8005b9c <_malloc_r+0xb0>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dac9      	bge.n	8005b00 <_malloc_r+0x14>
 8005b6c:	230c      	movs	r3, #12
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	2000      	movs	r0, #0
 8005b72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	1bc9      	subs	r1, r1, r7
 8005b78:	d420      	bmi.n	8005bbc <_malloc_r+0xd0>
 8005b7a:	290b      	cmp	r1, #11
 8005b7c:	d90a      	bls.n	8005b94 <_malloc_r+0xa8>
 8005b7e:	19e2      	adds	r2, r4, r7
 8005b80:	6027      	str	r7, [r4, #0]
 8005b82:	42a3      	cmp	r3, r4
 8005b84:	d104      	bne.n	8005b90 <_malloc_r+0xa4>
 8005b86:	6032      	str	r2, [r6, #0]
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	6011      	str	r1, [r2, #0]
 8005b8c:	6053      	str	r3, [r2, #4]
 8005b8e:	e005      	b.n	8005b9c <_malloc_r+0xb0>
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e7f9      	b.n	8005b88 <_malloc_r+0x9c>
 8005b94:	6862      	ldr	r2, [r4, #4]
 8005b96:	42a3      	cmp	r3, r4
 8005b98:	d10e      	bne.n	8005bb8 <_malloc_r+0xcc>
 8005b9a:	6032      	str	r2, [r6, #0]
 8005b9c:	0028      	movs	r0, r5
 8005b9e:	f000 f82d 	bl	8005bfc <__malloc_unlock>
 8005ba2:	0020      	movs	r0, r4
 8005ba4:	2207      	movs	r2, #7
 8005ba6:	300b      	adds	r0, #11
 8005ba8:	1d23      	adds	r3, r4, #4
 8005baa:	4390      	bics	r0, r2
 8005bac:	1ac2      	subs	r2, r0, r3
 8005bae:	4298      	cmp	r0, r3
 8005bb0:	d0df      	beq.n	8005b72 <_malloc_r+0x86>
 8005bb2:	1a1b      	subs	r3, r3, r0
 8005bb4:	50a3      	str	r3, [r4, r2]
 8005bb6:	e7dc      	b.n	8005b72 <_malloc_r+0x86>
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	e7ef      	b.n	8005b9c <_malloc_r+0xb0>
 8005bbc:	0023      	movs	r3, r4
 8005bbe:	6864      	ldr	r4, [r4, #4]
 8005bc0:	e7a6      	b.n	8005b10 <_malloc_r+0x24>
 8005bc2:	9c00      	ldr	r4, [sp, #0]
 8005bc4:	6863      	ldr	r3, [r4, #4]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	e7ad      	b.n	8005b26 <_malloc_r+0x3a>
 8005bca:	001a      	movs	r2, r3
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	d1fb      	bne.n	8005bca <_malloc_r+0xde>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e7da      	b.n	8005b8c <_malloc_r+0xa0>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	0028      	movs	r0, r5
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	f000 f80e 	bl	8005bfc <__malloc_unlock>
 8005be0:	e7c6      	b.n	8005b70 <_malloc_r+0x84>
 8005be2:	6007      	str	r7, [r0, #0]
 8005be4:	e7da      	b.n	8005b9c <_malloc_r+0xb0>
 8005be6:	46c0      	nop			@ (mov r8, r8)
 8005be8:	20000354 	.word	0x20000354

08005bec <__malloc_lock>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	4802      	ldr	r0, [pc, #8]	@ (8005bf8 <__malloc_lock+0xc>)
 8005bf0:	f7ff ff0e 	bl	8005a10 <__retarget_lock_acquire_recursive>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	2000034c 	.word	0x2000034c

08005bfc <__malloc_unlock>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4802      	ldr	r0, [pc, #8]	@ (8005c08 <__malloc_unlock+0xc>)
 8005c00:	f7ff ff07 	bl	8005a12 <__retarget_lock_release_recursive>
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	2000034c 	.word	0x2000034c

08005c0c <__ssputs_r>:
 8005c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0e:	688e      	ldr	r6, [r1, #8]
 8005c10:	b085      	sub	sp, #20
 8005c12:	001f      	movs	r7, r3
 8005c14:	000c      	movs	r4, r1
 8005c16:	680b      	ldr	r3, [r1, #0]
 8005c18:	9002      	str	r0, [sp, #8]
 8005c1a:	9203      	str	r2, [sp, #12]
 8005c1c:	42be      	cmp	r6, r7
 8005c1e:	d830      	bhi.n	8005c82 <__ssputs_r+0x76>
 8005c20:	210c      	movs	r1, #12
 8005c22:	5e62      	ldrsh	r2, [r4, r1]
 8005c24:	2190      	movs	r1, #144	@ 0x90
 8005c26:	00c9      	lsls	r1, r1, #3
 8005c28:	420a      	tst	r2, r1
 8005c2a:	d028      	beq.n	8005c7e <__ssputs_r+0x72>
 8005c2c:	2003      	movs	r0, #3
 8005c2e:	6921      	ldr	r1, [r4, #16]
 8005c30:	1a5b      	subs	r3, r3, r1
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	6963      	ldr	r3, [r4, #20]
 8005c36:	4343      	muls	r3, r0
 8005c38:	9801      	ldr	r0, [sp, #4]
 8005c3a:	0fdd      	lsrs	r5, r3, #31
 8005c3c:	18ed      	adds	r5, r5, r3
 8005c3e:	1c7b      	adds	r3, r7, #1
 8005c40:	181b      	adds	r3, r3, r0
 8005c42:	106d      	asrs	r5, r5, #1
 8005c44:	42ab      	cmp	r3, r5
 8005c46:	d900      	bls.n	8005c4a <__ssputs_r+0x3e>
 8005c48:	001d      	movs	r5, r3
 8005c4a:	0552      	lsls	r2, r2, #21
 8005c4c:	d528      	bpl.n	8005ca0 <__ssputs_r+0x94>
 8005c4e:	0029      	movs	r1, r5
 8005c50:	9802      	ldr	r0, [sp, #8]
 8005c52:	f7ff ff4b 	bl	8005aec <_malloc_r>
 8005c56:	1e06      	subs	r6, r0, #0
 8005c58:	d02c      	beq.n	8005cb4 <__ssputs_r+0xa8>
 8005c5a:	9a01      	ldr	r2, [sp, #4]
 8005c5c:	6921      	ldr	r1, [r4, #16]
 8005c5e:	f000 fade 	bl	800621e <memcpy>
 8005c62:	89a2      	ldrh	r2, [r4, #12]
 8005c64:	4b18      	ldr	r3, [pc, #96]	@ (8005cc8 <__ssputs_r+0xbc>)
 8005c66:	401a      	ands	r2, r3
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	81a3      	strh	r3, [r4, #12]
 8005c6e:	9b01      	ldr	r3, [sp, #4]
 8005c70:	6126      	str	r6, [r4, #16]
 8005c72:	18f6      	adds	r6, r6, r3
 8005c74:	6026      	str	r6, [r4, #0]
 8005c76:	003e      	movs	r6, r7
 8005c78:	6165      	str	r5, [r4, #20]
 8005c7a:	1aed      	subs	r5, r5, r3
 8005c7c:	60a5      	str	r5, [r4, #8]
 8005c7e:	42be      	cmp	r6, r7
 8005c80:	d900      	bls.n	8005c84 <__ssputs_r+0x78>
 8005c82:	003e      	movs	r6, r7
 8005c84:	0032      	movs	r2, r6
 8005c86:	9903      	ldr	r1, [sp, #12]
 8005c88:	6820      	ldr	r0, [r4, #0]
 8005c8a:	f000 fa99 	bl	80061c0 <memmove>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	68a3      	ldr	r3, [r4, #8]
 8005c92:	1b9b      	subs	r3, r3, r6
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	199b      	adds	r3, r3, r6
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	b005      	add	sp, #20
 8005c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca0:	002a      	movs	r2, r5
 8005ca2:	9802      	ldr	r0, [sp, #8]
 8005ca4:	f000 fac4 	bl	8006230 <_realloc_r>
 8005ca8:	1e06      	subs	r6, r0, #0
 8005caa:	d1e0      	bne.n	8005c6e <__ssputs_r+0x62>
 8005cac:	6921      	ldr	r1, [r4, #16]
 8005cae:	9802      	ldr	r0, [sp, #8]
 8005cb0:	f7ff feb0 	bl	8005a14 <_free_r>
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	9a02      	ldr	r2, [sp, #8]
 8005cba:	4240      	negs	r0, r0
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	89a2      	ldrh	r2, [r4, #12]
 8005cc0:	3334      	adds	r3, #52	@ 0x34
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	e7e9      	b.n	8005c9c <__ssputs_r+0x90>
 8005cc8:	fffffb7f 	.word	0xfffffb7f

08005ccc <_svfiprintf_r>:
 8005ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cce:	b0a1      	sub	sp, #132	@ 0x84
 8005cd0:	9003      	str	r0, [sp, #12]
 8005cd2:	001d      	movs	r5, r3
 8005cd4:	898b      	ldrh	r3, [r1, #12]
 8005cd6:	000f      	movs	r7, r1
 8005cd8:	0016      	movs	r6, r2
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	d511      	bpl.n	8005d02 <_svfiprintf_r+0x36>
 8005cde:	690b      	ldr	r3, [r1, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10e      	bne.n	8005d02 <_svfiprintf_r+0x36>
 8005ce4:	2140      	movs	r1, #64	@ 0x40
 8005ce6:	f7ff ff01 	bl	8005aec <_malloc_r>
 8005cea:	6038      	str	r0, [r7, #0]
 8005cec:	6138      	str	r0, [r7, #16]
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d105      	bne.n	8005cfe <_svfiprintf_r+0x32>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	9a03      	ldr	r2, [sp, #12]
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	4240      	negs	r0, r0
 8005cfc:	e0cf      	b.n	8005e9e <_svfiprintf_r+0x1d2>
 8005cfe:	2340      	movs	r3, #64	@ 0x40
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	2300      	movs	r3, #0
 8005d04:	ac08      	add	r4, sp, #32
 8005d06:	6163      	str	r3, [r4, #20]
 8005d08:	3320      	adds	r3, #32
 8005d0a:	7663      	strb	r3, [r4, #25]
 8005d0c:	3310      	adds	r3, #16
 8005d0e:	76a3      	strb	r3, [r4, #26]
 8005d10:	9507      	str	r5, [sp, #28]
 8005d12:	0035      	movs	r5, r6
 8005d14:	782b      	ldrb	r3, [r5, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <_svfiprintf_r+0x52>
 8005d1a:	2b25      	cmp	r3, #37	@ 0x25
 8005d1c:	d148      	bne.n	8005db0 <_svfiprintf_r+0xe4>
 8005d1e:	1bab      	subs	r3, r5, r6
 8005d20:	9305      	str	r3, [sp, #20]
 8005d22:	42b5      	cmp	r5, r6
 8005d24:	d00b      	beq.n	8005d3e <_svfiprintf_r+0x72>
 8005d26:	0032      	movs	r2, r6
 8005d28:	0039      	movs	r1, r7
 8005d2a:	9803      	ldr	r0, [sp, #12]
 8005d2c:	f7ff ff6e 	bl	8005c0c <__ssputs_r>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d100      	bne.n	8005d36 <_svfiprintf_r+0x6a>
 8005d34:	e0ae      	b.n	8005e94 <_svfiprintf_r+0x1c8>
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	9a05      	ldr	r2, [sp, #20]
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	6163      	str	r3, [r4, #20]
 8005d3e:	782b      	ldrb	r3, [r5, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d100      	bne.n	8005d46 <_svfiprintf_r+0x7a>
 8005d44:	e0a6      	b.n	8005e94 <_svfiprintf_r+0x1c8>
 8005d46:	2201      	movs	r2, #1
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4252      	negs	r2, r2
 8005d4c:	6062      	str	r2, [r4, #4]
 8005d4e:	a904      	add	r1, sp, #16
 8005d50:	3254      	adds	r2, #84	@ 0x54
 8005d52:	1852      	adds	r2, r2, r1
 8005d54:	1c6e      	adds	r6, r5, #1
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	60e3      	str	r3, [r4, #12]
 8005d5a:	60a3      	str	r3, [r4, #8]
 8005d5c:	7013      	strb	r3, [r2, #0]
 8005d5e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005d60:	4b54      	ldr	r3, [pc, #336]	@ (8005eb4 <_svfiprintf_r+0x1e8>)
 8005d62:	2205      	movs	r2, #5
 8005d64:	0018      	movs	r0, r3
 8005d66:	7831      	ldrb	r1, [r6, #0]
 8005d68:	9305      	str	r3, [sp, #20]
 8005d6a:	f000 fa4d 	bl	8006208 <memchr>
 8005d6e:	1c75      	adds	r5, r6, #1
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d11f      	bne.n	8005db4 <_svfiprintf_r+0xe8>
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	06d3      	lsls	r3, r2, #27
 8005d78:	d504      	bpl.n	8005d84 <_svfiprintf_r+0xb8>
 8005d7a:	2353      	movs	r3, #83	@ 0x53
 8005d7c:	a904      	add	r1, sp, #16
 8005d7e:	185b      	adds	r3, r3, r1
 8005d80:	2120      	movs	r1, #32
 8005d82:	7019      	strb	r1, [r3, #0]
 8005d84:	0713      	lsls	r3, r2, #28
 8005d86:	d504      	bpl.n	8005d92 <_svfiprintf_r+0xc6>
 8005d88:	2353      	movs	r3, #83	@ 0x53
 8005d8a:	a904      	add	r1, sp, #16
 8005d8c:	185b      	adds	r3, r3, r1
 8005d8e:	212b      	movs	r1, #43	@ 0x2b
 8005d90:	7019      	strb	r1, [r3, #0]
 8005d92:	7833      	ldrb	r3, [r6, #0]
 8005d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d96:	d016      	beq.n	8005dc6 <_svfiprintf_r+0xfa>
 8005d98:	0035      	movs	r5, r6
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	200a      	movs	r0, #10
 8005d9e:	68e3      	ldr	r3, [r4, #12]
 8005da0:	782a      	ldrb	r2, [r5, #0]
 8005da2:	1c6e      	adds	r6, r5, #1
 8005da4:	3a30      	subs	r2, #48	@ 0x30
 8005da6:	2a09      	cmp	r2, #9
 8005da8:	d950      	bls.n	8005e4c <_svfiprintf_r+0x180>
 8005daa:	2900      	cmp	r1, #0
 8005dac:	d111      	bne.n	8005dd2 <_svfiprintf_r+0x106>
 8005dae:	e017      	b.n	8005de0 <_svfiprintf_r+0x114>
 8005db0:	3501      	adds	r5, #1
 8005db2:	e7af      	b.n	8005d14 <_svfiprintf_r+0x48>
 8005db4:	9b05      	ldr	r3, [sp, #20]
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	1ac0      	subs	r0, r0, r3
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4083      	lsls	r3, r0
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	002e      	movs	r6, r5
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	e7cc      	b.n	8005d60 <_svfiprintf_r+0x94>
 8005dc6:	9b07      	ldr	r3, [sp, #28]
 8005dc8:	1d19      	adds	r1, r3, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	9107      	str	r1, [sp, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db01      	blt.n	8005dd6 <_svfiprintf_r+0x10a>
 8005dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dd4:	e004      	b.n	8005de0 <_svfiprintf_r+0x114>
 8005dd6:	425b      	negs	r3, r3
 8005dd8:	60e3      	str	r3, [r4, #12]
 8005dda:	2302      	movs	r3, #2
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	782b      	ldrb	r3, [r5, #0]
 8005de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de4:	d10c      	bne.n	8005e00 <_svfiprintf_r+0x134>
 8005de6:	786b      	ldrb	r3, [r5, #1]
 8005de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dea:	d134      	bne.n	8005e56 <_svfiprintf_r+0x18a>
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	3502      	adds	r5, #2
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	9207      	str	r2, [sp, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da01      	bge.n	8005dfe <_svfiprintf_r+0x132>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e00:	4e2d      	ldr	r6, [pc, #180]	@ (8005eb8 <_svfiprintf_r+0x1ec>)
 8005e02:	2203      	movs	r2, #3
 8005e04:	0030      	movs	r0, r6
 8005e06:	7829      	ldrb	r1, [r5, #0]
 8005e08:	f000 f9fe 	bl	8006208 <memchr>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d006      	beq.n	8005e1e <_svfiprintf_r+0x152>
 8005e10:	2340      	movs	r3, #64	@ 0x40
 8005e12:	1b80      	subs	r0, r0, r6
 8005e14:	4083      	lsls	r3, r0
 8005e16:	6822      	ldr	r2, [r4, #0]
 8005e18:	3501      	adds	r5, #1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	7829      	ldrb	r1, [r5, #0]
 8005e20:	2206      	movs	r2, #6
 8005e22:	4826      	ldr	r0, [pc, #152]	@ (8005ebc <_svfiprintf_r+0x1f0>)
 8005e24:	1c6e      	adds	r6, r5, #1
 8005e26:	7621      	strb	r1, [r4, #24]
 8005e28:	f000 f9ee 	bl	8006208 <memchr>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d038      	beq.n	8005ea2 <_svfiprintf_r+0x1d6>
 8005e30:	4b23      	ldr	r3, [pc, #140]	@ (8005ec0 <_svfiprintf_r+0x1f4>)
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d122      	bne.n	8005e7c <_svfiprintf_r+0x1b0>
 8005e36:	2207      	movs	r2, #7
 8005e38:	9b07      	ldr	r3, [sp, #28]
 8005e3a:	3307      	adds	r3, #7
 8005e3c:	4393      	bics	r3, r2
 8005e3e:	3308      	adds	r3, #8
 8005e40:	9307      	str	r3, [sp, #28]
 8005e42:	6963      	ldr	r3, [r4, #20]
 8005e44:	9a04      	ldr	r2, [sp, #16]
 8005e46:	189b      	adds	r3, r3, r2
 8005e48:	6163      	str	r3, [r4, #20]
 8005e4a:	e762      	b.n	8005d12 <_svfiprintf_r+0x46>
 8005e4c:	4343      	muls	r3, r0
 8005e4e:	0035      	movs	r5, r6
 8005e50:	2101      	movs	r1, #1
 8005e52:	189b      	adds	r3, r3, r2
 8005e54:	e7a4      	b.n	8005da0 <_svfiprintf_r+0xd4>
 8005e56:	2300      	movs	r3, #0
 8005e58:	200a      	movs	r0, #10
 8005e5a:	0019      	movs	r1, r3
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	6063      	str	r3, [r4, #4]
 8005e60:	782a      	ldrb	r2, [r5, #0]
 8005e62:	1c6e      	adds	r6, r5, #1
 8005e64:	3a30      	subs	r2, #48	@ 0x30
 8005e66:	2a09      	cmp	r2, #9
 8005e68:	d903      	bls.n	8005e72 <_svfiprintf_r+0x1a6>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0c8      	beq.n	8005e00 <_svfiprintf_r+0x134>
 8005e6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e70:	e7c6      	b.n	8005e00 <_svfiprintf_r+0x134>
 8005e72:	4341      	muls	r1, r0
 8005e74:	0035      	movs	r5, r6
 8005e76:	2301      	movs	r3, #1
 8005e78:	1889      	adds	r1, r1, r2
 8005e7a:	e7f1      	b.n	8005e60 <_svfiprintf_r+0x194>
 8005e7c:	aa07      	add	r2, sp, #28
 8005e7e:	9200      	str	r2, [sp, #0]
 8005e80:	0021      	movs	r1, r4
 8005e82:	003a      	movs	r2, r7
 8005e84:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <_svfiprintf_r+0x1f8>)
 8005e86:	9803      	ldr	r0, [sp, #12]
 8005e88:	e000      	b.n	8005e8c <_svfiprintf_r+0x1c0>
 8005e8a:	bf00      	nop
 8005e8c:	9004      	str	r0, [sp, #16]
 8005e8e:	9b04      	ldr	r3, [sp, #16]
 8005e90:	3301      	adds	r3, #1
 8005e92:	d1d6      	bne.n	8005e42 <_svfiprintf_r+0x176>
 8005e94:	89bb      	ldrh	r3, [r7, #12]
 8005e96:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005e98:	065b      	lsls	r3, r3, #25
 8005e9a:	d500      	bpl.n	8005e9e <_svfiprintf_r+0x1d2>
 8005e9c:	e72c      	b.n	8005cf8 <_svfiprintf_r+0x2c>
 8005e9e:	b021      	add	sp, #132	@ 0x84
 8005ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea2:	aa07      	add	r2, sp, #28
 8005ea4:	9200      	str	r2, [sp, #0]
 8005ea6:	0021      	movs	r1, r4
 8005ea8:	003a      	movs	r2, r7
 8005eaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <_svfiprintf_r+0x1f8>)
 8005eac:	9803      	ldr	r0, [sp, #12]
 8005eae:	f000 f87b 	bl	8005fa8 <_printf_i>
 8005eb2:	e7eb      	b.n	8005e8c <_svfiprintf_r+0x1c0>
 8005eb4:	08006571 	.word	0x08006571
 8005eb8:	08006577 	.word	0x08006577
 8005ebc:	0800657b 	.word	0x0800657b
 8005ec0:	00000000 	.word	0x00000000
 8005ec4:	08005c0d 	.word	0x08005c0d

08005ec8 <_printf_common>:
 8005ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eca:	0016      	movs	r6, r2
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	688a      	ldr	r2, [r1, #8]
 8005ed0:	690b      	ldr	r3, [r1, #16]
 8005ed2:	000c      	movs	r4, r1
 8005ed4:	9000      	str	r0, [sp, #0]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	da00      	bge.n	8005edc <_printf_common+0x14>
 8005eda:	0013      	movs	r3, r2
 8005edc:	0022      	movs	r2, r4
 8005ede:	6033      	str	r3, [r6, #0]
 8005ee0:	3243      	adds	r2, #67	@ 0x43
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	d001      	beq.n	8005eec <_printf_common+0x24>
 8005ee8:	3301      	adds	r3, #1
 8005eea:	6033      	str	r3, [r6, #0]
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	069b      	lsls	r3, r3, #26
 8005ef0:	d502      	bpl.n	8005ef8 <_printf_common+0x30>
 8005ef2:	6833      	ldr	r3, [r6, #0]
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	6033      	str	r3, [r6, #0]
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	2306      	movs	r3, #6
 8005efc:	0015      	movs	r5, r2
 8005efe:	401d      	ands	r5, r3
 8005f00:	421a      	tst	r2, r3
 8005f02:	d027      	beq.n	8005f54 <_printf_common+0x8c>
 8005f04:	0023      	movs	r3, r4
 8005f06:	3343      	adds	r3, #67	@ 0x43
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	1e5a      	subs	r2, r3, #1
 8005f0c:	4193      	sbcs	r3, r2
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	0692      	lsls	r2, r2, #26
 8005f12:	d430      	bmi.n	8005f76 <_printf_common+0xae>
 8005f14:	0022      	movs	r2, r4
 8005f16:	9901      	ldr	r1, [sp, #4]
 8005f18:	9800      	ldr	r0, [sp, #0]
 8005f1a:	9d08      	ldr	r5, [sp, #32]
 8005f1c:	3243      	adds	r2, #67	@ 0x43
 8005f1e:	47a8      	blx	r5
 8005f20:	3001      	adds	r0, #1
 8005f22:	d025      	beq.n	8005f70 <_printf_common+0xa8>
 8005f24:	2206      	movs	r2, #6
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	2500      	movs	r5, #0
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d105      	bne.n	8005f3c <_printf_common+0x74>
 8005f30:	6833      	ldr	r3, [r6, #0]
 8005f32:	68e5      	ldr	r5, [r4, #12]
 8005f34:	1aed      	subs	r5, r5, r3
 8005f36:	43eb      	mvns	r3, r5
 8005f38:	17db      	asrs	r3, r3, #31
 8005f3a:	401d      	ands	r5, r3
 8005f3c:	68a3      	ldr	r3, [r4, #8]
 8005f3e:	6922      	ldr	r2, [r4, #16]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	dd01      	ble.n	8005f48 <_printf_common+0x80>
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	18ed      	adds	r5, r5, r3
 8005f48:	2600      	movs	r6, #0
 8005f4a:	42b5      	cmp	r5, r6
 8005f4c:	d120      	bne.n	8005f90 <_printf_common+0xc8>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	e010      	b.n	8005f74 <_printf_common+0xac>
 8005f52:	3501      	adds	r5, #1
 8005f54:	68e3      	ldr	r3, [r4, #12]
 8005f56:	6832      	ldr	r2, [r6, #0]
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	42ab      	cmp	r3, r5
 8005f5c:	ddd2      	ble.n	8005f04 <_printf_common+0x3c>
 8005f5e:	0022      	movs	r2, r4
 8005f60:	2301      	movs	r3, #1
 8005f62:	9901      	ldr	r1, [sp, #4]
 8005f64:	9800      	ldr	r0, [sp, #0]
 8005f66:	9f08      	ldr	r7, [sp, #32]
 8005f68:	3219      	adds	r2, #25
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d1f0      	bne.n	8005f52 <_printf_common+0x8a>
 8005f70:	2001      	movs	r0, #1
 8005f72:	4240      	negs	r0, r0
 8005f74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f76:	2030      	movs	r0, #48	@ 0x30
 8005f78:	18e1      	adds	r1, r4, r3
 8005f7a:	3143      	adds	r1, #67	@ 0x43
 8005f7c:	7008      	strb	r0, [r1, #0]
 8005f7e:	0021      	movs	r1, r4
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	3145      	adds	r1, #69	@ 0x45
 8005f84:	7809      	ldrb	r1, [r1, #0]
 8005f86:	18a2      	adds	r2, r4, r2
 8005f88:	3243      	adds	r2, #67	@ 0x43
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	7011      	strb	r1, [r2, #0]
 8005f8e:	e7c1      	b.n	8005f14 <_printf_common+0x4c>
 8005f90:	0022      	movs	r2, r4
 8005f92:	2301      	movs	r3, #1
 8005f94:	9901      	ldr	r1, [sp, #4]
 8005f96:	9800      	ldr	r0, [sp, #0]
 8005f98:	9f08      	ldr	r7, [sp, #32]
 8005f9a:	321a      	adds	r2, #26
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d0e6      	beq.n	8005f70 <_printf_common+0xa8>
 8005fa2:	3601      	adds	r6, #1
 8005fa4:	e7d1      	b.n	8005f4a <_printf_common+0x82>
	...

08005fa8 <_printf_i>:
 8005fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005faa:	b08b      	sub	sp, #44	@ 0x2c
 8005fac:	9206      	str	r2, [sp, #24]
 8005fae:	000a      	movs	r2, r1
 8005fb0:	3243      	adds	r2, #67	@ 0x43
 8005fb2:	9307      	str	r3, [sp, #28]
 8005fb4:	9005      	str	r0, [sp, #20]
 8005fb6:	9203      	str	r2, [sp, #12]
 8005fb8:	7e0a      	ldrb	r2, [r1, #24]
 8005fba:	000c      	movs	r4, r1
 8005fbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fbe:	2a78      	cmp	r2, #120	@ 0x78
 8005fc0:	d809      	bhi.n	8005fd6 <_printf_i+0x2e>
 8005fc2:	2a62      	cmp	r2, #98	@ 0x62
 8005fc4:	d80b      	bhi.n	8005fde <_printf_i+0x36>
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	d100      	bne.n	8005fcc <_printf_i+0x24>
 8005fca:	e0ba      	b.n	8006142 <_printf_i+0x19a>
 8005fcc:	497a      	ldr	r1, [pc, #488]	@ (80061b8 <_printf_i+0x210>)
 8005fce:	9104      	str	r1, [sp, #16]
 8005fd0:	2a58      	cmp	r2, #88	@ 0x58
 8005fd2:	d100      	bne.n	8005fd6 <_printf_i+0x2e>
 8005fd4:	e08e      	b.n	80060f4 <_printf_i+0x14c>
 8005fd6:	0025      	movs	r5, r4
 8005fd8:	3542      	adds	r5, #66	@ 0x42
 8005fda:	702a      	strb	r2, [r5, #0]
 8005fdc:	e022      	b.n	8006024 <_printf_i+0x7c>
 8005fde:	0010      	movs	r0, r2
 8005fe0:	3863      	subs	r0, #99	@ 0x63
 8005fe2:	2815      	cmp	r0, #21
 8005fe4:	d8f7      	bhi.n	8005fd6 <_printf_i+0x2e>
 8005fe6:	f7fa f895 	bl	8000114 <__gnu_thumb1_case_shi>
 8005fea:	0016      	.short	0x0016
 8005fec:	fff6001f 	.word	0xfff6001f
 8005ff0:	fff6fff6 	.word	0xfff6fff6
 8005ff4:	001ffff6 	.word	0x001ffff6
 8005ff8:	fff6fff6 	.word	0xfff6fff6
 8005ffc:	fff6fff6 	.word	0xfff6fff6
 8006000:	0036009f 	.word	0x0036009f
 8006004:	fff6007e 	.word	0xfff6007e
 8006008:	00b0fff6 	.word	0x00b0fff6
 800600c:	0036fff6 	.word	0x0036fff6
 8006010:	fff6fff6 	.word	0xfff6fff6
 8006014:	0082      	.short	0x0082
 8006016:	0025      	movs	r5, r4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	3542      	adds	r5, #66	@ 0x42
 800601c:	1d11      	adds	r1, r2, #4
 800601e:	6019      	str	r1, [r3, #0]
 8006020:	6813      	ldr	r3, [r2, #0]
 8006022:	702b      	strb	r3, [r5, #0]
 8006024:	2301      	movs	r3, #1
 8006026:	e09e      	b.n	8006166 <_printf_i+0x1be>
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	6809      	ldr	r1, [r1, #0]
 800602c:	1d02      	adds	r2, r0, #4
 800602e:	060d      	lsls	r5, r1, #24
 8006030:	d50b      	bpl.n	800604a <_printf_i+0xa2>
 8006032:	6806      	ldr	r6, [r0, #0]
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	2e00      	cmp	r6, #0
 8006038:	da03      	bge.n	8006042 <_printf_i+0x9a>
 800603a:	232d      	movs	r3, #45	@ 0x2d
 800603c:	9a03      	ldr	r2, [sp, #12]
 800603e:	4276      	negs	r6, r6
 8006040:	7013      	strb	r3, [r2, #0]
 8006042:	4b5d      	ldr	r3, [pc, #372]	@ (80061b8 <_printf_i+0x210>)
 8006044:	270a      	movs	r7, #10
 8006046:	9304      	str	r3, [sp, #16]
 8006048:	e018      	b.n	800607c <_printf_i+0xd4>
 800604a:	6806      	ldr	r6, [r0, #0]
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	0649      	lsls	r1, r1, #25
 8006050:	d5f1      	bpl.n	8006036 <_printf_i+0x8e>
 8006052:	b236      	sxth	r6, r6
 8006054:	e7ef      	b.n	8006036 <_printf_i+0x8e>
 8006056:	6808      	ldr	r0, [r1, #0]
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	c940      	ldmia	r1!, {r6}
 800605c:	0605      	lsls	r5, r0, #24
 800605e:	d402      	bmi.n	8006066 <_printf_i+0xbe>
 8006060:	0640      	lsls	r0, r0, #25
 8006062:	d500      	bpl.n	8006066 <_printf_i+0xbe>
 8006064:	b2b6      	uxth	r6, r6
 8006066:	6019      	str	r1, [r3, #0]
 8006068:	4b53      	ldr	r3, [pc, #332]	@ (80061b8 <_printf_i+0x210>)
 800606a:	270a      	movs	r7, #10
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006070:	d100      	bne.n	8006074 <_printf_i+0xcc>
 8006072:	3f02      	subs	r7, #2
 8006074:	0023      	movs	r3, r4
 8006076:	2200      	movs	r2, #0
 8006078:	3343      	adds	r3, #67	@ 0x43
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	60a3      	str	r3, [r4, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	db06      	blt.n	8006092 <_printf_i+0xea>
 8006084:	2104      	movs	r1, #4
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	9d03      	ldr	r5, [sp, #12]
 800608a:	438a      	bics	r2, r1
 800608c:	6022      	str	r2, [r4, #0]
 800608e:	4333      	orrs	r3, r6
 8006090:	d00c      	beq.n	80060ac <_printf_i+0x104>
 8006092:	9d03      	ldr	r5, [sp, #12]
 8006094:	0030      	movs	r0, r6
 8006096:	0039      	movs	r1, r7
 8006098:	f7fa f8cc 	bl	8000234 <__aeabi_uidivmod>
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	3d01      	subs	r5, #1
 80060a0:	5c5b      	ldrb	r3, [r3, r1]
 80060a2:	702b      	strb	r3, [r5, #0]
 80060a4:	0033      	movs	r3, r6
 80060a6:	0006      	movs	r6, r0
 80060a8:	429f      	cmp	r7, r3
 80060aa:	d9f3      	bls.n	8006094 <_printf_i+0xec>
 80060ac:	2f08      	cmp	r7, #8
 80060ae:	d109      	bne.n	80060c4 <_printf_i+0x11c>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	07db      	lsls	r3, r3, #31
 80060b4:	d506      	bpl.n	80060c4 <_printf_i+0x11c>
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	dc02      	bgt.n	80060c4 <_printf_i+0x11c>
 80060be:	2330      	movs	r3, #48	@ 0x30
 80060c0:	3d01      	subs	r5, #1
 80060c2:	702b      	strb	r3, [r5, #0]
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	1b5b      	subs	r3, r3, r5
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	9b07      	ldr	r3, [sp, #28]
 80060cc:	0021      	movs	r1, r4
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	9805      	ldr	r0, [sp, #20]
 80060d2:	9b06      	ldr	r3, [sp, #24]
 80060d4:	aa09      	add	r2, sp, #36	@ 0x24
 80060d6:	f7ff fef7 	bl	8005ec8 <_printf_common>
 80060da:	3001      	adds	r0, #1
 80060dc:	d148      	bne.n	8006170 <_printf_i+0x1c8>
 80060de:	2001      	movs	r0, #1
 80060e0:	4240      	negs	r0, r0
 80060e2:	b00b      	add	sp, #44	@ 0x2c
 80060e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e6:	2220      	movs	r2, #32
 80060e8:	6809      	ldr	r1, [r1, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	6022      	str	r2, [r4, #0]
 80060ee:	2278      	movs	r2, #120	@ 0x78
 80060f0:	4932      	ldr	r1, [pc, #200]	@ (80061bc <_printf_i+0x214>)
 80060f2:	9104      	str	r1, [sp, #16]
 80060f4:	0021      	movs	r1, r4
 80060f6:	3145      	adds	r1, #69	@ 0x45
 80060f8:	700a      	strb	r2, [r1, #0]
 80060fa:	6819      	ldr	r1, [r3, #0]
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	c940      	ldmia	r1!, {r6}
 8006100:	0610      	lsls	r0, r2, #24
 8006102:	d402      	bmi.n	800610a <_printf_i+0x162>
 8006104:	0650      	lsls	r0, r2, #25
 8006106:	d500      	bpl.n	800610a <_printf_i+0x162>
 8006108:	b2b6      	uxth	r6, r6
 800610a:	6019      	str	r1, [r3, #0]
 800610c:	07d3      	lsls	r3, r2, #31
 800610e:	d502      	bpl.n	8006116 <_printf_i+0x16e>
 8006110:	2320      	movs	r3, #32
 8006112:	4313      	orrs	r3, r2
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	2e00      	cmp	r6, #0
 8006118:	d001      	beq.n	800611e <_printf_i+0x176>
 800611a:	2710      	movs	r7, #16
 800611c:	e7aa      	b.n	8006074 <_printf_i+0xcc>
 800611e:	2220      	movs	r2, #32
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	4393      	bics	r3, r2
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	e7f8      	b.n	800611a <_printf_i+0x172>
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	680d      	ldr	r5, [r1, #0]
 800612c:	1d10      	adds	r0, r2, #4
 800612e:	6949      	ldr	r1, [r1, #20]
 8006130:	6018      	str	r0, [r3, #0]
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	062e      	lsls	r6, r5, #24
 8006136:	d501      	bpl.n	800613c <_printf_i+0x194>
 8006138:	6019      	str	r1, [r3, #0]
 800613a:	e002      	b.n	8006142 <_printf_i+0x19a>
 800613c:	066d      	lsls	r5, r5, #25
 800613e:	d5fb      	bpl.n	8006138 <_printf_i+0x190>
 8006140:	8019      	strh	r1, [r3, #0]
 8006142:	2300      	movs	r3, #0
 8006144:	9d03      	ldr	r5, [sp, #12]
 8006146:	6123      	str	r3, [r4, #16]
 8006148:	e7bf      	b.n	80060ca <_printf_i+0x122>
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	1d11      	adds	r1, r2, #4
 800614e:	6019      	str	r1, [r3, #0]
 8006150:	6815      	ldr	r5, [r2, #0]
 8006152:	2100      	movs	r1, #0
 8006154:	0028      	movs	r0, r5
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	f000 f856 	bl	8006208 <memchr>
 800615c:	2800      	cmp	r0, #0
 800615e:	d001      	beq.n	8006164 <_printf_i+0x1bc>
 8006160:	1b40      	subs	r0, r0, r5
 8006162:	6060      	str	r0, [r4, #4]
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	2300      	movs	r3, #0
 800616a:	9a03      	ldr	r2, [sp, #12]
 800616c:	7013      	strb	r3, [r2, #0]
 800616e:	e7ac      	b.n	80060ca <_printf_i+0x122>
 8006170:	002a      	movs	r2, r5
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	9906      	ldr	r1, [sp, #24]
 8006176:	9805      	ldr	r0, [sp, #20]
 8006178:	9d07      	ldr	r5, [sp, #28]
 800617a:	47a8      	blx	r5
 800617c:	3001      	adds	r0, #1
 800617e:	d0ae      	beq.n	80060de <_printf_i+0x136>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	079b      	lsls	r3, r3, #30
 8006184:	d415      	bmi.n	80061b2 <_printf_i+0x20a>
 8006186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006188:	68e0      	ldr	r0, [r4, #12]
 800618a:	4298      	cmp	r0, r3
 800618c:	daa9      	bge.n	80060e2 <_printf_i+0x13a>
 800618e:	0018      	movs	r0, r3
 8006190:	e7a7      	b.n	80060e2 <_printf_i+0x13a>
 8006192:	0022      	movs	r2, r4
 8006194:	2301      	movs	r3, #1
 8006196:	9906      	ldr	r1, [sp, #24]
 8006198:	9805      	ldr	r0, [sp, #20]
 800619a:	9e07      	ldr	r6, [sp, #28]
 800619c:	3219      	adds	r2, #25
 800619e:	47b0      	blx	r6
 80061a0:	3001      	adds	r0, #1
 80061a2:	d09c      	beq.n	80060de <_printf_i+0x136>
 80061a4:	3501      	adds	r5, #1
 80061a6:	68e3      	ldr	r3, [r4, #12]
 80061a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	dcf0      	bgt.n	8006192 <_printf_i+0x1ea>
 80061b0:	e7e9      	b.n	8006186 <_printf_i+0x1de>
 80061b2:	2500      	movs	r5, #0
 80061b4:	e7f7      	b.n	80061a6 <_printf_i+0x1fe>
 80061b6:	46c0      	nop			@ (mov r8, r8)
 80061b8:	08006582 	.word	0x08006582
 80061bc:	08006593 	.word	0x08006593

080061c0 <memmove>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	4288      	cmp	r0, r1
 80061c4:	d902      	bls.n	80061cc <memmove+0xc>
 80061c6:	188b      	adds	r3, r1, r2
 80061c8:	4298      	cmp	r0, r3
 80061ca:	d308      	bcc.n	80061de <memmove+0x1e>
 80061cc:	2300      	movs	r3, #0
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d007      	beq.n	80061e2 <memmove+0x22>
 80061d2:	5ccc      	ldrb	r4, [r1, r3]
 80061d4:	54c4      	strb	r4, [r0, r3]
 80061d6:	3301      	adds	r3, #1
 80061d8:	e7f9      	b.n	80061ce <memmove+0xe>
 80061da:	5c8b      	ldrb	r3, [r1, r2]
 80061dc:	5483      	strb	r3, [r0, r2]
 80061de:	3a01      	subs	r2, #1
 80061e0:	d2fb      	bcs.n	80061da <memmove+0x1a>
 80061e2:	bd10      	pop	{r4, pc}

080061e4 <_sbrk_r>:
 80061e4:	2300      	movs	r3, #0
 80061e6:	b570      	push	{r4, r5, r6, lr}
 80061e8:	4d06      	ldr	r5, [pc, #24]	@ (8006204 <_sbrk_r+0x20>)
 80061ea:	0004      	movs	r4, r0
 80061ec:	0008      	movs	r0, r1
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	f7fa ff10 	bl	8001014 <_sbrk>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d103      	bne.n	8006200 <_sbrk_r+0x1c>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d000      	beq.n	8006200 <_sbrk_r+0x1c>
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	bd70      	pop	{r4, r5, r6, pc}
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	20000348 	.word	0x20000348

08006208 <memchr>:
 8006208:	b2c9      	uxtb	r1, r1
 800620a:	1882      	adds	r2, r0, r2
 800620c:	4290      	cmp	r0, r2
 800620e:	d101      	bne.n	8006214 <memchr+0xc>
 8006210:	2000      	movs	r0, #0
 8006212:	4770      	bx	lr
 8006214:	7803      	ldrb	r3, [r0, #0]
 8006216:	428b      	cmp	r3, r1
 8006218:	d0fb      	beq.n	8006212 <memchr+0xa>
 800621a:	3001      	adds	r0, #1
 800621c:	e7f6      	b.n	800620c <memchr+0x4>

0800621e <memcpy>:
 800621e:	2300      	movs	r3, #0
 8006220:	b510      	push	{r4, lr}
 8006222:	429a      	cmp	r2, r3
 8006224:	d100      	bne.n	8006228 <memcpy+0xa>
 8006226:	bd10      	pop	{r4, pc}
 8006228:	5ccc      	ldrb	r4, [r1, r3]
 800622a:	54c4      	strb	r4, [r0, r3]
 800622c:	3301      	adds	r3, #1
 800622e:	e7f8      	b.n	8006222 <memcpy+0x4>

08006230 <_realloc_r>:
 8006230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006232:	0006      	movs	r6, r0
 8006234:	000c      	movs	r4, r1
 8006236:	0015      	movs	r5, r2
 8006238:	2900      	cmp	r1, #0
 800623a:	d105      	bne.n	8006248 <_realloc_r+0x18>
 800623c:	0011      	movs	r1, r2
 800623e:	f7ff fc55 	bl	8005aec <_malloc_r>
 8006242:	0004      	movs	r4, r0
 8006244:	0020      	movs	r0, r4
 8006246:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006248:	2a00      	cmp	r2, #0
 800624a:	d103      	bne.n	8006254 <_realloc_r+0x24>
 800624c:	f7ff fbe2 	bl	8005a14 <_free_r>
 8006250:	002c      	movs	r4, r5
 8006252:	e7f7      	b.n	8006244 <_realloc_r+0x14>
 8006254:	f000 f81c 	bl	8006290 <_malloc_usable_size_r>
 8006258:	0007      	movs	r7, r0
 800625a:	4285      	cmp	r5, r0
 800625c:	d802      	bhi.n	8006264 <_realloc_r+0x34>
 800625e:	0843      	lsrs	r3, r0, #1
 8006260:	42ab      	cmp	r3, r5
 8006262:	d3ef      	bcc.n	8006244 <_realloc_r+0x14>
 8006264:	0029      	movs	r1, r5
 8006266:	0030      	movs	r0, r6
 8006268:	f7ff fc40 	bl	8005aec <_malloc_r>
 800626c:	9001      	str	r0, [sp, #4]
 800626e:	2800      	cmp	r0, #0
 8006270:	d101      	bne.n	8006276 <_realloc_r+0x46>
 8006272:	9c01      	ldr	r4, [sp, #4]
 8006274:	e7e6      	b.n	8006244 <_realloc_r+0x14>
 8006276:	002a      	movs	r2, r5
 8006278:	42bd      	cmp	r5, r7
 800627a:	d900      	bls.n	800627e <_realloc_r+0x4e>
 800627c:	003a      	movs	r2, r7
 800627e:	0021      	movs	r1, r4
 8006280:	9801      	ldr	r0, [sp, #4]
 8006282:	f7ff ffcc 	bl	800621e <memcpy>
 8006286:	0021      	movs	r1, r4
 8006288:	0030      	movs	r0, r6
 800628a:	f7ff fbc3 	bl	8005a14 <_free_r>
 800628e:	e7f0      	b.n	8006272 <_realloc_r+0x42>

08006290 <_malloc_usable_size_r>:
 8006290:	1f0b      	subs	r3, r1, #4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1f18      	subs	r0, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	da01      	bge.n	800629e <_malloc_usable_size_r+0xe>
 800629a:	580b      	ldr	r3, [r1, r0]
 800629c:	18c0      	adds	r0, r0, r3
 800629e:	4770      	bx	lr

080062a0 <_init>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	46c0      	nop			@ (mov r8, r8)
 80062a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a6:	bc08      	pop	{r3}
 80062a8:	469e      	mov	lr, r3
 80062aa:	4770      	bx	lr

080062ac <_fini>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	46c0      	nop			@ (mov r8, r8)
 80062b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b2:	bc08      	pop	{r3}
 80062b4:	469e      	mov	lr, r3
 80062b6:	4770      	bx	lr
