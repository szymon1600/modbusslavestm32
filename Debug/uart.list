
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000431c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080043d8  080043d8  000053d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004460  08004460  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004468  08004468  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004468  08004468  00005468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800446c  0800446c  0000546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004470  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  0800447c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800447c  00006158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba9d  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dca  00000000  00000000  00011ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  000138a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d4  00000000  00000000  00014178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fa3  00000000  00000000  0001484c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bce9  00000000  00000000  0002b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092edc  00000000  00000000  000374d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca3b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e90  00000000  00000000  000ca3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000cc288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080043c0 	.word	0x080043c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080043c0 	.word	0x080043c0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000620:	f000 faf2 	bl	8000c08 <HAL_Init>
  SystemClock_Config();
 8000624:	f000 f81c 	bl	8000660 <SystemClock_Config>
  MX_GPIO_Init();
 8000628:	f000 f8e6 	bl	80007f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800062c:	f000 f860 	bl	80006f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f8a0 	bl	8000774 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx1, 1);
 8000634:	4906      	ldr	r1, [pc, #24]	@ (8000650 <main+0x34>)
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <main+0x38>)
 8000638:	2201      	movs	r2, #1
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fe58 	bl	80022f0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx2, 1);
 8000640:	4905      	ldr	r1, [pc, #20]	@ (8000658 <main+0x3c>)
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <main+0x40>)
 8000644:	2201      	movs	r2, #1
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fe52 	bl	80022f0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  while (1)
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	e7fd      	b.n	800064c <main+0x30>
 8000650:	20000150 	.word	0x20000150
 8000654:	20000028 	.word	0x20000028
 8000658:	20000151 	.word	0x20000151
 800065c:	200000bc 	.word	0x200000bc

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b093      	sub	sp, #76	@ 0x4c
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	2410      	movs	r4, #16
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2338      	movs	r3, #56	@ 0x38
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 fe79 	bl	8004368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	2310      	movs	r3, #16
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f003 fe72 	bl	8004368 <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2380      	movs	r3, #128	@ 0x80
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fe6f 	bl	800136c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2202      	movs	r2, #2
 8000692:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2280      	movs	r2, #128	@ 0x80
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2240      	movs	r2, #64	@ 0x40
 80006a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fea7 	bl	8001404 <HAL_RCC_OscConfig>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ba:	f000 f95f 	bl	800097c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	003b      	movs	r3, r7
 80006c0:	2207      	movs	r2, #7
 80006c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	003b      	movs	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	003b      	movs	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	003b      	movs	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d6:	003b      	movs	r3, r7
 80006d8:	2100      	movs	r1, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 f9ac 	bl	8001a38 <HAL_RCC_ClockConfig>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006e4:	f000 f94a 	bl	800097c <Error_Handler>
  }
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b013      	add	sp, #76	@ 0x4c
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 80006f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <MX_USART1_UART_Init+0x80>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 80006fc:	22e1      	movs	r2, #225	@ 0xe1
 80006fe:	0252      	lsls	r2, r2, #9
 8000700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 800073a:	0018      	movs	r0, r3
 800073c:	f001 fcde 	bl	80020fc <HAL_UART_Init>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 f91a 	bl	800097c <Error_Handler>
  }
  HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 800074a:	2100      	movs	r1, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f003 fd2b 	bl	80041a8 <HAL_UARTEx_SetTxFifoThreshold>
  HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 8000754:	2100      	movs	r1, #0
 8000756:	0018      	movs	r0, r3
 8000758:	f003 fd66 	bl	8004228 <HAL_UARTEx_SetRxFifoThreshold>
  HAL_UARTEx_DisableFifoMode(&huart1);
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <MX_USART1_UART_Init+0x7c>)
 800075e:	0018      	movs	r0, r3
 8000760:	f003 fce8 	bl	8004134 <HAL_UARTEx_DisableFifoMode>
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	20000028 	.word	0x20000028
 8000770:	40013800 	.word	0x40013800

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <MX_USART2_UART_Init+0x80>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 8000780:	22e1      	movs	r2, #225	@ 0xe1
 8000782:	0252      	lsls	r2, r2, #9
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fc9c 	bl	80020fc <HAL_UART_Init>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c8:	f000 f8d8 	bl	800097c <Error_Handler>
  }
  HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 fce9 	bl	80041a8 <HAL_UARTEx_SetTxFifoThreshold>
  HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8);
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007d8:	2100      	movs	r1, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f003 fd24 	bl	8004228 <HAL_UARTEx_SetRxFifoThreshold>
  HAL_UARTEx_DisableFifoMode(&huart2);
 80007e0:	4b03      	ldr	r3, [pc, #12]	@ (80007f0 <MX_USART2_UART_Init+0x7c>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f003 fca6 	bl	8004134 <HAL_UARTEx_DisableFifoMode>
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	200000bc 	.word	0x200000bc
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b089      	sub	sp, #36	@ 0x24
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	240c      	movs	r4, #12
 8000800:	193b      	adds	r3, r7, r4
 8000802:	0018      	movs	r0, r3
 8000804:	2314      	movs	r3, #20
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f003 fdad 	bl	8004368 <memset>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000814:	2104      	movs	r1, #4
 8000816:	430a      	orrs	r2, r1
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_GPIO_Init+0x9c>)
 800081c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800081e:	2204      	movs	r2, #4
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_GPIO_Init+0x9c>)
 800082c:	2120      	movs	r1, #32
 800082e:	430a      	orrs	r2, r1
 8000830:	635a      	str	r2, [r3, #52]	@ 0x34
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000836:	2220      	movs	r2, #32
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000844:	2101      	movs	r1, #1
 8000846:	430a      	orrs	r2, r1
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_GPIO_Init+0x9c>)
 800084c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800084e:	2201      	movs	r2, #1
 8000850:	4013      	ands	r3, r2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000856:	23a0      	movs	r3, #160	@ 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fd66 	bl	8001330 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000864:	0021      	movs	r1, r4
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2220      	movs	r2, #32
 800086a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2202      	movs	r2, #2
 800087c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800087e:	187a      	adds	r2, r7, r1
 8000880:	23a0      	movs	r3, #160	@ 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fbee 	bl	8001068 <HAL_GPIO_Init>
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b009      	add	sp, #36	@ 0x24
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint8_t tx;

  if (huart->Instance == USART1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000964 <HAL_UART_RxCpltCallback+0xcc>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12a      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x68>
  {
    if (rx1 >= '0' && rx1 <= '9')
 80008aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000968 <HAL_UART_RxCpltCallback+0xd0>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80008b0:	d913      	bls.n	80008da <HAL_UART_RxCpltCallback+0x42>
 80008b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <HAL_UART_RxCpltCallback+0xd0>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b39      	cmp	r3, #57	@ 0x39
 80008b8:	d80f      	bhi.n	80008da <HAL_UART_RxCpltCallback+0x42>
    {
      tx = rx1 + 1;
 80008ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <HAL_UART_RxCpltCallback+0xd0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	210f      	movs	r1, #15
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	701a      	strb	r2, [r3, #0]
      if (tx > '9') tx = '0';
 80008c8:	000a      	movs	r2, r1
 80008ca:	18bb      	adds	r3, r7, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b39      	cmp	r3, #57	@ 0x39
 80008d0:	d907      	bls.n	80008e2 <HAL_UART_RxCpltCallback+0x4a>
 80008d2:	18bb      	adds	r3, r7, r2
 80008d4:	2230      	movs	r2, #48	@ 0x30
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	e003      	b.n	80008e2 <HAL_UART_RxCpltCallback+0x4a>
    }
    else
    {
      tx = '!';
 80008da:	230f      	movs	r3, #15
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	2221      	movs	r2, #33	@ 0x21
 80008e0:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Transmit(&huart2, &tx, 1, HAL_MAX_DELAY);
 80008e2:	2301      	movs	r3, #1
 80008e4:	425b      	negs	r3, r3
 80008e6:	220f      	movs	r2, #15
 80008e8:	18b9      	adds	r1, r7, r2
 80008ea:	4820      	ldr	r0, [pc, #128]	@ (800096c <HAL_UART_RxCpltCallback+0xd4>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	f001 fc5b 	bl	80021a8 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, &rx1, 1);
 80008f2:	491d      	ldr	r1, [pc, #116]	@ (8000968 <HAL_UART_RxCpltCallback+0xd0>)
 80008f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <HAL_UART_RxCpltCallback+0xd8>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fcf9 	bl	80022f0 <HAL_UART_Receive_IT>
    }

    HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
    HAL_UART_Receive_IT(&huart2, &rx2, 1);
  }
}
 80008fe:	e02c      	b.n	800095a <HAL_UART_RxCpltCallback+0xc2>
  else if (huart->Instance == USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <HAL_UART_RxCpltCallback+0xdc>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d127      	bne.n	800095a <HAL_UART_RxCpltCallback+0xc2>
    if (rx2 >= '0' && rx2 <= '9')
 800090a:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <HAL_UART_RxCpltCallback+0xe0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000910:	d911      	bls.n	8000936 <HAL_UART_RxCpltCallback+0x9e>
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <HAL_UART_RxCpltCallback+0xe0>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b39      	cmp	r3, #57	@ 0x39
 8000918:	d80d      	bhi.n	8000936 <HAL_UART_RxCpltCallback+0x9e>
      tx = rx2 ;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <HAL_UART_RxCpltCallback+0xe0>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	210f      	movs	r1, #15
 8000920:	187b      	adds	r3, r7, r1
 8000922:	701a      	strb	r2, [r3, #0]
      if (tx > '9') tx = '0';
 8000924:	000a      	movs	r2, r1
 8000926:	18bb      	adds	r3, r7, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b39      	cmp	r3, #57	@ 0x39
 800092c:	d907      	bls.n	800093e <HAL_UART_RxCpltCallback+0xa6>
 800092e:	18bb      	adds	r3, r7, r2
 8000930:	2230      	movs	r2, #48	@ 0x30
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e003      	b.n	800093e <HAL_UART_RxCpltCallback+0xa6>
      tx = '!';
 8000936:	230f      	movs	r3, #15
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	2221      	movs	r2, #33	@ 0x21
 800093c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
 800093e:	2301      	movs	r3, #1
 8000940:	425b      	negs	r3, r3
 8000942:	220f      	movs	r2, #15
 8000944:	18b9      	adds	r1, r7, r2
 8000946:	480a      	ldr	r0, [pc, #40]	@ (8000970 <HAL_UART_RxCpltCallback+0xd8>)
 8000948:	2201      	movs	r2, #1
 800094a:	f001 fc2d 	bl	80021a8 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, &rx2, 1);
 800094e:	490a      	ldr	r1, [pc, #40]	@ (8000978 <HAL_UART_RxCpltCallback+0xe0>)
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_UART_RxCpltCallback+0xd4>)
 8000952:	2201      	movs	r2, #1
 8000954:	0018      	movs	r0, r3
 8000956:	f001 fccb 	bl	80022f0 <HAL_UART_Receive_IT>
}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	40013800 	.word	0x40013800
 8000968:	20000150 	.word	0x20000150
 800096c:	200000bc 	.word	0x200000bc
 8000970:	20000028 	.word	0x20000028
 8000974:	40004400 	.word	0x40004400
 8000978:	20000151 	.word	0x20000151

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <HAL_MspInit+0x44>)
 8000990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_MspInit+0x44>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	641a      	str	r2, [r3, #64]	@ 0x40
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <HAL_MspInit+0x44>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x44>)
 80009a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <HAL_MspInit+0x44>)
 80009ac:	2180      	movs	r1, #128	@ 0x80
 80009ae:	0549      	lsls	r1, r1, #21
 80009b0:	430a      	orrs	r2, r1
 80009b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_MspInit+0x44>)
 80009b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	055b      	lsls	r3, r3, #21
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b099      	sub	sp, #100	@ 0x64
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	234c      	movs	r3, #76	@ 0x4c
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	0018      	movs	r0, r3
 80009de:	2314      	movs	r3, #20
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f003 fcc0 	bl	8004368 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	2418      	movs	r4, #24
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	0018      	movs	r0, r3
 80009ee:	2334      	movs	r3, #52	@ 0x34
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f003 fcb8 	bl	8004368 <memset>
  if(huart->Instance==USART1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	@ (8000b34 <HAL_UART_MspInit+0x164>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d146      	bne.n	8000a90 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 f9bb 	bl	8001d8c <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a1a:	f7ff ffaf 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a1e:	4b46      	ldr	r3, [pc, #280]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a22:	4b45      	ldr	r3, [pc, #276]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	01c9      	lsls	r1, r1, #7
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a2c:	4b42      	ldr	r3, [pc, #264]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000a2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a30:	2380      	movs	r3, #128	@ 0x80
 8000a32:	01db      	lsls	r3, r3, #7
 8000a34:	4013      	ands	r3, r2
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000a40:	2104      	movs	r1, #4
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a46:	4b3c      	ldr	r3, [pc, #240]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a52:	214c      	movs	r1, #76	@ 0x4c
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2230      	movs	r2, #48	@ 0x30
 8000a58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2201      	movs	r2, #1
 8000a70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	4a31      	ldr	r2, [pc, #196]	@ (8000b3c <HAL_UART_MspInit+0x16c>)
 8000a76:	0019      	movs	r1, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f000 faf5 	bl	8001068 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	201b      	movs	r0, #27
 8000a84:	f000 f9f2 	bl	8000e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a88:	201b      	movs	r0, #27
 8000a8a:	f000 fa04 	bl	8000e96 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8e:	e04c      	b.n	8000b2a <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a2a      	ldr	r2, [pc, #168]	@ (8000b40 <HAL_UART_MspInit+0x170>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d147      	bne.n	8000b2a <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a9a:	2118      	movs	r1, #24
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 f96e 	bl	8001d8c <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000ab4:	f7ff ff62 	bl	800097c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000abc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000abe:	2180      	movs	r1, #128	@ 0x80
 8000ac0:	0289      	lsls	r1, r1, #10
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aca:	2380      	movs	r3, #128	@ 0x80
 8000acc:	029b      	lsls	r3, r3, #10
 8000ace:	4013      	ands	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	430a      	orrs	r2, r1
 8000ade:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_UART_MspInit+0x168>)
 8000ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aec:	214c      	movs	r1, #76	@ 0x4c
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	220c      	movs	r2, #12
 8000af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2202      	movs	r2, #2
 8000af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2201      	movs	r2, #1
 8000afe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2201      	movs	r2, #1
 8000b0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	187a      	adds	r2, r7, r1
 8000b0e:	23a0      	movs	r3, #160	@ 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 faa7 	bl	8001068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	201c      	movs	r0, #28
 8000b20:	f000 f9a4 	bl	8000e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b24:	201c      	movs	r0, #28
 8000b26:	f000 f9b6 	bl	8000e96 <HAL_NVIC_EnableIRQ>
}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b019      	add	sp, #100	@ 0x64
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	50000800 	.word	0x50000800
 8000b40:	40004400 	.word	0x40004400

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f8b6 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <USART1_IRQHandler+0x14>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fc14 	bl	80023ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	20000028 	.word	0x20000028

08000b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <USART2_IRQHandler+0x14>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 fc08 	bl	80023ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	200000bc 	.word	0x200000bc

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	@ (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb8:	f7ff fff6 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000be2:	f003 fbc9 	bl	8004378 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000be6:	f7ff fd19 	bl	800061c <main>

08000bea <LoopForever>:

LoopForever:
  b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf8:	08004470 	.word	0x08004470
  ldr r2, =_sbss
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c00:	20000158 	.word	0x20000158

08000c04 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_COMP_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_Init+0x3c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_Init+0x3c>)
 8000c1a:	2180      	movs	r1, #128	@ 0x80
 8000c1c:	0049      	lsls	r1, r1, #1
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f810 	bl	8000c48 <HAL_InitTick>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	e001      	b.n	8000c38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fea8 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_InitTick+0x88>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d02b      	beq.n	8000cb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <HAL_InitTick+0x8c>)
 8000c62:	681c      	ldr	r4, [r3, #0]
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_InitTick+0x88>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	0019      	movs	r1, r3
 8000c6a:	23fa      	movs	r3, #250	@ 0xfa
 8000c6c:	0098      	lsls	r0, r3, #2
 8000c6e:	f7ff fa49 	bl	8000104 <__udivsi3>
 8000c72:	0003      	movs	r3, r0
 8000c74:	0019      	movs	r1, r3
 8000c76:	0020      	movs	r0, r4
 8000c78:	f7ff fa44 	bl	8000104 <__udivsi3>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f919 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d112      	bne.n	8000cae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d80a      	bhi.n	8000ca4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f8e8 	bl	8000e6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_InitTick+0x90>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e00d      	b.n	8000cc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e008      	b.n	8000cc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cae:	230f      	movs	r3, #15
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e003      	b.n	8000cc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	781b      	ldrb	r3, [r3, #0]
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b005      	add	sp, #20
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_IncTick+0x20>)
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000154 	.word	0x20000154

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	@ (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	20000154 	.word	0x20000154

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d26:	d809      	bhi.n	8000d3c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	231f      	movs	r3, #31
 8000d30:	401a      	ands	r2, r3
 8000d32:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <__NVIC_EnableIRQ+0x30>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	4091      	lsls	r1, r2
 8000d38:	000a      	movs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	0002      	movs	r2, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d5c:	d828      	bhi.n	8000db0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e1c <__NVIC_SetPriority+0xd4>)
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	33c0      	adds	r3, #192	@ 0xc0
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	589b      	ldr	r3, [r3, r2]
 8000d6e:	1dfa      	adds	r2, r7, #7
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	0011      	movs	r1, r2
 8000d74:	2203      	movs	r2, #3
 8000d76:	400a      	ands	r2, r1
 8000d78:	00d2      	lsls	r2, r2, #3
 8000d7a:	21ff      	movs	r1, #255	@ 0xff
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	000a      	movs	r2, r1
 8000d80:	43d2      	mvns	r2, r2
 8000d82:	401a      	ands	r2, r3
 8000d84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	019b      	lsls	r3, r3, #6
 8000d8a:	22ff      	movs	r2, #255	@ 0xff
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	0018      	movs	r0, r3
 8000d94:	2303      	movs	r3, #3
 8000d96:	4003      	ands	r3, r0
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9c:	481f      	ldr	r0, [pc, #124]	@ (8000e1c <__NVIC_SetPriority+0xd4>)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	430a      	orrs	r2, r1
 8000da8:	33c0      	adds	r3, #192	@ 0xc0
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dae:	e031      	b.n	8000e14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e20 <__NVIC_SetPriority+0xd8>)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0019      	movs	r1, r3
 8000db8:	230f      	movs	r3, #15
 8000dba:	400b      	ands	r3, r1
 8000dbc:	3b08      	subs	r3, #8
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3306      	adds	r3, #6
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	1dfa      	adds	r2, r7, #7
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	0011      	movs	r1, r2
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	00d2      	lsls	r2, r2, #3
 8000dd6:	21ff      	movs	r1, #255	@ 0xff
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	000a      	movs	r2, r1
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	019b      	lsls	r3, r3, #6
 8000de6:	22ff      	movs	r2, #255	@ 0xff
 8000de8:	401a      	ands	r2, r3
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0018      	movs	r0, r3
 8000df0:	2303      	movs	r3, #3
 8000df2:	4003      	ands	r3, r0
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <__NVIC_SetPriority+0xd8>)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	001c      	movs	r4, r3
 8000e00:	230f      	movs	r3, #15
 8000e02:	4023      	ands	r3, r4
 8000e04:	3b08      	subs	r3, #8
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	3306      	adds	r3, #6
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	18c3      	adds	r3, r0, r3
 8000e10:	3304      	adds	r3, #4
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b003      	add	sp, #12
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	045b      	lsls	r3, r3, #17
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d301      	bcc.n	8000e3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e010      	b.n	8000e5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <SysTick_Config+0x44>)
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	3a01      	subs	r2, #1
 8000e42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e44:	2301      	movs	r3, #1
 8000e46:	425b      	negs	r3, r3
 8000e48:	2103      	movs	r1, #3
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff ff7c 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <SysTick_Config+0x44>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <SysTick_Config+0x44>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	210f      	movs	r1, #15
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	1c02      	adds	r2, r0, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b004      	add	sp, #16
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff ff33 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ffaf 	bl	8000e24 <SysTick_Config>
 8000ec6:	0003      	movs	r3, r0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e050      	b.n	8000f84 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	@ 0x25
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d008      	beq.n	8000f00 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2224      	movs	r2, #36	@ 0x24
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e041      	b.n	8000f84 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	210e      	movs	r1, #14
 8000f0c:	438a      	bics	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	491c      	ldr	r1, [pc, #112]	@ (8000f8c <HAL_DMA_Abort+0xbc>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	438a      	bics	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <HAL_DMA_Abort+0xc0>)
 8000f32:	6859      	ldr	r1, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	221c      	movs	r2, #28
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_DMA_Abort+0xc0>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00c      	beq.n	8000f72 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f62:	490a      	ldr	r1, [pc, #40]	@ (8000f8c <HAL_DMA_Abort+0xbc>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2225      	movs	r2, #37	@ 0x25
 8000f76:	2101      	movs	r1, #1
 8000f78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2224      	movs	r2, #36	@ 0x24
 8000f7e:	2100      	movs	r1, #0
 8000f80:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	fffffeff 	.word	0xfffffeff
 8000f90:	40020000 	.word	0x40020000

08000f94 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2225      	movs	r2, #37	@ 0x25
 8000fa8:	5c9b      	ldrb	r3, [r3, r2]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d006      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	e049      	b.n	8001052 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	210e      	movs	r1, #14
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	438a      	bics	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe8:	491d      	ldr	r1, [pc, #116]	@ (8001060 <HAL_DMA_Abort_IT+0xcc>)
 8000fea:	400a      	ands	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_DMA_Abort_IT+0xd0>)
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	221c      	movs	r2, #28
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <HAL_DMA_Abort_IT+0xd0>)
 8001000:	430a      	orrs	r2, r1
 8001002:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800100c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00c      	beq.n	8001030 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001020:	490f      	ldr	r1, [pc, #60]	@ (8001060 <HAL_DMA_Abort_IT+0xcc>)
 8001022:	400a      	ands	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800102e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2225      	movs	r2, #37	@ 0x25
 8001034:	2101      	movs	r1, #1
 8001036:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2224      	movs	r2, #36	@ 0x24
 800103c:	2100      	movs	r1, #0
 800103e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	0010      	movs	r0, r2
 8001050:	4798      	blx	r3
    }
  }
  return status;
 8001052:	230f      	movs	r3, #15
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	781b      	ldrb	r3, [r3, #0]
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}
 8001060:	fffffeff 	.word	0xfffffeff
 8001064:	40020000 	.word	0x40020000

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001076:	e147      	b.n	8001308 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4091      	lsls	r1, r2
 8001082:	000a      	movs	r2, r1
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d100      	bne.n	8001090 <HAL_GPIO_Init+0x28>
 800108e:	e138      	b.n	8001302 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2203      	movs	r2, #3
 8001096:	4013      	ands	r3, r2
 8001098:	2b01      	cmp	r3, #1
 800109a:	d005      	beq.n	80010a8 <HAL_GPIO_Init+0x40>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d130      	bne.n	800110a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	2201      	movs	r2, #1
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	4013      	ands	r3, r2
 8001112:	2b03      	cmp	r3, #3
 8001114:	d017      	beq.n	8001146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2203      	movs	r2, #3
 800114c:	4013      	ands	r3, r2
 800114e:	2b02      	cmp	r3, #2
 8001150:	d123      	bne.n	800119a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	58d3      	ldr	r3, [r2, r3]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2207      	movs	r2, #7
 8001164:	4013      	ands	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2107      	movs	r1, #7
 800117e:	400b      	ands	r3, r1
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	6939      	ldr	r1, [r7, #16]
 8001198:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	401a      	ands	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	23c0      	movs	r3, #192	@ 0xc0
 80011d4:	029b      	lsls	r3, r3, #10
 80011d6:	4013      	ands	r3, r2
 80011d8:	d100      	bne.n	80011dc <HAL_GPIO_Init+0x174>
 80011da:	e092      	b.n	8001302 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011dc:	4a50      	ldr	r2, [pc, #320]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3318      	adds	r3, #24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	589b      	ldr	r3, [r3, r2]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2203      	movs	r2, #3
 80011ee:	4013      	ands	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	220f      	movs	r2, #15
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	23a0      	movs	r3, #160	@ 0xa0
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	429a      	cmp	r2, r3
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0x1ca>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a45      	ldr	r2, [pc, #276]	@ (8001324 <HAL_GPIO_Init+0x2bc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00d      	beq.n	800122e <HAL_GPIO_Init+0x1c6>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a44      	ldr	r2, [pc, #272]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0x1c2>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a43      	ldr	r2, [pc, #268]	@ (800132c <HAL_GPIO_Init+0x2c4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_GPIO_Init+0x1be>
 8001222:	2303      	movs	r3, #3
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x1cc>
 8001226:	2305      	movs	r3, #5
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x1cc>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x1cc>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x1cc>
 8001232:	2300      	movs	r3, #0
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	2103      	movs	r1, #3
 8001238:	400a      	ands	r2, r1
 800123a:	00d2      	lsls	r2, r2, #3
 800123c:	4093      	lsls	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001244:	4936      	ldr	r1, [pc, #216]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3318      	adds	r3, #24
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001252:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43da      	mvns	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	035b      	lsls	r3, r3, #13
 800126a:	4013      	ands	r3, r2
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800127c:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	039b      	lsls	r3, r3, #14
 8001294:	4013      	ands	r3, r2
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80012a8:	2384      	movs	r3, #132	@ 0x84
 80012aa:	58d3      	ldr	r3, [r2, r3]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43da      	mvns	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012cc:	4914      	ldr	r1, [pc, #80]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80012ce:	2284      	movs	r2, #132	@ 0x84
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012d4:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80012d6:	2380      	movs	r3, #128	@ 0x80
 80012d8:	58d3      	ldr	r3, [r2, r3]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43da      	mvns	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	025b      	lsls	r3, r3, #9
 80012ee:	4013      	ands	r3, r2
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fa:	4909      	ldr	r1, [pc, #36]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80012fc:	2280      	movs	r2, #128	@ 0x80
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	40da      	lsrs	r2, r3
 8001310:	1e13      	subs	r3, r2, #0
 8001312:	d000      	beq.n	8001316 <HAL_GPIO_Init+0x2ae>
 8001314:	e6b0      	b.n	8001078 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b006      	add	sp, #24
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021800 	.word	0x40021800
 8001324:	50000400 	.word	0x50000400
 8001328:	50000800 	.word	0x50000800
 800132c:	50000c00 	.word	0x50000c00

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	0008      	movs	r0, r1
 800133a:	0011      	movs	r1, r2
 800133c:	1cbb      	adds	r3, r7, #2
 800133e:	1c02      	adds	r2, r0, #0
 8001340:	801a      	strh	r2, [r3, #0]
 8001342:	1c7b      	adds	r3, r7, #1
 8001344:	1c0a      	adds	r2, r1, #0
 8001346:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001348:	1c7b      	adds	r3, r7, #1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001350:	1cbb      	adds	r3, r7, #2
 8001352:	881a      	ldrh	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135a:	1cbb      	adds	r3, r7, #2
 800135c:	881a      	ldrh	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800137a:	4013      	ands	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d11f      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	0013      	movs	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	189b      	adds	r3, r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4912      	ldr	r1, [pc, #72]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800139e:	0018      	movs	r0, r3
 80013a0:	f7fe feb0 	bl	8000104 <__udivsi3>
 80013a4:	0003      	movs	r3, r0
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013aa:	e008      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e001      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e009      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	401a      	ands	r2, r3
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d0ed      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b004      	add	sp, #16
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	40007000 	.word	0x40007000
 80013e0:	fffff9ff 	.word	0xfffff9ff
 80013e4:	20000000 	.word	0x20000000
 80013e8:	000f4240 	.word	0x000f4240

080013ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	23e0      	movs	r3, #224	@ 0xe0
 80013f6:	01db      	lsls	r3, r3, #7
 80013f8:	4013      	ands	r3, r2
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e2fe      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4013      	ands	r3, r2
 800141e:	d100      	bne.n	8001422 <HAL_RCC_OscConfig+0x1e>
 8001420:	e07c      	b.n	800151c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001422:	4bc3      	ldr	r3, [pc, #780]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2238      	movs	r2, #56	@ 0x38
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800142c:	4bc0      	ldr	r3, [pc, #768]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2203      	movs	r2, #3
 8001432:	4013      	ands	r3, r2
 8001434:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b10      	cmp	r3, #16
 800143a:	d102      	bne.n	8001442 <HAL_RCC_OscConfig+0x3e>
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d002      	beq.n	8001448 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	2b08      	cmp	r3, #8
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4bb9      	ldr	r3, [pc, #740]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	4013      	ands	r3, r2
 8001452:	d062      	beq.n	800151a <HAL_RCC_OscConfig+0x116>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d15e      	bne.n	800151a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e2d9      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	429a      	cmp	r2, r3
 800146a:	d107      	bne.n	800147c <HAL_RCC_OscConfig+0x78>
 800146c:	4bb0      	ldr	r3, [pc, #704]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4baf      	ldr	r3, [pc, #700]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	0249      	lsls	r1, r1, #9
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e020      	b.n	80014be <HAL_RCC_OscConfig+0xba>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	23a0      	movs	r3, #160	@ 0xa0
 8001482:	02db      	lsls	r3, r3, #11
 8001484:	429a      	cmp	r2, r3
 8001486:	d10e      	bne.n	80014a6 <HAL_RCC_OscConfig+0xa2>
 8001488:	4ba9      	ldr	r3, [pc, #676]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4ba8      	ldr	r3, [pc, #672]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800148e:	2180      	movs	r1, #128	@ 0x80
 8001490:	02c9      	lsls	r1, r1, #11
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	4ba6      	ldr	r3, [pc, #664]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4ba5      	ldr	r3, [pc, #660]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	0249      	lsls	r1, r1, #9
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e00b      	b.n	80014be <HAL_RCC_OscConfig+0xba>
 80014a6:	4ba2      	ldr	r3, [pc, #648]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4ba1      	ldr	r3, [pc, #644]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	49a1      	ldr	r1, [pc, #644]	@ (8001734 <HAL_RCC_OscConfig+0x330>)
 80014ae:	400a      	ands	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	4b9f      	ldr	r3, [pc, #636]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b9e      	ldr	r3, [pc, #632]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	499f      	ldr	r1, [pc, #636]	@ (8001738 <HAL_RCC_OscConfig+0x334>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d014      	beq.n	80014f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fc1b 	bl	8000d00 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fc16 	bl	8000d00 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e298      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	4b93      	ldr	r3, [pc, #588]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	029b      	lsls	r3, r3, #10
 80014ea:	4013      	ands	r3, r2
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0xcc>
 80014ee:	e015      	b.n	800151c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc06 	bl	8000d00 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fa:	f7ff fc01 	bl	8000d00 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b64      	cmp	r3, #100	@ 0x64
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e283      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150c:	4b88      	ldr	r3, [pc, #544]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0xf6>
 8001518:	e000      	b.n	800151c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2202      	movs	r2, #2
 8001522:	4013      	ands	r3, r2
 8001524:	d100      	bne.n	8001528 <HAL_RCC_OscConfig+0x124>
 8001526:	e099      	b.n	800165c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001528:	4b81      	ldr	r3, [pc, #516]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2238      	movs	r2, #56	@ 0x38
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001532:	4b7f      	ldr	r3, [pc, #508]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2203      	movs	r2, #3
 8001538:	4013      	ands	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b10      	cmp	r3, #16
 8001540:	d102      	bne.n	8001548 <HAL_RCC_OscConfig+0x144>
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d002      	beq.n	800154e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d135      	bne.n	80015ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154e:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2380      	movs	r3, #128	@ 0x80
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4013      	ands	r3, r2
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x162>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e256      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b72      	ldr	r3, [pc, #456]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4a74      	ldr	r2, [pc, #464]	@ (800173c <HAL_RCC_OscConfig+0x338>)
 800156c:	4013      	ands	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	021a      	lsls	r2, r3, #8
 8001576:	4b6e      	ldr	r3, [pc, #440]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d112      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001582:	4b6b      	ldr	r3, [pc, #428]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6e      	ldr	r2, [pc, #440]	@ (8001740 <HAL_RCC_OscConfig+0x33c>)
 8001588:	4013      	ands	r3, r2
 800158a:	0019      	movs	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	4b67      	ldr	r3, [pc, #412]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001596:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0adb      	lsrs	r3, r3, #11
 800159c:	2207      	movs	r2, #7
 800159e:	4013      	ands	r3, r2
 80015a0:	4a68      	ldr	r2, [pc, #416]	@ (8001744 <HAL_RCC_OscConfig+0x340>)
 80015a2:	40da      	lsrs	r2, r3
 80015a4:	4b68      	ldr	r3, [pc, #416]	@ (8001748 <HAL_RCC_OscConfig+0x344>)
 80015a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015a8:	4b68      	ldr	r3, [pc, #416]	@ (800174c <HAL_RCC_OscConfig+0x348>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff fb4b 	bl	8000c48 <HAL_InitTick>
 80015b2:	1e03      	subs	r3, r0, #0
 80015b4:	d051      	beq.n	800165a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e22c      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d030      	beq.n	8001624 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001740 <HAL_RCC_OscConfig+0x33c>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	4b57      	ldr	r3, [pc, #348]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015d6:	4b56      	ldr	r3, [pc, #344]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b55      	ldr	r3, [pc, #340]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	2180      	movs	r1, #128	@ 0x80
 80015de:	0049      	lsls	r1, r1, #1
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb8c 	bl	8000d00 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fb87 	bl	8000d00 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e209      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001600:	4b4b      	ldr	r3, [pc, #300]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4013      	ands	r3, r2
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b48      	ldr	r3, [pc, #288]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a4a      	ldr	r2, [pc, #296]	@ (800173c <HAL_RCC_OscConfig+0x338>)
 8001612:	4013      	ands	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	021a      	lsls	r2, r3, #8
 800161c:	4b44      	ldr	r3, [pc, #272]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	e01b      	b.n	800165c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001624:	4b42      	ldr	r3, [pc, #264]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800162a:	4949      	ldr	r1, [pc, #292]	@ (8001750 <HAL_RCC_OscConfig+0x34c>)
 800162c:	400a      	ands	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb66 	bl	8000d00 <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fb61 	bl	8000d00 <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1e3      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800164c:	4b38      	ldr	r3, [pc, #224]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4013      	ands	r3, r2
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x236>
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800165a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2208      	movs	r2, #8
 8001662:	4013      	ands	r3, r2
 8001664:	d047      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001666:	4b32      	ldr	r3, [pc, #200]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2238      	movs	r2, #56	@ 0x38
 800166c:	4013      	ands	r3, r2
 800166e:	2b18      	cmp	r3, #24
 8001670:	d10a      	bne.n	8001688 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001672:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d03c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d138      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e1c5      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d019      	beq.n	80016c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001692:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001694:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001696:	2101      	movs	r1, #1
 8001698:	430a      	orrs	r2, r1
 800169a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff fb30 	bl	8000d00 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff fb2b 	bl	8000d00 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1ad      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016bc:	2202      	movs	r2, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d0f1      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2a2>
 80016c2:	e018      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	438a      	bics	r2, r1
 80016ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb16 	bl	8000d00 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fb11 	bl	8000d00 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e193      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ec:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f1      	bne.n	80016da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2204      	movs	r2, #4
 80016fc:	4013      	ands	r3, r2
 80016fe:	d100      	bne.n	8001702 <HAL_RCC_OscConfig+0x2fe>
 8001700:	e0c6      	b.n	8001890 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001702:	231f      	movs	r3, #31
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2238      	movs	r2, #56	@ 0x38
 8001710:	4013      	ands	r3, r2
 8001712:	2b20      	cmp	r3, #32
 8001714:	d11e      	bne.n	8001754 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_RCC_OscConfig+0x32c>)
 8001718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d100      	bne.n	8001722 <HAL_RCC_OscConfig+0x31e>
 8001720:	e0b6      	b.n	8001890 <HAL_RCC_OscConfig+0x48c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d000      	beq.n	800172c <HAL_RCC_OscConfig+0x328>
 800172a:	e0b1      	b.n	8001890 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e171      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
 8001730:	40021000 	.word	0x40021000
 8001734:	fffeffff 	.word	0xfffeffff
 8001738:	fffbffff 	.word	0xfffbffff
 800173c:	ffff80ff 	.word	0xffff80ff
 8001740:	ffffc7ff 	.word	0xffffc7ff
 8001744:	00f42400 	.word	0x00f42400
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004
 8001750:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001754:	4bb1      	ldr	r3, [pc, #708]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	055b      	lsls	r3, r3, #21
 800175c:	4013      	ands	r3, r2
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x360>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x362>
 8001764:	2300      	movs	r3, #0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d011      	beq.n	800178e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4bac      	ldr	r3, [pc, #688]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800176c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800176e:	4bab      	ldr	r3, [pc, #684]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	0549      	lsls	r1, r1, #21
 8001774:	430a      	orrs	r2, r1
 8001776:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001778:	4ba8      	ldr	r3, [pc, #672]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800177a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800177c:	2380      	movs	r3, #128	@ 0x80
 800177e:	055b      	lsls	r3, r3, #21
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001786:	231f      	movs	r3, #31
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178e:	4ba4      	ldr	r3, [pc, #656]	@ (8001a20 <HAL_RCC_OscConfig+0x61c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2380      	movs	r3, #128	@ 0x80
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4013      	ands	r3, r2
 8001798:	d11a      	bne.n	80017d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800179a:	4ba1      	ldr	r3, [pc, #644]	@ (8001a20 <HAL_RCC_OscConfig+0x61c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4ba0      	ldr	r3, [pc, #640]	@ (8001a20 <HAL_RCC_OscConfig+0x61c>)
 80017a0:	2180      	movs	r1, #128	@ 0x80
 80017a2:	0049      	lsls	r1, r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80017a8:	f7ff faaa 	bl	8000d00 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff faa5 	bl	8000d00 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e127      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c4:	4b96      	ldr	r3, [pc, #600]	@ (8001a20 <HAL_RCC_OscConfig+0x61c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3e2>
 80017d8:	4b90      	ldr	r3, [pc, #576]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80017da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017dc:	4b8f      	ldr	r3, [pc, #572]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017e4:	e01c      	b.n	8001820 <HAL_RCC_OscConfig+0x41c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x404>
 80017ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80017f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017f2:	4b8a      	ldr	r3, [pc, #552]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80017f4:	2104      	movs	r1, #4
 80017f6:	430a      	orrs	r2, r1
 80017f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017fa:	4b88      	ldr	r3, [pc, #544]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80017fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017fe:	4b87      	ldr	r3, [pc, #540]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001800:	2101      	movs	r1, #1
 8001802:	430a      	orrs	r2, r1
 8001804:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0x41c>
 8001808:	4b84      	ldr	r3, [pc, #528]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800180a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800180c:	4b83      	ldr	r3, [pc, #524]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800180e:	2101      	movs	r1, #1
 8001810:	438a      	bics	r2, r1
 8001812:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001814:	4b81      	ldr	r3, [pc, #516]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001816:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001818:	4b80      	ldr	r3, [pc, #512]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800181a:	2104      	movs	r1, #4
 800181c:	438a      	bics	r2, r1
 800181e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d014      	beq.n	8001852 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fa6a 	bl	8000d00 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001830:	e009      	b.n	8001846 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fa65 	bl	8000d00 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4a79      	ldr	r2, [pc, #484]	@ (8001a24 <HAL_RCC_OscConfig+0x620>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e0e6      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001846:	4b75      	ldr	r3, [pc, #468]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184a:	2202      	movs	r2, #2
 800184c:	4013      	ands	r3, r2
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x42e>
 8001850:	e013      	b.n	800187a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff fa55 	bl	8000d00 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800185a:	e009      	b.n	8001870 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff fa50 	bl	8000d00 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	4a6f      	ldr	r2, [pc, #444]	@ (8001a24 <HAL_RCC_OscConfig+0x620>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0d1      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	4b6a      	ldr	r3, [pc, #424]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001874:	2202      	movs	r2, #2
 8001876:	4013      	ands	r3, r2
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800187a:	231f      	movs	r3, #31
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b65      	ldr	r3, [pc, #404]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001888:	4b64      	ldr	r3, [pc, #400]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800188a:	4967      	ldr	r1, [pc, #412]	@ (8001a28 <HAL_RCC_OscConfig+0x624>)
 800188c:	400a      	ands	r2, r1
 800188e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d100      	bne.n	800189a <HAL_RCC_OscConfig+0x496>
 8001898:	e0bb      	b.n	8001a12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189a:	4b60      	ldr	r3, [pc, #384]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2238      	movs	r2, #56	@ 0x38
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d100      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4a4>
 80018a6:	e07b      	b.n	80019a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d156      	bne.n	800195e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b59      	ldr	r3, [pc, #356]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80018b6:	495d      	ldr	r1, [pc, #372]	@ (8001a2c <HAL_RCC_OscConfig+0x628>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fa20 	bl	8000d00 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fa1b 	bl	8000d00 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e09d      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	4b50      	ldr	r3, [pc, #320]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	049b      	lsls	r3, r3, #18
 80018e0:	4013      	ands	r3, r2
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	4b4d      	ldr	r3, [pc, #308]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a51      	ldr	r2, [pc, #324]	@ (8001a30 <HAL_RCC_OscConfig+0x62c>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1a      	ldr	r2, [r3, #32]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001910:	431a      	orrs	r2, r3
 8001912:	4b42      	ldr	r3, [pc, #264]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800191e:	2180      	movs	r1, #128	@ 0x80
 8001920:	0449      	lsls	r1, r1, #17
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001926:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	0549      	lsls	r1, r1, #21
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f9e4 	bl	8000d00 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f9df 	bl	8000d00 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e061      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001950:	4b32      	ldr	r3, [pc, #200]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	049b      	lsls	r3, r3, #18
 8001958:	4013      	ands	r3, r2
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x53a>
 800195c:	e059      	b.n	8001a12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001964:	4931      	ldr	r1, [pc, #196]	@ (8001a2c <HAL_RCC_OscConfig+0x628>)
 8001966:	400a      	ands	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff f9c9 	bl	8000d00 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f9c4 	bl	8000d00 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e046      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001986:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	049b      	lsls	r3, r3, #18
 800198e:	4013      	ands	r3, r2
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001992:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 8001998:	4926      	ldr	r1, [pc, #152]	@ (8001a34 <HAL_RCC_OscConfig+0x630>)
 800199a:	400a      	ands	r2, r1
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	e038      	b.n	8001a12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e033      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <HAL_RCC_OscConfig+0x618>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2203      	movs	r2, #3
 80019b6:	401a      	ands	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d126      	bne.n	8001a0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2270      	movs	r2, #112	@ 0x70
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d11f      	bne.n	8001a0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	23fe      	movs	r3, #254	@ 0xfe
 80019d2:	01db      	lsls	r3, r3, #7
 80019d4:	401a      	ands	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d116      	bne.n	8001a0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	23f8      	movs	r3, #248	@ 0xf8
 80019e4:	039b      	lsls	r3, r3, #14
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d10e      	bne.n	8001a0e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	23e0      	movs	r3, #224	@ 0xe0
 80019f4:	051b      	lsls	r3, r3, #20
 80019f6:	401a      	ands	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	0f5b      	lsrs	r3, r3, #29
 8001a04:	075a      	lsls	r2, r3, #29
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b008      	add	sp, #32
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	00001388 	.word	0x00001388
 8001a28:	efffffff 	.word	0xefffffff
 8001a2c:	feffffff 	.word	0xfeffffff
 8001a30:	11c1808c 	.word	0x11c1808c
 8001a34:	eefefffc 	.word	0xeefefffc

08001a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0e9      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b76      	ldr	r3, [pc, #472]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2207      	movs	r2, #7
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d91e      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b73      	ldr	r3, [pc, #460]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2207      	movs	r2, #7
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	4b70      	ldr	r3, [pc, #448]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a6c:	f7ff f948 	bl	8000d00 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a74:	e009      	b.n	8001a8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a76:	f7ff f943 	bl	8000d00 <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	4a6a      	ldr	r2, [pc, #424]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0ca      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a8a:	4b67      	ldr	r3, [pc, #412]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2207      	movs	r2, #7
 8001a90:	4013      	ands	r3, r2
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1ee      	bne.n	8001a76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d015      	beq.n	8001ace <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d006      	beq.n	8001aba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001aac:	4b60      	ldr	r3, [pc, #384]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab2:	21e0      	movs	r1, #224	@ 0xe0
 8001ab4:	01c9      	lsls	r1, r1, #7
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aba:	4b5d      	ldr	r3, [pc, #372]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4a5d      	ldr	r2, [pc, #372]	@ (8001c34 <HAL_RCC_ClockConfig+0x1fc>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	4b59      	ldr	r3, [pc, #356]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001aca:	430a      	orrs	r2, r1
 8001acc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d057      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae0:	4b53      	ldr	r3, [pc, #332]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	029b      	lsls	r3, r3, #10
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d12b      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e097      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	049b      	lsls	r3, r3, #18
 8001b00:	4013      	ands	r3, r2
 8001b02:	d11f      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e08b      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b10:	4b47      	ldr	r3, [pc, #284]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d113      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e07f      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b28:	4b41      	ldr	r3, [pc, #260]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d108      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e074      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b36:	4b3e      	ldr	r3, [pc, #248]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e06d      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b44:	4b3a      	ldr	r3, [pc, #232]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2207      	movs	r2, #7
 8001b4a:	4393      	bics	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4b37      	ldr	r3, [pc, #220]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff f8d2 	bl	8000d00 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b60:	e009      	b.n	8001b76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b62:	f7ff f8cd 	bl	8000d00 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e054      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2e      	ldr	r3, [pc, #184]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2238      	movs	r2, #56	@ 0x38
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1ec      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b27      	ldr	r3, [pc, #156]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4013      	ands	r3, r2
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d21e      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff f8aa 	bl	8000d00 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7ff f8a5 	bl	8000d00 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e02c      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2207      	movs	r2, #7
 8001bcc:	4013      	ands	r3, r2
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4a15      	ldr	r2, [pc, #84]	@ (8001c38 <HAL_RCC_ClockConfig+0x200>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bf2:	f000 f829 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001bf6:	0001      	movs	r1, r0
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	220f      	movs	r2, #15
 8001c00:	401a      	ands	r2, r3
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_RCC_ClockConfig+0x204>)
 8001c04:	0092      	lsls	r2, r2, #2
 8001c06:	58d3      	ldr	r3, [r2, r3]
 8001c08:	221f      	movs	r2, #31
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	40da      	lsrs	r2, r3
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_RCC_ClockConfig+0x208>)
 8001c12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_RCC_ClockConfig+0x20c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff f815 	bl	8000c48 <HAL_InitTick>
 8001c1e:	0003      	movs	r3, r0
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b004      	add	sp, #16
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	00001388 	.word	0x00001388
 8001c30:	40021000 	.word	0x40021000
 8001c34:	fffff0ff 	.word	0xfffff0ff
 8001c38:	ffff8fff 	.word	0xffff8fff
 8001c3c:	080043d8 	.word	0x080043d8
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2238      	movs	r2, #56	@ 0x38
 8001c54:	4013      	ands	r3, r2
 8001c56:	d10f      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c58:	4b39      	ldr	r3, [pc, #228]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0adb      	lsrs	r3, r3, #11
 8001c5e:	2207      	movs	r2, #7
 8001c60:	4013      	ands	r3, r2
 8001c62:	2201      	movs	r2, #1
 8001c64:	409a      	lsls	r2, r3
 8001c66:	0013      	movs	r3, r2
 8001c68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	4835      	ldr	r0, [pc, #212]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c6e:	f7fe fa49 	bl	8000104 <__udivsi3>
 8001c72:	0003      	movs	r3, r0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e05d      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c78:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2238      	movs	r2, #56	@ 0x38
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c84:	4b30      	ldr	r3, [pc, #192]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	e054      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2238      	movs	r2, #56	@ 0x38
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d138      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c96:	4b2a      	ldr	r3, [pc, #168]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ca0:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	4013      	ands	r3, r2
 8001caa:	3301      	adds	r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	4824      	ldr	r0, [pc, #144]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cb8:	f7fe fa24 	bl	8000104 <__udivsi3>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	227f      	movs	r2, #127	@ 0x7f
 8001cc8:	4013      	ands	r3, r2
 8001cca:	434b      	muls	r3, r1
 8001ccc:	617b      	str	r3, [r7, #20]
        break;
 8001cce:	e00d      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	481c      	ldr	r0, [pc, #112]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cd4:	f7fe fa16 	bl	8000104 <__udivsi3>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	0019      	movs	r1, r3
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	227f      	movs	r2, #127	@ 0x7f
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	434b      	muls	r3, r1
 8001ce8:	617b      	str	r3, [r7, #20]
        break;
 8001cea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0f5b      	lsrs	r3, r3, #29
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	6978      	ldr	r0, [r7, #20]
 8001cfe:	f7fe fa01 	bl	8000104 <__udivsi3>
 8001d02:	0003      	movs	r3, r0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	e015      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d08:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2238      	movs	r2, #56	@ 0x38
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d103      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2238      	movs	r2, #56	@ 0x38
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b18      	cmp	r3, #24
 8001d26:	d103      	bne.n	8001d30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d28:	23fa      	movs	r3, #250	@ 0xfa
 8001d2a:	01db      	lsls	r3, r3, #7
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	e001      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d34:	693b      	ldr	r3, [r7, #16]
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b006      	add	sp, #24
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	40021000 	.word	0x40021000
 8001d44:	00f42400 	.word	0x00f42400
 8001d48:	007a1200 	.word	0x007a1200

08001d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d50:	4b02      	ldr	r3, [pc, #8]	@ (8001d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	20000000 	.word	0x20000000

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d64:	f7ff fff2 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d68:	0004      	movs	r4, r0
 8001d6a:	f7ff fb3f 	bl	80013ec <LL_RCC_GetAPB1Prescaler>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	0b1a      	lsrs	r2, r3, #12
 8001d72:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	58d3      	ldr	r3, [r2, r3]
 8001d78:	221f      	movs	r2, #31
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	40dc      	lsrs	r4, r3
 8001d7e:	0023      	movs	r3, r4
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	08004418 	.word	0x08004418

08001d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d94:	2313      	movs	r3, #19
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d9c:	2312      	movs	r3, #18
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	d100      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001db0:	e0a3      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2011      	movs	r0, #17
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4bc3      	ldr	r3, [pc, #780]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	055b      	lsls	r3, r3, #21
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d110      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4bc0      	ldr	r3, [pc, #768]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dca:	4bbf      	ldr	r3, [pc, #764]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	0549      	lsls	r1, r1, #21
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dd4:	4bbc      	ldr	r3, [pc, #752]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	055b      	lsls	r3, r3, #21
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de8:	4bb8      	ldr	r3, [pc, #736]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4bb7      	ldr	r3, [pc, #732]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dee:	2180      	movs	r1, #128	@ 0x80
 8001df0:	0049      	lsls	r1, r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001df6:	f7fe ff83 	bl	8000d00 <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e00:	f7fe ff7e 	bl	8000d00 <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d904      	bls.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e0e:	2313      	movs	r3, #19
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	2203      	movs	r2, #3
 8001e14:	701a      	strb	r2, [r3, #0]
        break;
 8001e16:	e005      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e18:	4bac      	ldr	r3, [pc, #688]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0ed      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e24:	2313      	movs	r3, #19
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d154      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e2e:	4ba6      	ldr	r3, [pc, #664]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e32:	23c0      	movs	r3, #192	@ 0xc0
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d019      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d014      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e4a:	4b9f      	ldr	r3, [pc, #636]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4e:	4aa0      	ldr	r2, [pc, #640]	@ (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e54:	4b9c      	ldr	r3, [pc, #624]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e58:	4b9b      	ldr	r3, [pc, #620]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5a:	2180      	movs	r1, #128	@ 0x80
 8001e5c:	0249      	lsls	r1, r1, #9
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e62:	4b99      	ldr	r3, [pc, #612]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e66:	4b98      	ldr	r3, [pc, #608]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e68:	499a      	ldr	r1, [pc, #616]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e6e:	4b96      	ldr	r3, [pc, #600]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2201      	movs	r2, #1
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d016      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe ff40 	bl	8000d00 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e84:	e00c      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe ff3b 	bl	8000d00 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a91      	ldr	r2, [pc, #580]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d904      	bls.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e96:	2313      	movs	r3, #19
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	701a      	strb	r2, [r3, #0]
            break;
 8001e9e:	e004      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea0:	4b89      	ldr	r3, [pc, #548]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d0ed      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001eaa:	2313      	movs	r3, #19
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eb4:	4b84      	ldr	r3, [pc, #528]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb8:	4a85      	ldr	r2, [pc, #532]	@ (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ec2:	4b81      	ldr	r3, [pc, #516]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ec8:	e00c      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eca:	2312      	movs	r3, #18
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2213      	movs	r2, #19
 8001ed0:	18ba      	adds	r2, r7, r2
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e005      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2213      	movs	r2, #19
 8001ede:	18ba      	adds	r2, r7, r2
 8001ee0:	7812      	ldrb	r2, [r2, #0]
 8001ee2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ee4:	2311      	movs	r3, #17
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d105      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4b76      	ldr	r3, [pc, #472]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ef2:	4b75      	ldr	r3, [pc, #468]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef4:	4979      	ldr	r1, [pc, #484]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f04:	4b70      	ldr	r3, [pc, #448]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4b6d      	ldr	r3, [pc, #436]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f22:	4b69      	ldr	r3, [pc, #420]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	220c      	movs	r2, #12
 8001f28:	4393      	bics	r3, r2
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	4b65      	ldr	r3, [pc, #404]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f32:	430a      	orrs	r2, r1
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f40:	4b61      	ldr	r3, [pc, #388]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f44:	4a66      	ldr	r2, [pc, #408]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b5e      	ldr	r3, [pc, #376]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	@ 0x80
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f60:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f64:	4a5f      	ldr	r2, [pc, #380]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	4b56      	ldr	r3, [pc, #344]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f80:	4b51      	ldr	r3, [pc, #324]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f84:	4a58      	ldr	r2, [pc, #352]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	4a52      	ldr	r2, [pc, #328]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	01db      	lsls	r3, r3, #7
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d015      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	0899      	lsrs	r1, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	05db      	lsls	r3, r3, #23
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe2:	2180      	movs	r1, #128	@ 0x80
 8001fe4:	0249      	lsls	r1, r1, #9
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	031b      	lsls	r3, r3, #12
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ff6:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffa:	2240      	movs	r2, #64	@ 0x40
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002004:	4b30      	ldr	r3, [pc, #192]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002006:	430a      	orrs	r2, r1
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	039b      	lsls	r3, r3, #14
 8002012:	4013      	ands	r3, r2
 8002014:	d016      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002016:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	4a35      	ldr	r2, [pc, #212]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800201c:	4013      	ands	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002024:	4b28      	ldr	r3, [pc, #160]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002026:	430a      	orrs	r2, r1
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	03db      	lsls	r3, r3, #15
 8002032:	429a      	cmp	r2, r3
 8002034:	d106      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002036:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800203c:	2180      	movs	r1, #128	@ 0x80
 800203e:	0449      	lsls	r1, r1, #17
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	03db      	lsls	r3, r3, #15
 800204c:	4013      	ands	r3, r2
 800204e:	d016      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	4a27      	ldr	r2, [pc, #156]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800205e:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002060:	430a      	orrs	r2, r1
 8002062:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	045b      	lsls	r3, r3, #17
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002076:	2180      	movs	r1, #128	@ 0x80
 8002078:	0449      	lsls	r1, r1, #17
 800207a:	430a      	orrs	r2, r1
 800207c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4013      	ands	r3, r2
 8002088:	d016      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	4a1a      	ldr	r2, [pc, #104]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002090:	4013      	ands	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209a:	430a      	orrs	r2, r1
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	01db      	lsls	r3, r3, #7
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d106      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020aa:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020b0:	2180      	movs	r1, #128	@ 0x80
 80020b2:	0249      	lsls	r1, r1, #9
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80020b8:	2312      	movs	r3, #18
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b006      	add	sp, #24
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	fffffcff 	.word	0xfffffcff
 80020d4:	fffeffff 	.word	0xfffeffff
 80020d8:	00001388 	.word	0x00001388
 80020dc:	efffffff 	.word	0xefffffff
 80020e0:	fffff3ff 	.word	0xfffff3ff
 80020e4:	fff3ffff 	.word	0xfff3ffff
 80020e8:	ffcfffff 	.word	0xffcfffff
 80020ec:	ffffcfff 	.word	0xffffcfff
 80020f0:	ffbfffff 	.word	0xffbfffff
 80020f4:	feffffff 	.word	0xfeffffff
 80020f8:	ffff3fff 	.word	0xffff3fff

080020fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e046      	b.n	800219c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2288      	movs	r2, #136	@ 0x88
 8002112:	589b      	ldr	r3, [r3, r2]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2284      	movs	r2, #132	@ 0x84
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0018      	movs	r0, r3
 8002124:	f7fe fc54 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2288      	movs	r2, #136	@ 0x88
 800212c:	2124      	movs	r1, #36	@ 0x24
 800212e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0018      	movs	r0, r3
 800214c:	f000 ff2e 	bl	8002fac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fc6c 	bl	8002a30 <UART_SetConfig>
 8002158:	0003      	movs	r3, r0
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e01c      	b.n	800219c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	490d      	ldr	r1, [pc, #52]	@ (80021a4 <HAL_UART_Init+0xa8>)
 800216e:	400a      	ands	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	212a      	movs	r1, #42	@ 0x2a
 800217e:	438a      	bics	r2, r1
 8002180:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f000 ffbd 	bl	8003114 <UART_CheckIdleState>
 800219a:	0003      	movs	r3, r0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	ffffb7ff 	.word	0xffffb7ff

080021a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	1dbb      	adds	r3, r7, #6
 80021b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2288      	movs	r2, #136	@ 0x88
 80021bc:	589b      	ldr	r3, [r3, r2]
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d000      	beq.n	80021c4 <HAL_UART_Transmit+0x1c>
 80021c2:	e090      	b.n	80022e6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_UART_Transmit+0x2a>
 80021ca:	1dbb      	adds	r3, r7, #6
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e088      	b.n	80022e8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	015b      	lsls	r3, r3, #5
 80021de:	429a      	cmp	r2, r3
 80021e0:	d109      	bne.n	80021f6 <HAL_UART_Transmit+0x4e>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d001      	beq.n	80021f6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e078      	b.n	80022e8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2290      	movs	r2, #144	@ 0x90
 80021fa:	2100      	movs	r1, #0
 80021fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2288      	movs	r2, #136	@ 0x88
 8002202:	2121      	movs	r1, #33	@ 0x21
 8002204:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002206:	f7fe fd7b 	bl	8000d00 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1dba      	adds	r2, r7, #6
 8002212:	2154      	movs	r1, #84	@ 0x54
 8002214:	8812      	ldrh	r2, [r2, #0]
 8002216:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1dba      	adds	r2, r7, #6
 800221c:	2156      	movs	r1, #86	@ 0x56
 800221e:	8812      	ldrh	r2, [r2, #0]
 8002220:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	2380      	movs	r3, #128	@ 0x80
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	429a      	cmp	r2, r3
 800222c:	d108      	bne.n	8002240 <HAL_UART_Transmit+0x98>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d104      	bne.n	8002240 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	e003      	b.n	8002248 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002248:	e030      	b.n	80022ac <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	0013      	movs	r3, r2
 8002254:	2200      	movs	r2, #0
 8002256:	2180      	movs	r1, #128	@ 0x80
 8002258:	f001 f806 	bl	8003268 <UART_WaitOnFlagUntilTimeout>
 800225c:	1e03      	subs	r3, r0, #0
 800225e:	d005      	beq.n	800226c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2288      	movs	r2, #136	@ 0x88
 8002264:	2120      	movs	r1, #32
 8002266:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e03d      	b.n	80022e8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10b      	bne.n	800228a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	001a      	movs	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	05d2      	lsls	r2, r2, #23
 800227e:	0dd2      	lsrs	r2, r2, #23
 8002280:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	3302      	adds	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	e007      	b.n	800229a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3301      	adds	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2256      	movs	r2, #86	@ 0x56
 800229e:	5a9b      	ldrh	r3, [r3, r2]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b299      	uxth	r1, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2256      	movs	r2, #86	@ 0x56
 80022aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2256      	movs	r2, #86	@ 0x56
 80022b0:	5a9b      	ldrh	r3, [r3, r2]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1c8      	bne.n	800224a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	0013      	movs	r3, r2
 80022c2:	2200      	movs	r2, #0
 80022c4:	2140      	movs	r1, #64	@ 0x40
 80022c6:	f000 ffcf 	bl	8003268 <UART_WaitOnFlagUntilTimeout>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2288      	movs	r2, #136	@ 0x88
 80022d2:	2120      	movs	r1, #32
 80022d4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e006      	b.n	80022e8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2288      	movs	r2, #136	@ 0x88
 80022de:	2120      	movs	r1, #32
 80022e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
  }
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b008      	add	sp, #32
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	1dbb      	adds	r3, r7, #6
 80022fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	228c      	movs	r2, #140	@ 0x8c
 8002302:	589b      	ldr	r3, [r3, r2]
 8002304:	2b20      	cmp	r3, #32
 8002306:	d14a      	bne.n	800239e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_UART_Receive_IT+0x26>
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e042      	b.n	80023a0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	015b      	lsls	r3, r3, #5
 8002322:	429a      	cmp	r2, r3
 8002324:	d109      	bne.n	800233a <HAL_UART_Receive_IT+0x4a>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	d001      	beq.n	800233a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e032      	b.n	80023a0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a18      	ldr	r2, [pc, #96]	@ (80023a8 <HAL_UART_Receive_IT+0xb8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d020      	beq.n	800238c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	4013      	ands	r3, r2
 8002356:	d019      	beq.n	800238c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002358:	f3ef 8310 	mrs	r3, PRIMASK
 800235c:	613b      	str	r3, [r7, #16]
  return(result);
 800235e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	2301      	movs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f383 8810 	msr	PRIMASK, r3
}
 800236c:	46c0      	nop			@ (mov r8, r8)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2180      	movs	r1, #128	@ 0x80
 800237a:	04c9      	lsls	r1, r1, #19
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f383 8810 	msr	PRIMASK, r3
}
 800238a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800238c:	1dbb      	adds	r3, r7, #6
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0018      	movs	r0, r3
 8002396:	f000 ffd7 	bl	8003348 <UART_Start_Receive_IT>
 800239a:	0003      	movs	r3, r0
 800239c:	e000      	b.n	80023a0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b008      	add	sp, #32
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40008000 	.word	0x40008000

080023ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b0aa      	sub	sp, #168	@ 0xa8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	22a4      	movs	r2, #164	@ 0xa4
 80023bc:	18b9      	adds	r1, r7, r2
 80023be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	20a0      	movs	r0, #160	@ 0xa0
 80023c8:	1839      	adds	r1, r7, r0
 80023ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	249c      	movs	r4, #156	@ 0x9c
 80023d4:	1939      	adds	r1, r7, r4
 80023d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023d8:	0011      	movs	r1, r2
 80023da:	18bb      	adds	r3, r7, r2
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4aa2      	ldr	r2, [pc, #648]	@ (8002668 <HAL_UART_IRQHandler+0x2bc>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	2298      	movs	r2, #152	@ 0x98
 80023e4:	18bd      	adds	r5, r7, r2
 80023e6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80023e8:	18bb      	adds	r3, r7, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11a      	bne.n	8002426 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2220      	movs	r2, #32
 80023f6:	4013      	ands	r3, r2
 80023f8:	d015      	beq.n	8002426 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2220      	movs	r2, #32
 8002400:	4013      	ands	r3, r2
 8002402:	d105      	bne.n	8002410 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002404:	193b      	adds	r3, r7, r4
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	055b      	lsls	r3, r3, #21
 800240c:	4013      	ands	r3, r2
 800240e:	d00a      	beq.n	8002426 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002414:	2b00      	cmp	r3, #0
 8002416:	d100      	bne.n	800241a <HAL_UART_IRQHandler+0x6e>
 8002418:	e2dc      	b.n	80029d4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	0010      	movs	r0, r2
 8002422:	4798      	blx	r3
      }
      return;
 8002424:	e2d6      	b.n	80029d4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002426:	2398      	movs	r3, #152	@ 0x98
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d100      	bne.n	8002432 <HAL_UART_IRQHandler+0x86>
 8002430:	e122      	b.n	8002678 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002432:	239c      	movs	r3, #156	@ 0x9c
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a8c      	ldr	r2, [pc, #560]	@ (800266c <HAL_UART_IRQHandler+0x2c0>)
 800243a:	4013      	ands	r3, r2
 800243c:	d106      	bne.n	800244c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800243e:	23a0      	movs	r3, #160	@ 0xa0
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a8a      	ldr	r2, [pc, #552]	@ (8002670 <HAL_UART_IRQHandler+0x2c4>)
 8002446:	4013      	ands	r3, r2
 8002448:	d100      	bne.n	800244c <HAL_UART_IRQHandler+0xa0>
 800244a:	e115      	b.n	8002678 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800244c:	23a4      	movs	r3, #164	@ 0xa4
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	d012      	beq.n	800247e <HAL_UART_IRQHandler+0xd2>
 8002458:	23a0      	movs	r3, #160	@ 0xa0
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d00b      	beq.n	800247e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2290      	movs	r2, #144	@ 0x90
 8002472:	589b      	ldr	r3, [r3, r2]
 8002474:	2201      	movs	r2, #1
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2190      	movs	r1, #144	@ 0x90
 800247c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800247e:	23a4      	movs	r3, #164	@ 0xa4
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2202      	movs	r2, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d011      	beq.n	80024ae <HAL_UART_IRQHandler+0x102>
 800248a:	239c      	movs	r3, #156	@ 0x9c
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	d00b      	beq.n	80024ae <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2202      	movs	r2, #2
 800249c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2290      	movs	r2, #144	@ 0x90
 80024a2:	589b      	ldr	r3, [r3, r2]
 80024a4:	2204      	movs	r2, #4
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2190      	movs	r1, #144	@ 0x90
 80024ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024ae:	23a4      	movs	r3, #164	@ 0xa4
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2204      	movs	r2, #4
 80024b6:	4013      	ands	r3, r2
 80024b8:	d011      	beq.n	80024de <HAL_UART_IRQHandler+0x132>
 80024ba:	239c      	movs	r3, #156	@ 0x9c
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00b      	beq.n	80024de <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2204      	movs	r2, #4
 80024cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2290      	movs	r2, #144	@ 0x90
 80024d2:	589b      	ldr	r3, [r3, r2]
 80024d4:	2202      	movs	r2, #2
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2190      	movs	r1, #144	@ 0x90
 80024dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024de:	23a4      	movs	r3, #164	@ 0xa4
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2208      	movs	r2, #8
 80024e6:	4013      	ands	r3, r2
 80024e8:	d017      	beq.n	800251a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024ea:	23a0      	movs	r3, #160	@ 0xa0
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2220      	movs	r2, #32
 80024f2:	4013      	ands	r3, r2
 80024f4:	d105      	bne.n	8002502 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80024f6:	239c      	movs	r3, #156	@ 0x9c
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a5b      	ldr	r2, [pc, #364]	@ (800266c <HAL_UART_IRQHandler+0x2c0>)
 80024fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002500:	d00b      	beq.n	800251a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2208      	movs	r2, #8
 8002508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2290      	movs	r2, #144	@ 0x90
 800250e:	589b      	ldr	r3, [r3, r2]
 8002510:	2208      	movs	r2, #8
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2190      	movs	r1, #144	@ 0x90
 8002518:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800251a:	23a4      	movs	r3, #164	@ 0xa4
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	4013      	ands	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_UART_IRQHandler+0x1a4>
 8002528:	23a0      	movs	r3, #160	@ 0xa0
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	04db      	lsls	r3, r3, #19
 8002532:	4013      	ands	r3, r2
 8002534:	d00c      	beq.n	8002550 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2280      	movs	r2, #128	@ 0x80
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2290      	movs	r2, #144	@ 0x90
 8002544:	589b      	ldr	r3, [r3, r2]
 8002546:	2220      	movs	r2, #32
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2190      	movs	r1, #144	@ 0x90
 800254e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2290      	movs	r2, #144	@ 0x90
 8002554:	589b      	ldr	r3, [r3, r2]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d100      	bne.n	800255c <HAL_UART_IRQHandler+0x1b0>
 800255a:	e23d      	b.n	80029d8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800255c:	23a4      	movs	r3, #164	@ 0xa4
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2220      	movs	r2, #32
 8002564:	4013      	ands	r3, r2
 8002566:	d015      	beq.n	8002594 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002568:	23a0      	movs	r3, #160	@ 0xa0
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2220      	movs	r2, #32
 8002570:	4013      	ands	r3, r2
 8002572:	d106      	bne.n	8002582 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002574:	239c      	movs	r3, #156	@ 0x9c
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	055b      	lsls	r3, r3, #21
 800257e:	4013      	ands	r3, r2
 8002580:	d008      	beq.n	8002594 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	0010      	movs	r0, r2
 8002592:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2290      	movs	r2, #144	@ 0x90
 8002598:	589b      	ldr	r3, [r3, r2]
 800259a:	2194      	movs	r1, #148	@ 0x94
 800259c:	187a      	adds	r2, r7, r1
 800259e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2240      	movs	r2, #64	@ 0x40
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b40      	cmp	r3, #64	@ 0x40
 80025ac:	d004      	beq.n	80025b8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2228      	movs	r2, #40	@ 0x28
 80025b4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025b6:	d04c      	beq.n	8002652 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 ffe8 	bl	8003590 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2240      	movs	r2, #64	@ 0x40
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b40      	cmp	r3, #64	@ 0x40
 80025cc:	d13c      	bne.n	8002648 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ce:	f3ef 8310 	mrs	r3, PRIMASK
 80025d2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80025d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d6:	2090      	movs	r0, #144	@ 0x90
 80025d8:	183a      	adds	r2, r7, r0
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	2301      	movs	r3, #1
 80025de:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025e2:	f383 8810 	msr	PRIMASK, r3
}
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2140      	movs	r1, #64	@ 0x40
 80025f4:	438a      	bics	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	183b      	adds	r3, r7, r0
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002600:	f383 8810 	msr	PRIMASK, r3
}
 8002604:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2280      	movs	r2, #128	@ 0x80
 800260a:	589b      	ldr	r3, [r3, r2]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d016      	beq.n	800263e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2280      	movs	r2, #128	@ 0x80
 8002614:	589b      	ldr	r3, [r3, r2]
 8002616:	4a17      	ldr	r2, [pc, #92]	@ (8002674 <HAL_UART_IRQHandler+0x2c8>)
 8002618:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2280      	movs	r2, #128	@ 0x80
 800261e:	589b      	ldr	r3, [r3, r2]
 8002620:	0018      	movs	r0, r3
 8002622:	f7fe fcb7 	bl	8000f94 <HAL_DMA_Abort_IT>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d01c      	beq.n	8002664 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2280      	movs	r2, #128	@ 0x80
 800262e:	589b      	ldr	r3, [r3, r2]
 8002630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	2180      	movs	r1, #128	@ 0x80
 8002636:	5852      	ldr	r2, [r2, r1]
 8002638:	0010      	movs	r0, r2
 800263a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	e012      	b.n	8002664 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f000 f9e1 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002646:	e00d      	b.n	8002664 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f9dc 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e008      	b.n	8002664 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 f9d7 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2290      	movs	r2, #144	@ 0x90
 800265e:	2100      	movs	r1, #0
 8002660:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002662:	e1b9      	b.n	80029d8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002664:	46c0      	nop			@ (mov r8, r8)
    return;
 8002666:	e1b7      	b.n	80029d8 <HAL_UART_IRQHandler+0x62c>
 8002668:	0000080f 	.word	0x0000080f
 800266c:	10000001 	.word	0x10000001
 8002670:	04000120 	.word	0x04000120
 8002674:	0800365d 	.word	0x0800365d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d000      	beq.n	8002682 <HAL_UART_IRQHandler+0x2d6>
 8002680:	e13e      	b.n	8002900 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002682:	23a4      	movs	r3, #164	@ 0xa4
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2210      	movs	r2, #16
 800268a:	4013      	ands	r3, r2
 800268c:	d100      	bne.n	8002690 <HAL_UART_IRQHandler+0x2e4>
 800268e:	e137      	b.n	8002900 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002690:	23a0      	movs	r3, #160	@ 0xa0
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2210      	movs	r2, #16
 8002698:	4013      	ands	r3, r2
 800269a:	d100      	bne.n	800269e <HAL_UART_IRQHandler+0x2f2>
 800269c:	e130      	b.n	8002900 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2210      	movs	r2, #16
 80026a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2240      	movs	r2, #64	@ 0x40
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b40      	cmp	r3, #64	@ 0x40
 80026b2:	d000      	beq.n	80026b6 <HAL_UART_IRQHandler+0x30a>
 80026b4:	e0a4      	b.n	8002800 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	589b      	ldr	r3, [r3, r2]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	217e      	movs	r1, #126	@ 0x7e
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d100      	bne.n	80026d0 <HAL_UART_IRQHandler+0x324>
 80026ce:	e185      	b.n	80029dc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	225c      	movs	r2, #92	@ 0x5c
 80026d4:	5a9b      	ldrh	r3, [r3, r2]
 80026d6:	187a      	adds	r2, r7, r1
 80026d8:	8812      	ldrh	r2, [r2, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d300      	bcc.n	80026e0 <HAL_UART_IRQHandler+0x334>
 80026de:	e17d      	b.n	80029dc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	187a      	adds	r2, r7, r1
 80026e4:	215e      	movs	r1, #94	@ 0x5e
 80026e6:	8812      	ldrh	r2, [r2, #0]
 80026e8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2280      	movs	r2, #128	@ 0x80
 80026ee:	589b      	ldr	r3, [r3, r2]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2220      	movs	r2, #32
 80026f6:	4013      	ands	r3, r2
 80026f8:	d170      	bne.n	80027dc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002702:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002704:	2301      	movs	r3, #1
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270a:	f383 8810 	msr	PRIMASK, r3
}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	49b4      	ldr	r1, [pc, #720]	@ (80029ec <HAL_UART_IRQHandler+0x640>)
 800271c:	400a      	ands	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002726:	f383 8810 	msr	PRIMASK, r3
}
 800272a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272c:	f3ef 8310 	mrs	r3, PRIMASK
 8002730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002734:	677b      	str	r3, [r7, #116]	@ 0x74
 8002736:	2301      	movs	r3, #1
 8002738:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002758:	f383 8810 	msr	PRIMASK, r3
}
 800275c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275e:	f3ef 8310 	mrs	r3, PRIMASK
 8002762:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002766:	673b      	str	r3, [r7, #112]	@ 0x70
 8002768:	2301      	movs	r3, #1
 800276a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800276e:	f383 8810 	msr	PRIMASK, r3
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2140      	movs	r1, #64	@ 0x40
 8002780:	438a      	bics	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002786:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800278a:	f383 8810 	msr	PRIMASK, r3
}
 800278e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	228c      	movs	r2, #140	@ 0x8c
 8002794:	2120      	movs	r1, #32
 8002796:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279e:	f3ef 8310 	mrs	r3, PRIMASK
 80027a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80027a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027a8:	2301      	movs	r3, #1
 80027aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ae:	f383 8810 	msr	PRIMASK, r3
}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2110      	movs	r1, #16
 80027c0:	438a      	bics	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ca:	f383 8810 	msr	PRIMASK, r3
}
 80027ce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2280      	movs	r2, #128	@ 0x80
 80027d4:	589b      	ldr	r3, [r3, r2]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe fb7a 	bl	8000ed0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	225c      	movs	r2, #92	@ 0x5c
 80027e6:	5a9a      	ldrh	r2, [r3, r2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	215e      	movs	r1, #94	@ 0x5e
 80027ec:	5a5b      	ldrh	r3, [r3, r1]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	0011      	movs	r1, r2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 f90d 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027fe:	e0ed      	b.n	80029dc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	225c      	movs	r2, #92	@ 0x5c
 8002804:	5a99      	ldrh	r1, [r3, r2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	225e      	movs	r2, #94	@ 0x5e
 800280a:	5a9b      	ldrh	r3, [r3, r2]
 800280c:	b29a      	uxth	r2, r3
 800280e:	208e      	movs	r0, #142	@ 0x8e
 8002810:	183b      	adds	r3, r7, r0
 8002812:	1a8a      	subs	r2, r1, r2
 8002814:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	225e      	movs	r2, #94	@ 0x5e
 800281a:	5a9b      	ldrh	r3, [r3, r2]
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d100      	bne.n	8002824 <HAL_UART_IRQHandler+0x478>
 8002822:	e0dd      	b.n	80029e0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002824:	183b      	adds	r3, r7, r0
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d100      	bne.n	800282e <HAL_UART_IRQHandler+0x482>
 800282c:	e0d8      	b.n	80029e0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8310 	mrs	r3, PRIMASK
 8002832:	60fb      	str	r3, [r7, #12]
  return(result);
 8002834:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002836:	2488      	movs	r4, #136	@ 0x88
 8002838:	193a      	adds	r2, r7, r4
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	2301      	movs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4967      	ldr	r1, [pc, #412]	@ (80029f0 <HAL_UART_IRQHandler+0x644>)
 8002854:	400a      	ands	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	193b      	adds	r3, r7, r4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002866:	f3ef 8310 	mrs	r3, PRIMASK
 800286a:	61bb      	str	r3, [r7, #24]
  return(result);
 800286c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800286e:	2484      	movs	r4, #132	@ 0x84
 8002870:	193a      	adds	r2, r7, r4
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f383 8810 	msr	PRIMASK, r3
}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	495a      	ldr	r1, [pc, #360]	@ (80029f4 <HAL_UART_IRQHandler+0x648>)
 800288c:	400a      	ands	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	193b      	adds	r3, r7, r4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f383 8810 	msr	PRIMASK, r3
}
 800289c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	228c      	movs	r2, #140	@ 0x8c
 80028a2:	2120      	movs	r1, #32
 80028a4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b2:	f3ef 8310 	mrs	r3, PRIMASK
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ba:	2480      	movs	r4, #128	@ 0x80
 80028bc:	193a      	adds	r2, r7, r4
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	2301      	movs	r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c6:	f383 8810 	msr	PRIMASK, r3
}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2110      	movs	r1, #16
 80028d8:	438a      	bics	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e4:	f383 8810 	msr	PRIMASK, r3
}
 80028e8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028f0:	183b      	adds	r3, r7, r0
 80028f2:	881a      	ldrh	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	0011      	movs	r1, r2
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 f88d 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028fe:	e06f      	b.n	80029e0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002900:	23a4      	movs	r3, #164	@ 0xa4
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	035b      	lsls	r3, r3, #13
 800290a:	4013      	ands	r3, r2
 800290c:	d010      	beq.n	8002930 <HAL_UART_IRQHandler+0x584>
 800290e:	239c      	movs	r3, #156	@ 0x9c
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	03db      	lsls	r3, r3, #15
 8002918:	4013      	ands	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2280      	movs	r2, #128	@ 0x80
 8002922:	0352      	lsls	r2, r2, #13
 8002924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f001 fbeb 	bl	8004104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800292e:	e05a      	b.n	80029e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002930:	23a4      	movs	r3, #164	@ 0xa4
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2280      	movs	r2, #128	@ 0x80
 8002938:	4013      	ands	r3, r2
 800293a:	d016      	beq.n	800296a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800293c:	23a0      	movs	r3, #160	@ 0xa0
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2280      	movs	r2, #128	@ 0x80
 8002944:	4013      	ands	r3, r2
 8002946:	d106      	bne.n	8002956 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002948:	239c      	movs	r3, #156	@ 0x9c
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	4013      	ands	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800295a:	2b00      	cmp	r3, #0
 800295c:	d042      	beq.n	80029e4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	0010      	movs	r0, r2
 8002966:	4798      	blx	r3
    }
    return;
 8002968:	e03c      	b.n	80029e4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800296a:	23a4      	movs	r3, #164	@ 0xa4
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2240      	movs	r2, #64	@ 0x40
 8002972:	4013      	ands	r3, r2
 8002974:	d00a      	beq.n	800298c <HAL_UART_IRQHandler+0x5e0>
 8002976:	23a0      	movs	r3, #160	@ 0xa0
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2240      	movs	r2, #64	@ 0x40
 800297e:	4013      	ands	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 fe80 	bl	800368a <UART_EndTransmit_IT>
    return;
 800298a:	e02c      	b.n	80029e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800298c:	23a4      	movs	r3, #164	@ 0xa4
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	4013      	ands	r3, r2
 8002998:	d00b      	beq.n	80029b2 <HAL_UART_IRQHandler+0x606>
 800299a:	23a0      	movs	r3, #160	@ 0xa0
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	05db      	lsls	r3, r3, #23
 80029a4:	4013      	ands	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f001 fbba 	bl	8004124 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029b0:	e019      	b.n	80029e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029b2:	23a4      	movs	r3, #164	@ 0xa4
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	045b      	lsls	r3, r3, #17
 80029bc:	4013      	ands	r3, r2
 80029be:	d012      	beq.n	80029e6 <HAL_UART_IRQHandler+0x63a>
 80029c0:	23a0      	movs	r3, #160	@ 0xa0
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da0d      	bge.n	80029e6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f001 fba1 	bl	8004114 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029d2:	e008      	b.n	80029e6 <HAL_UART_IRQHandler+0x63a>
      return;
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	e006      	b.n	80029e6 <HAL_UART_IRQHandler+0x63a>
    return;
 80029d8:	46c0      	nop			@ (mov r8, r8)
 80029da:	e004      	b.n	80029e6 <HAL_UART_IRQHandler+0x63a>
      return;
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	e002      	b.n	80029e6 <HAL_UART_IRQHandler+0x63a>
      return;
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	e000      	b.n	80029e6 <HAL_UART_IRQHandler+0x63a>
    return;
 80029e4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b02a      	add	sp, #168	@ 0xa8
 80029ea:	bdb0      	pop	{r4, r5, r7, pc}
 80029ec:	fffffeff 	.word	0xfffffeff
 80029f0:	fffffedf 	.word	0xfffffedf
 80029f4:	effffffe 	.word	0xeffffffe

080029f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a00:	46c0      	nop			@ (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	000a      	movs	r2, r1
 8002a22:	1cbb      	adds	r3, r7, #2
 8002a24:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b090      	sub	sp, #64	@ 0x40
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a38:	231a      	movs	r3, #26
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	19db      	adds	r3, r3, r7
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4aaf      	ldr	r2, [pc, #700]	@ (8002d20 <UART_SetConfig+0x2f0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4aaa      	ldr	r2, [pc, #680]	@ (8002d24 <UART_SetConfig+0x2f4>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	68d9      	ldr	r1, [r3, #12]
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	0003      	movs	r3, r0
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4aa4      	ldr	r2, [pc, #656]	@ (8002d28 <UART_SetConfig+0x2f8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a9f      	ldr	r2, [pc, #636]	@ (8002d2c <UART_SetConfig+0x2fc>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a95      	ldr	r2, [pc, #596]	@ (8002d30 <UART_SetConfig+0x300>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d131      	bne.n	8002b44 <UART_SetConfig+0x114>
 8002ae0:	4b94      	ldr	r3, [pc, #592]	@ (8002d34 <UART_SetConfig+0x304>)
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d01d      	beq.n	8002b28 <UART_SetConfig+0xf8>
 8002aec:	d823      	bhi.n	8002b36 <UART_SetConfig+0x106>
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d00c      	beq.n	8002b0c <UART_SetConfig+0xdc>
 8002af2:	d820      	bhi.n	8002b36 <UART_SetConfig+0x106>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <UART_SetConfig+0xce>
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d00e      	beq.n	8002b1a <UART_SetConfig+0xea>
 8002afc:	e01b      	b.n	8002b36 <UART_SetConfig+0x106>
 8002afe:	231b      	movs	r3, #27
 8002b00:	2220      	movs	r2, #32
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	19db      	adds	r3, r3, r7
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e0b4      	b.n	8002c76 <UART_SetConfig+0x246>
 8002b0c:	231b      	movs	r3, #27
 8002b0e:	2220      	movs	r2, #32
 8002b10:	189b      	adds	r3, r3, r2
 8002b12:	19db      	adds	r3, r3, r7
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e0ad      	b.n	8002c76 <UART_SetConfig+0x246>
 8002b1a:	231b      	movs	r3, #27
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	19db      	adds	r3, r3, r7
 8002b22:	2204      	movs	r2, #4
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e0a6      	b.n	8002c76 <UART_SetConfig+0x246>
 8002b28:	231b      	movs	r3, #27
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	189b      	adds	r3, r3, r2
 8002b2e:	19db      	adds	r3, r3, r7
 8002b30:	2208      	movs	r2, #8
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e09f      	b.n	8002c76 <UART_SetConfig+0x246>
 8002b36:	231b      	movs	r3, #27
 8002b38:	2220      	movs	r2, #32
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	19db      	adds	r3, r3, r7
 8002b3e:	2210      	movs	r2, #16
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e098      	b.n	8002c76 <UART_SetConfig+0x246>
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a7b      	ldr	r2, [pc, #492]	@ (8002d38 <UART_SetConfig+0x308>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d131      	bne.n	8002bb2 <UART_SetConfig+0x182>
 8002b4e:	4b79      	ldr	r3, [pc, #484]	@ (8002d34 <UART_SetConfig+0x304>)
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	220c      	movs	r2, #12
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d01d      	beq.n	8002b96 <UART_SetConfig+0x166>
 8002b5a:	d823      	bhi.n	8002ba4 <UART_SetConfig+0x174>
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d00c      	beq.n	8002b7a <UART_SetConfig+0x14a>
 8002b60:	d820      	bhi.n	8002ba4 <UART_SetConfig+0x174>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <UART_SetConfig+0x13c>
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d00e      	beq.n	8002b88 <UART_SetConfig+0x158>
 8002b6a:	e01b      	b.n	8002ba4 <UART_SetConfig+0x174>
 8002b6c:	231b      	movs	r3, #27
 8002b6e:	2220      	movs	r2, #32
 8002b70:	189b      	adds	r3, r3, r2
 8002b72:	19db      	adds	r3, r3, r7
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e07d      	b.n	8002c76 <UART_SetConfig+0x246>
 8002b7a:	231b      	movs	r3, #27
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	19db      	adds	r3, r3, r7
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e076      	b.n	8002c76 <UART_SetConfig+0x246>
 8002b88:	231b      	movs	r3, #27
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	189b      	adds	r3, r3, r2
 8002b8e:	19db      	adds	r3, r3, r7
 8002b90:	2204      	movs	r2, #4
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e06f      	b.n	8002c76 <UART_SetConfig+0x246>
 8002b96:	231b      	movs	r3, #27
 8002b98:	2220      	movs	r2, #32
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	19db      	adds	r3, r3, r7
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e068      	b.n	8002c76 <UART_SetConfig+0x246>
 8002ba4:	231b      	movs	r3, #27
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	189b      	adds	r3, r3, r2
 8002baa:	19db      	adds	r3, r3, r7
 8002bac:	2210      	movs	r2, #16
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e061      	b.n	8002c76 <UART_SetConfig+0x246>
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a61      	ldr	r2, [pc, #388]	@ (8002d3c <UART_SetConfig+0x30c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d106      	bne.n	8002bca <UART_SetConfig+0x19a>
 8002bbc:	231b      	movs	r3, #27
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	19db      	adds	r3, r3, r7
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e055      	b.n	8002c76 <UART_SetConfig+0x246>
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5c      	ldr	r2, [pc, #368]	@ (8002d40 <UART_SetConfig+0x310>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d106      	bne.n	8002be2 <UART_SetConfig+0x1b2>
 8002bd4:	231b      	movs	r3, #27
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	19db      	adds	r3, r3, r7
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e049      	b.n	8002c76 <UART_SetConfig+0x246>
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a50      	ldr	r2, [pc, #320]	@ (8002d28 <UART_SetConfig+0x2f8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d13e      	bne.n	8002c6a <UART_SetConfig+0x23a>
 8002bec:	4b51      	ldr	r3, [pc, #324]	@ (8002d34 <UART_SetConfig+0x304>)
 8002bee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002bf0:	23c0      	movs	r3, #192	@ 0xc0
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	22c0      	movs	r2, #192	@ 0xc0
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d027      	beq.n	8002c4e <UART_SetConfig+0x21e>
 8002bfe:	22c0      	movs	r2, #192	@ 0xc0
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d82a      	bhi.n	8002c5c <UART_SetConfig+0x22c>
 8002c06:	2280      	movs	r2, #128	@ 0x80
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d011      	beq.n	8002c32 <UART_SetConfig+0x202>
 8002c0e:	2280      	movs	r2, #128	@ 0x80
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d822      	bhi.n	8002c5c <UART_SetConfig+0x22c>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <UART_SetConfig+0x1f4>
 8002c1a:	2280      	movs	r2, #128	@ 0x80
 8002c1c:	00d2      	lsls	r2, r2, #3
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <UART_SetConfig+0x210>
 8002c22:	e01b      	b.n	8002c5c <UART_SetConfig+0x22c>
 8002c24:	231b      	movs	r3, #27
 8002c26:	2220      	movs	r2, #32
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	19db      	adds	r3, r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e021      	b.n	8002c76 <UART_SetConfig+0x246>
 8002c32:	231b      	movs	r3, #27
 8002c34:	2220      	movs	r2, #32
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	19db      	adds	r3, r3, r7
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e01a      	b.n	8002c76 <UART_SetConfig+0x246>
 8002c40:	231b      	movs	r3, #27
 8002c42:	2220      	movs	r2, #32
 8002c44:	189b      	adds	r3, r3, r2
 8002c46:	19db      	adds	r3, r3, r7
 8002c48:	2204      	movs	r2, #4
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e013      	b.n	8002c76 <UART_SetConfig+0x246>
 8002c4e:	231b      	movs	r3, #27
 8002c50:	2220      	movs	r2, #32
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	19db      	adds	r3, r3, r7
 8002c56:	2208      	movs	r2, #8
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e00c      	b.n	8002c76 <UART_SetConfig+0x246>
 8002c5c:	231b      	movs	r3, #27
 8002c5e:	2220      	movs	r2, #32
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	2210      	movs	r2, #16
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e005      	b.n	8002c76 <UART_SetConfig+0x246>
 8002c6a:	231b      	movs	r3, #27
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	189b      	adds	r3, r3, r2
 8002c70:	19db      	adds	r3, r3, r7
 8002c72:	2210      	movs	r2, #16
 8002c74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <UART_SetConfig+0x2f8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d000      	beq.n	8002c82 <UART_SetConfig+0x252>
 8002c80:	e0a9      	b.n	8002dd6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c82:	231b      	movs	r3, #27
 8002c84:	2220      	movs	r2, #32
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	19db      	adds	r3, r3, r7
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d015      	beq.n	8002cbc <UART_SetConfig+0x28c>
 8002c90:	dc18      	bgt.n	8002cc4 <UART_SetConfig+0x294>
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d00d      	beq.n	8002cb2 <UART_SetConfig+0x282>
 8002c96:	dc15      	bgt.n	8002cc4 <UART_SetConfig+0x294>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <UART_SetConfig+0x272>
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d005      	beq.n	8002cac <UART_SetConfig+0x27c>
 8002ca0:	e010      	b.n	8002cc4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ca2:	f7ff f85d 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002caa:	e014      	b.n	8002cd6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cac:	4b25      	ldr	r3, [pc, #148]	@ (8002d44 <UART_SetConfig+0x314>)
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002cb0:	e011      	b.n	8002cd6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb2:	f7fe ffc9 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002cba:	e00c      	b.n	8002cd6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002cc2:	e008      	b.n	8002cd6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002cc8:	231a      	movs	r3, #26
 8002cca:	2220      	movs	r2, #32
 8002ccc:	189b      	adds	r3, r3, r2
 8002cce:	19db      	adds	r3, r3, r7
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
        break;
 8002cd4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d100      	bne.n	8002cde <UART_SetConfig+0x2ae>
 8002cdc:	e14b      	b.n	8002f76 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce2:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <UART_SetConfig+0x318>)
 8002ce4:	0052      	lsls	r2, r2, #1
 8002ce6:	5ad3      	ldrh	r3, [r2, r3]
 8002ce8:	0019      	movs	r1, r3
 8002cea:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002cec:	f7fd fa0a 	bl	8000104 <__udivsi3>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	0013      	movs	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d305      	bcc.n	8002d10 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d91d      	bls.n	8002d4c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002d10:	231a      	movs	r3, #26
 8002d12:	2220      	movs	r2, #32
 8002d14:	189b      	adds	r3, r3, r2
 8002d16:	19db      	adds	r3, r3, r7
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e12b      	b.n	8002f76 <UART_SetConfig+0x546>
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	cfff69f3 	.word	0xcfff69f3
 8002d24:	ffffcfff 	.word	0xffffcfff
 8002d28:	40008000 	.word	0x40008000
 8002d2c:	11fff4ff 	.word	0x11fff4ff
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40004400 	.word	0x40004400
 8002d3c:	40004800 	.word	0x40004800
 8002d40:	40004c00 	.word	0x40004c00
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	08004438 	.word	0x08004438
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d58:	4b92      	ldr	r3, [pc, #584]	@ (8002fa4 <UART_SetConfig+0x574>)
 8002d5a:	0052      	lsls	r2, r2, #1
 8002d5c:	5ad3      	ldrh	r3, [r2, r3]
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	69b8      	ldr	r0, [r7, #24]
 8002d6a:	69f9      	ldr	r1, [r7, #28]
 8002d6c:	f7fd fb40 	bl	80003f0 <__aeabi_uldivmod>
 8002d70:	0002      	movs	r2, r0
 8002d72:	000b      	movs	r3, r1
 8002d74:	0e11      	lsrs	r1, r2, #24
 8002d76:	021d      	lsls	r5, r3, #8
 8002d78:	430d      	orrs	r5, r1
 8002d7a:	0214      	lsls	r4, r2, #8
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68b8      	ldr	r0, [r7, #8]
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	1900      	adds	r0, r0, r4
 8002d8e:	4169      	adcs	r1, r5
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f7fd fb27 	bl	80003f0 <__aeabi_uldivmod>
 8002da2:	0002      	movs	r2, r0
 8002da4:	000b      	movs	r3, r1
 8002da6:	0013      	movs	r3, r2
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dac:	23c0      	movs	r3, #192	@ 0xc0
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d309      	bcc.n	8002dc8 <UART_SetConfig+0x398>
 8002db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	035b      	lsls	r3, r3, #13
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d204      	bcs.n	8002dc8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	e0d6      	b.n	8002f76 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002dc8:	231a      	movs	r3, #26
 8002dca:	2220      	movs	r2, #32
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	19db      	adds	r3, r3, r7
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e0cf      	b.n	8002f76 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	2380      	movs	r3, #128	@ 0x80
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d000      	beq.n	8002de4 <UART_SetConfig+0x3b4>
 8002de2:	e070      	b.n	8002ec6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002de4:	231b      	movs	r3, #27
 8002de6:	2220      	movs	r2, #32
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	19db      	adds	r3, r3, r7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d015      	beq.n	8002e1e <UART_SetConfig+0x3ee>
 8002df2:	dc18      	bgt.n	8002e26 <UART_SetConfig+0x3f6>
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d00d      	beq.n	8002e14 <UART_SetConfig+0x3e4>
 8002df8:	dc15      	bgt.n	8002e26 <UART_SetConfig+0x3f6>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <UART_SetConfig+0x3d4>
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d005      	beq.n	8002e0e <UART_SetConfig+0x3de>
 8002e02:	e010      	b.n	8002e26 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e04:	f7fe ffac 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e0c:	e014      	b.n	8002e38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0e:	4b66      	ldr	r3, [pc, #408]	@ (8002fa8 <UART_SetConfig+0x578>)
 8002e10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e12:	e011      	b.n	8002e38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e14:	f7fe ff18 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e1c:	e00c      	b.n	8002e38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e24:	e008      	b.n	8002e38 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002e2a:	231a      	movs	r3, #26
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	19db      	adds	r3, r3, r7
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
        break;
 8002e36:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d100      	bne.n	8002e40 <UART_SetConfig+0x410>
 8002e3e:	e09a      	b.n	8002f76 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e44:	4b57      	ldr	r3, [pc, #348]	@ (8002fa4 <UART_SetConfig+0x574>)
 8002e46:	0052      	lsls	r2, r2, #1
 8002e48:	5ad3      	ldrh	r3, [r2, r3]
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e4e:	f7fd f959 	bl	8000104 <__udivsi3>
 8002e52:	0003      	movs	r3, r0
 8002e54:	005a      	lsls	r2, r3, #1
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	18d2      	adds	r2, r2, r3
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	0019      	movs	r1, r3
 8002e64:	0010      	movs	r0, r2
 8002e66:	f7fd f94d 	bl	8000104 <__udivsi3>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d921      	bls.n	8002eb8 <UART_SetConfig+0x488>
 8002e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	025b      	lsls	r3, r3, #9
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d21c      	bcs.n	8002eb8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	200e      	movs	r0, #14
 8002e84:	2420      	movs	r4, #32
 8002e86:	1903      	adds	r3, r0, r4
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	210f      	movs	r1, #15
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2207      	movs	r2, #7
 8002e98:	4013      	ands	r3, r2
 8002e9a:	b299      	uxth	r1, r3
 8002e9c:	1903      	adds	r3, r0, r4
 8002e9e:	19db      	adds	r3, r3, r7
 8002ea0:	1902      	adds	r2, r0, r4
 8002ea2:	19d2      	adds	r2, r2, r7
 8002ea4:	8812      	ldrh	r2, [r2, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1902      	adds	r2, r0, r4
 8002eb0:	19d2      	adds	r2, r2, r7
 8002eb2:	8812      	ldrh	r2, [r2, #0]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	e05e      	b.n	8002f76 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002eb8:	231a      	movs	r3, #26
 8002eba:	2220      	movs	r2, #32
 8002ebc:	189b      	adds	r3, r3, r2
 8002ebe:	19db      	adds	r3, r3, r7
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
 8002ec4:	e057      	b.n	8002f76 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ec6:	231b      	movs	r3, #27
 8002ec8:	2220      	movs	r2, #32
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	19db      	adds	r3, r3, r7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d015      	beq.n	8002f00 <UART_SetConfig+0x4d0>
 8002ed4:	dc18      	bgt.n	8002f08 <UART_SetConfig+0x4d8>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d00d      	beq.n	8002ef6 <UART_SetConfig+0x4c6>
 8002eda:	dc15      	bgt.n	8002f08 <UART_SetConfig+0x4d8>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <UART_SetConfig+0x4b6>
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0x4c0>
 8002ee4:	e010      	b.n	8002f08 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee6:	f7fe ff3b 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8002eea:	0003      	movs	r3, r0
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002eee:	e014      	b.n	8002f1a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa8 <UART_SetConfig+0x578>)
 8002ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ef4:	e011      	b.n	8002f1a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef6:	f7fe fea7 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002efa:	0003      	movs	r3, r0
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002efe:	e00c      	b.n	8002f1a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f06:	e008      	b.n	8002f1a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002f0c:	231a      	movs	r3, #26
 8002f0e:	2220      	movs	r2, #32
 8002f10:	189b      	adds	r3, r3, r2
 8002f12:	19db      	adds	r3, r3, r7
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
        break;
 8002f18:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02a      	beq.n	8002f76 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <UART_SetConfig+0x574>)
 8002f26:	0052      	lsls	r2, r2, #1
 8002f28:	5ad3      	ldrh	r3, [r2, r3]
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f2e:	f7fd f8e9 	bl	8000104 <__udivsi3>
 8002f32:	0003      	movs	r3, r0
 8002f34:	001a      	movs	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	18d2      	adds	r2, r2, r3
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0019      	movs	r1, r3
 8002f44:	0010      	movs	r0, r2
 8002f46:	f7fd f8dd 	bl	8000104 <__udivsi3>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d90a      	bls.n	8002f6a <UART_SetConfig+0x53a>
 8002f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	025b      	lsls	r3, r3, #9
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d205      	bcs.n	8002f6a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	e005      	b.n	8002f76 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6a:	231a      	movs	r3, #26
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	19db      	adds	r3, r3, r7
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	226a      	movs	r2, #106	@ 0x6a
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	2268      	movs	r2, #104	@ 0x68
 8002f82:	2101      	movs	r1, #1
 8002f84:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	2200      	movs	r2, #0
 8002f8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	2200      	movs	r2, #0
 8002f90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002f92:	231a      	movs	r3, #26
 8002f94:	2220      	movs	r2, #32
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	781b      	ldrb	r3, [r3, #0]
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b010      	add	sp, #64	@ 0x40
 8002fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa4:	08004438 	.word	0x08004438
 8002fa8:	00f42400 	.word	0x00f42400

08002fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	2208      	movs	r2, #8
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80030f0 <UART_AdvFeatureConfig+0x144>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a43      	ldr	r2, [pc, #268]	@ (80030f4 <UART_AdvFeatureConfig+0x148>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	4013      	ands	r3, r2
 8003000:	d00b      	beq.n	800301a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a3b      	ldr	r2, [pc, #236]	@ (80030f8 <UART_AdvFeatureConfig+0x14c>)
 800300a:	4013      	ands	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	2204      	movs	r2, #4
 8003020:	4013      	ands	r3, r2
 8003022:	d00b      	beq.n	800303c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4a34      	ldr	r2, [pc, #208]	@ (80030fc <UART_AdvFeatureConfig+0x150>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	2210      	movs	r2, #16
 8003042:	4013      	ands	r3, r2
 8003044:	d00b      	beq.n	800305e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a2c      	ldr	r2, [pc, #176]	@ (8003100 <UART_AdvFeatureConfig+0x154>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003062:	2220      	movs	r2, #32
 8003064:	4013      	ands	r3, r2
 8003066:	d00b      	beq.n	8003080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	4a25      	ldr	r2, [pc, #148]	@ (8003104 <UART_AdvFeatureConfig+0x158>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	2240      	movs	r2, #64	@ 0x40
 8003086:	4013      	ands	r3, r2
 8003088:	d01d      	beq.n	80030c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <UART_AdvFeatureConfig+0x15c>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	035b      	lsls	r3, r3, #13
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d10b      	bne.n	80030c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a15      	ldr	r2, [pc, #84]	@ (800310c <UART_AdvFeatureConfig+0x160>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	4013      	ands	r3, r2
 80030ce:	d00b      	beq.n	80030e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003110 <UART_AdvFeatureConfig+0x164>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	ffff7fff 	.word	0xffff7fff
 80030f4:	fffdffff 	.word	0xfffdffff
 80030f8:	fffeffff 	.word	0xfffeffff
 80030fc:	fffbffff 	.word	0xfffbffff
 8003100:	ffffefff 	.word	0xffffefff
 8003104:	ffffdfff 	.word	0xffffdfff
 8003108:	ffefffff 	.word	0xffefffff
 800310c:	ff9fffff 	.word	0xff9fffff
 8003110:	fff7ffff 	.word	0xfff7ffff

08003114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b092      	sub	sp, #72	@ 0x48
 8003118:	af02      	add	r7, sp, #8
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2290      	movs	r2, #144	@ 0x90
 8003120:	2100      	movs	r1, #0
 8003122:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003124:	f7fd fdec 	bl	8000d00 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2208      	movs	r2, #8
 8003134:	4013      	ands	r3, r2
 8003136:	2b08      	cmp	r3, #8
 8003138:	d12d      	bne.n	8003196 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800313a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	0391      	lsls	r1, r2, #14
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4a47      	ldr	r2, [pc, #284]	@ (8003260 <UART_CheckIdleState+0x14c>)
 8003144:	9200      	str	r2, [sp, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	f000 f88e 	bl	8003268 <UART_WaitOnFlagUntilTimeout>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d022      	beq.n	8003196 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003150:	f3ef 8310 	mrs	r3, PRIMASK
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003158:	63bb      	str	r3, [r7, #56]	@ 0x38
 800315a:	2301      	movs	r3, #1
 800315c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	f383 8810 	msr	PRIMASK, r3
}
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2180      	movs	r1, #128	@ 0x80
 8003172:	438a      	bics	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317c:	f383 8810 	msr	PRIMASK, r3
}
 8003180:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2288      	movs	r2, #136	@ 0x88
 8003186:	2120      	movs	r1, #32
 8003188:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2284      	movs	r2, #132	@ 0x84
 800318e:	2100      	movs	r1, #0
 8003190:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e060      	b.n	8003258 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2204      	movs	r2, #4
 800319e:	4013      	ands	r3, r2
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d146      	bne.n	8003232 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a6:	2280      	movs	r2, #128	@ 0x80
 80031a8:	03d1      	lsls	r1, r2, #15
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003260 <UART_CheckIdleState+0x14c>)
 80031ae:	9200      	str	r2, [sp, #0]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f000 f859 	bl	8003268 <UART_WaitOnFlagUntilTimeout>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d03b      	beq.n	8003232 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ba:	f3ef 8310 	mrs	r3, PRIMASK
 80031be:	60fb      	str	r3, [r7, #12]
  return(result);
 80031c0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4922      	ldr	r1, [pc, #136]	@ (8003264 <UART_CheckIdleState+0x150>)
 80031dc:	400a      	ands	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f383 8810 	msr	PRIMASK, r3
}
 80031ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80031f2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031f6:	2301      	movs	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	438a      	bics	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003214:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	228c      	movs	r2, #140	@ 0x8c
 8003222:	2120      	movs	r1, #32
 8003224:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2284      	movs	r2, #132	@ 0x84
 800322a:	2100      	movs	r1, #0
 800322c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e012      	b.n	8003258 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2288      	movs	r2, #136	@ 0x88
 8003236:	2120      	movs	r1, #32
 8003238:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	228c      	movs	r2, #140	@ 0x8c
 800323e:	2120      	movs	r1, #32
 8003240:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2284      	movs	r2, #132	@ 0x84
 8003252:	2100      	movs	r1, #0
 8003254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b010      	add	sp, #64	@ 0x40
 800325e:	bd80      	pop	{r7, pc}
 8003260:	01ffffff 	.word	0x01ffffff
 8003264:	fffffedf 	.word	0xfffffedf

08003268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	1dfb      	adds	r3, r7, #7
 8003276:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003278:	e051      	b.n	800331e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3301      	adds	r3, #1
 800327e:	d04e      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003280:	f7fd fd3e 	bl	8000d00 <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	429a      	cmp	r2, r3
 800328e:	d302      	bcc.n	8003296 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e051      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2204      	movs	r2, #4
 80032a2:	4013      	ands	r3, r2
 80032a4:	d03b      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0xb6>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b80      	cmp	r3, #128	@ 0x80
 80032aa:	d038      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0xb6>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b40      	cmp	r3, #64	@ 0x40
 80032b0:	d035      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2208      	movs	r2, #8
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d111      	bne.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2208      	movs	r2, #8
 80032c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 f960 	bl	8003590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2290      	movs	r2, #144	@ 0x90
 80032d4:	2108      	movs	r1, #8
 80032d6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2284      	movs	r2, #132	@ 0x84
 80032dc:	2100      	movs	r1, #0
 80032de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e02c      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	401a      	ands	r2, r3
 80032f0:	2380      	movs	r3, #128	@ 0x80
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d112      	bne.n	800331e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	0018      	movs	r0, r3
 8003306:	f000 f943 	bl	8003590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2290      	movs	r2, #144	@ 0x90
 800330e:	2120      	movs	r1, #32
 8003310:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2284      	movs	r2, #132	@ 0x84
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e00f      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	425a      	negs	r2, r3
 800332e:	4153      	adcs	r3, r2
 8003330:	b2db      	uxtb	r3, r3
 8003332:	001a      	movs	r2, r3
 8003334:	1dfb      	adds	r3, r7, #7
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d09e      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b004      	add	sp, #16
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b098      	sub	sp, #96	@ 0x60
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	1dbb      	adds	r3, r7, #6
 8003354:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1dba      	adds	r2, r7, #6
 8003360:	215c      	movs	r1, #92	@ 0x5c
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1dba      	adds	r2, r7, #6
 800336a:	215e      	movs	r1, #94	@ 0x5e
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	2380      	movs	r3, #128	@ 0x80
 800337c:	015b      	lsls	r3, r3, #5
 800337e:	429a      	cmp	r2, r3
 8003380:	d10d      	bne.n	800339e <UART_Start_Receive_IT+0x56>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <UART_Start_Receive_IT+0x4c>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2260      	movs	r2, #96	@ 0x60
 800338e:	497b      	ldr	r1, [pc, #492]	@ (800357c <UART_Start_Receive_IT+0x234>)
 8003390:	5299      	strh	r1, [r3, r2]
 8003392:	e02e      	b.n	80033f2 <UART_Start_Receive_IT+0xaa>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2260      	movs	r2, #96	@ 0x60
 8003398:	21ff      	movs	r1, #255	@ 0xff
 800339a:	5299      	strh	r1, [r3, r2]
 800339c:	e029      	b.n	80033f2 <UART_Start_Receive_IT+0xaa>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <UART_Start_Receive_IT+0x7a>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <UART_Start_Receive_IT+0x70>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2260      	movs	r2, #96	@ 0x60
 80033b2:	21ff      	movs	r1, #255	@ 0xff
 80033b4:	5299      	strh	r1, [r3, r2]
 80033b6:	e01c      	b.n	80033f2 <UART_Start_Receive_IT+0xaa>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2260      	movs	r2, #96	@ 0x60
 80033bc:	217f      	movs	r1, #127	@ 0x7f
 80033be:	5299      	strh	r1, [r3, r2]
 80033c0:	e017      	b.n	80033f2 <UART_Start_Receive_IT+0xaa>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	2380      	movs	r3, #128	@ 0x80
 80033c8:	055b      	lsls	r3, r3, #21
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d10d      	bne.n	80033ea <UART_Start_Receive_IT+0xa2>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <UART_Start_Receive_IT+0x98>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2260      	movs	r2, #96	@ 0x60
 80033da:	217f      	movs	r1, #127	@ 0x7f
 80033dc:	5299      	strh	r1, [r3, r2]
 80033de:	e008      	b.n	80033f2 <UART_Start_Receive_IT+0xaa>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2260      	movs	r2, #96	@ 0x60
 80033e4:	213f      	movs	r1, #63	@ 0x3f
 80033e6:	5299      	strh	r1, [r3, r2]
 80033e8:	e003      	b.n	80033f2 <UART_Start_Receive_IT+0xaa>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2260      	movs	r2, #96	@ 0x60
 80033ee:	2100      	movs	r1, #0
 80033f0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2290      	movs	r2, #144	@ 0x90
 80033f6:	2100      	movs	r1, #0
 80033f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	228c      	movs	r2, #140	@ 0x8c
 80033fe:	2122      	movs	r1, #34	@ 0x22
 8003400:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003402:	f3ef 8310 	mrs	r3, PRIMASK
 8003406:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800340c:	2301      	movs	r3, #1
 800340e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	059b      	lsls	r3, r3, #22
 800343c:	429a      	cmp	r2, r3
 800343e:	d150      	bne.n	80034e2 <UART_Start_Receive_IT+0x19a>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2268      	movs	r2, #104	@ 0x68
 8003444:	5a9b      	ldrh	r3, [r3, r2]
 8003446:	1dba      	adds	r2, r7, #6
 8003448:	8812      	ldrh	r2, [r2, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d349      	bcc.n	80034e2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	2380      	movs	r3, #128	@ 0x80
 8003454:	015b      	lsls	r3, r3, #5
 8003456:	429a      	cmp	r2, r3
 8003458:	d107      	bne.n	800346a <UART_Start_Receive_IT+0x122>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a46      	ldr	r2, [pc, #280]	@ (8003580 <UART_Start_Receive_IT+0x238>)
 8003466:	675a      	str	r2, [r3, #116]	@ 0x74
 8003468:	e002      	b.n	8003470 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a45      	ldr	r2, [pc, #276]	@ (8003584 <UART_Start_Receive_IT+0x23c>)
 800346e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d019      	beq.n	80034ac <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003478:	f3ef 8310 	mrs	r3, PRIMASK
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003480:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003482:	2301      	movs	r3, #1
 8003484:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2180      	movs	r1, #128	@ 0x80
 800349a:	0049      	lsls	r1, r1, #1
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ac:	f3ef 8310 	mrs	r3, PRIMASK
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80034b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80034b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80034b6:	2301      	movs	r3, #1
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			@ (mov r8, r8)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2180      	movs	r1, #128	@ 0x80
 80034ce:	0549      	lsls	r1, r1, #21
 80034d0:	430a      	orrs	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	f383 8810 	msr	PRIMASK, r3
}
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	e047      	b.n	8003572 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	2380      	movs	r3, #128	@ 0x80
 80034e8:	015b      	lsls	r3, r3, #5
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d107      	bne.n	80034fe <UART_Start_Receive_IT+0x1b6>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <UART_Start_Receive_IT+0x240>)
 80034fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80034fc:	e002      	b.n	8003504 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <UART_Start_Receive_IT+0x244>)
 8003502:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d019      	beq.n	8003540 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	61fb      	str	r3, [r7, #28]
  return(result);
 8003512:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003516:	2301      	movs	r3, #1
 8003518:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2190      	movs	r1, #144	@ 0x90
 800352e:	0049      	lsls	r1, r1, #1
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	e018      	b.n	8003572 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003540:	f3ef 8310 	mrs	r3, PRIMASK
 8003544:	613b      	str	r3, [r7, #16]
  return(result);
 8003546:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003548:	653b      	str	r3, [r7, #80]	@ 0x50
 800354a:	2301      	movs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2120      	movs	r1, #32
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003568:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f383 8810 	msr	PRIMASK, r3
}
 8003570:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b018      	add	sp, #96	@ 0x60
 800357a:	bd80      	pop	{r7, pc}
 800357c:	000001ff 	.word	0x000001ff
 8003580:	08003dad 	.word	0x08003dad
 8003584:	08003a6d 	.word	0x08003a6d
 8003588:	080038a9 	.word	0x080038a9
 800358c:	080036e5 	.word	0x080036e5

08003590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	@ 0x38
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003598:	f3ef 8310 	mrs	r3, PRIMASK
 800359c:	617b      	str	r3, [r7, #20]
  return(result);
 800359e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4926      	ldr	r1, [pc, #152]	@ (8003654 <UART_EndRxTransfer+0xc4>)
 80035ba:	400a      	ands	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f383 8810 	msr	PRIMASK, r3
}
 80035c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ca:	f3ef 8310 	mrs	r3, PRIMASK
 80035ce:	623b      	str	r3, [r7, #32]
  return(result);
 80035d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d4:	2301      	movs	r3, #1
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	f383 8810 	msr	PRIMASK, r3
}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	491b      	ldr	r1, [pc, #108]	@ (8003658 <UART_EndRxTransfer+0xc8>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d118      	bne.n	8003636 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003604:	f3ef 8310 	mrs	r3, PRIMASK
 8003608:	60bb      	str	r3, [r7, #8]
  return(result);
 800360a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360e:	2301      	movs	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			@ (mov r8, r8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2110      	movs	r1, #16
 8003626:	438a      	bics	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f383 8810 	msr	PRIMASK, r3
}
 8003634:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	228c      	movs	r2, #140	@ 0x8c
 800363a:	2120      	movs	r1, #32
 800363c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b00e      	add	sp, #56	@ 0x38
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	fffffedf 	.word	0xfffffedf
 8003658:	effffffe 	.word	0xeffffffe

0800365c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	225e      	movs	r2, #94	@ 0x5e
 800366e:	2100      	movs	r1, #0
 8003670:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2256      	movs	r2, #86	@ 0x56
 8003676:	2100      	movs	r1, #0
 8003678:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	0018      	movs	r0, r3
 800367e:	f7ff f9c3 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003692:	f3ef 8310 	mrs	r3, PRIMASK
 8003696:	60bb      	str	r3, [r7, #8]
  return(result);
 8003698:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	2301      	movs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2140      	movs	r1, #64	@ 0x40
 80036b4:	438a      	bics	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2288      	movs	r2, #136	@ 0x88
 80036c8:	2120      	movs	r1, #32
 80036ca:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7ff f98f 	bl	80029f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b006      	add	sp, #24
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b094      	sub	sp, #80	@ 0x50
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80036ec:	204e      	movs	r0, #78	@ 0x4e
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	2160      	movs	r1, #96	@ 0x60
 80036f4:	5a52      	ldrh	r2, [r2, r1]
 80036f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	228c      	movs	r2, #140	@ 0x8c
 80036fc:	589b      	ldr	r3, [r3, r2]
 80036fe:	2b22      	cmp	r3, #34	@ 0x22
 8003700:	d000      	beq.n	8003704 <UART_RxISR_8BIT+0x20>
 8003702:	e0bf      	b.n	8003884 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800370a:	214c      	movs	r1, #76	@ 0x4c
 800370c:	187b      	adds	r3, r7, r1
 800370e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003710:	187b      	adds	r3, r7, r1
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	183b      	adds	r3, r7, r0
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b2d9      	uxtb	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003720:	400a      	ands	r2, r1
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	225e      	movs	r2, #94	@ 0x5e
 8003734:	5a9b      	ldrh	r3, [r3, r2]
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b299      	uxth	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	225e      	movs	r2, #94	@ 0x5e
 8003740:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	225e      	movs	r2, #94	@ 0x5e
 8003746:	5a9b      	ldrh	r3, [r3, r2]
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d000      	beq.n	8003750 <UART_RxISR_8BIT+0x6c>
 800374e:	e0a1      	b.n	8003894 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003750:	f3ef 8310 	mrs	r3, PRIMASK
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800375a:	2301      	movs	r3, #1
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003760:	f383 8810 	msr	PRIMASK, r3
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	494a      	ldr	r1, [pc, #296]	@ (800389c <UART_RxISR_8BIT+0x1b8>)
 8003772:	400a      	ands	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003782:	f3ef 8310 	mrs	r3, PRIMASK
 8003786:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
 800378c:	2301      	movs	r3, #1
 800378e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003792:	f383 8810 	msr	PRIMASK, r3
}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2101      	movs	r1, #1
 80037a4:	438a      	bics	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ae:	f383 8810 	msr	PRIMASK, r3
}
 80037b2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	228c      	movs	r2, #140	@ 0x8c
 80037b8:	2120      	movs	r1, #32
 80037ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a34      	ldr	r2, [pc, #208]	@ (80038a0 <UART_RxISR_8BIT+0x1bc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	2380      	movs	r3, #128	@ 0x80
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	4013      	ands	r3, r2
 80037de:	d018      	beq.n	8003812 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80037e6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ea:	2301      	movs	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4928      	ldr	r1, [pc, #160]	@ (80038a4 <UART_RxISR_8BIT+0x1c0>)
 8003802:	400a      	ands	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003808:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d12f      	bne.n	800387a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003820:	f3ef 8310 	mrs	r3, PRIMASK
 8003824:	60fb      	str	r3, [r7, #12]
  return(result);
 8003826:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800382a:	2301      	movs	r3, #1
 800382c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f383 8810 	msr	PRIMASK, r3
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2110      	movs	r1, #16
 8003842:	438a      	bics	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	2210      	movs	r2, #16
 800385a:	4013      	ands	r3, r2
 800385c:	2b10      	cmp	r3, #16
 800385e:	d103      	bne.n	8003868 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2210      	movs	r2, #16
 8003866:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	225c      	movs	r2, #92	@ 0x5c
 800386c:	5a9a      	ldrh	r2, [r3, r2]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f7ff f8d0 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003878:	e00c      	b.n	8003894 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f7fd f80b 	bl	8000898 <HAL_UART_RxCpltCallback>
}
 8003882:	e007      	b.n	8003894 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2108      	movs	r1, #8
 8003890:	430a      	orrs	r2, r1
 8003892:	619a      	str	r2, [r3, #24]
}
 8003894:	46c0      	nop			@ (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b014      	add	sp, #80	@ 0x50
 800389a:	bd80      	pop	{r7, pc}
 800389c:	fffffedf 	.word	0xfffffedf
 80038a0:	40008000 	.word	0x40008000
 80038a4:	fbffffff 	.word	0xfbffffff

080038a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b094      	sub	sp, #80	@ 0x50
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80038b0:	204e      	movs	r0, #78	@ 0x4e
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	2160      	movs	r1, #96	@ 0x60
 80038b8:	5a52      	ldrh	r2, [r2, r1]
 80038ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	228c      	movs	r2, #140	@ 0x8c
 80038c0:	589b      	ldr	r3, [r3, r2]
 80038c2:	2b22      	cmp	r3, #34	@ 0x22
 80038c4:	d000      	beq.n	80038c8 <UART_RxISR_16BIT+0x20>
 80038c6:	e0bf      	b.n	8003a48 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ce:	214c      	movs	r1, #76	@ 0x4c
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	183a      	adds	r2, r7, r0
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	4013      	ands	r3, r2
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	225e      	movs	r2, #94	@ 0x5e
 80038f8:	5a9b      	ldrh	r3, [r3, r2]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b299      	uxth	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	225e      	movs	r2, #94	@ 0x5e
 8003904:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	225e      	movs	r2, #94	@ 0x5e
 800390a:	5a9b      	ldrh	r3, [r3, r2]
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d000      	beq.n	8003914 <UART_RxISR_16BIT+0x6c>
 8003912:	e0a1      	b.n	8003a58 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003914:	f3ef 8310 	mrs	r3, PRIMASK
 8003918:	623b      	str	r3, [r7, #32]
  return(result);
 800391a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800391c:	647b      	str	r3, [r7, #68]	@ 0x44
 800391e:	2301      	movs	r3, #1
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	f383 8810 	msr	PRIMASK, r3
}
 8003928:	46c0      	nop			@ (mov r8, r8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	494a      	ldr	r1, [pc, #296]	@ (8003a60 <UART_RxISR_16BIT+0x1b8>)
 8003936:	400a      	ands	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	f383 8810 	msr	PRIMASK, r3
}
 8003944:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003950:	2301      	movs	r3, #1
 8003952:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	438a      	bics	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	228c      	movs	r2, #140	@ 0x8c
 800397c:	2120      	movs	r1, #32
 800397e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a34      	ldr	r2, [pc, #208]	@ (8003a64 <UART_RxISR_16BIT+0x1bc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01f      	beq.n	80039d6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	2380      	movs	r3, #128	@ 0x80
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	4013      	ands	r3, r2
 80039a2:	d018      	beq.n	80039d6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a4:	f3ef 8310 	mrs	r3, PRIMASK
 80039a8:	617b      	str	r3, [r7, #20]
  return(result);
 80039aa:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ae:	2301      	movs	r3, #1
 80039b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f383 8810 	msr	PRIMASK, r3
}
 80039b8:	46c0      	nop			@ (mov r8, r8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4928      	ldr	r1, [pc, #160]	@ (8003a68 <UART_RxISR_16BIT+0x1c0>)
 80039c6:	400a      	ands	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f383 8810 	msr	PRIMASK, r3
}
 80039d4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d12f      	bne.n	8003a3e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ea:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039ee:	2301      	movs	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			@ (mov r8, r8)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2110      	movs	r1, #16
 8003a06:	438a      	bics	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d103      	bne.n	8003a2c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	225c      	movs	r2, #92	@ 0x5c
 8003a30:	5a9a      	ldrh	r2, [r3, r2]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7fe ffee 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a3c:	e00c      	b.n	8003a58 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7fc ff29 	bl	8000898 <HAL_UART_RxCpltCallback>
}
 8003a46:	e007      	b.n	8003a58 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2108      	movs	r1, #8
 8003a54:	430a      	orrs	r2, r1
 8003a56:	619a      	str	r2, [r3, #24]
}
 8003a58:	46c0      	nop			@ (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b014      	add	sp, #80	@ 0x50
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	fffffedf 	.word	0xfffffedf
 8003a64:	40008000 	.word	0x40008000
 8003a68:	fbffffff 	.word	0xfbffffff

08003a6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b0a0      	sub	sp, #128	@ 0x80
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003a74:	237a      	movs	r3, #122	@ 0x7a
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	2160      	movs	r1, #96	@ 0x60
 8003a7c:	5a52      	ldrh	r2, [r2, r1]
 8003a7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	228c      	movs	r2, #140	@ 0x8c
 8003a9c:	589b      	ldr	r3, [r3, r2]
 8003a9e:	2b22      	cmp	r3, #34	@ 0x22
 8003aa0:	d000      	beq.n	8003aa4 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003aa2:	e16a      	b.n	8003d7a <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003aa4:	236e      	movs	r3, #110	@ 0x6e
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	2168      	movs	r1, #104	@ 0x68
 8003aac:	5a52      	ldrh	r2, [r2, r1]
 8003aae:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ab0:	e111      	b.n	8003cd6 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ab8:	216c      	movs	r1, #108	@ 0x6c
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	237a      	movs	r3, #122	@ 0x7a
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b2d9      	uxtb	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	225e      	movs	r2, #94	@ 0x5e
 8003ae4:	5a9b      	ldrh	r3, [r3, r2]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b299      	uxth	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	225e      	movs	r2, #94	@ 0x5e
 8003af0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003afa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003afc:	2207      	movs	r2, #7
 8003afe:	4013      	ands	r3, r2
 8003b00:	d049      	beq.n	8003b96 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b04:	2201      	movs	r2, #1
 8003b06:	4013      	ands	r3, r2
 8003b08:	d010      	beq.n	8003b2c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003b0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b0c:	2380      	movs	r3, #128	@ 0x80
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2290      	movs	r2, #144	@ 0x90
 8003b20:	589b      	ldr	r3, [r3, r2]
 8003b22:	2201      	movs	r2, #1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2190      	movs	r1, #144	@ 0x90
 8003b2a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b2e:	2202      	movs	r2, #2
 8003b30:	4013      	ands	r3, r2
 8003b32:	d00f      	beq.n	8003b54 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003b34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b36:	2201      	movs	r2, #1
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2202      	movs	r2, #2
 8003b42:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2290      	movs	r2, #144	@ 0x90
 8003b48:	589b      	ldr	r3, [r3, r2]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2190      	movs	r1, #144	@ 0x90
 8003b52:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d00f      	beq.n	8003b7c <UART_RxISR_8BIT_FIFOEN+0x110>
 8003b5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00b      	beq.n	8003b7c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2290      	movs	r2, #144	@ 0x90
 8003b70:	589b      	ldr	r3, [r3, r2]
 8003b72:	2202      	movs	r2, #2
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2190      	movs	r1, #144	@ 0x90
 8003b7a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2290      	movs	r2, #144	@ 0x90
 8003b80:	589b      	ldr	r3, [r3, r2]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7fe ff3d 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2290      	movs	r2, #144	@ 0x90
 8003b92:	2100      	movs	r1, #0
 8003b94:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	225e      	movs	r2, #94	@ 0x5e
 8003b9a:	5a9b      	ldrh	r3, [r3, r2]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d000      	beq.n	8003ba4 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003ba2:	e098      	b.n	8003cd6 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8003baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bae:	2301      	movs	r3, #1
 8003bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4973      	ldr	r1, [pc, #460]	@ (8003d94 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bcc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bda:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8003bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bde:	667b      	str	r3, [r7, #100]	@ 0x64
 8003be0:	2301      	movs	r3, #1
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4968      	ldr	r1, [pc, #416]	@ (8003d98 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c02:	f383 8810 	msr	PRIMASK, r3
}
 8003c06:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	228c      	movs	r2, #140	@ 0x8c
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5e      	ldr	r2, [pc, #376]	@ (8003d9c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01f      	beq.n	8003c66 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	2380      	movs	r3, #128	@ 0x80
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	4013      	ands	r3, r2
 8003c32:	d018      	beq.n	8003c66 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c3e:	2301      	movs	r3, #1
 8003c40:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			@ (mov r8, r8)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4952      	ldr	r1, [pc, #328]	@ (8003da0 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8003c56:	400a      	ands	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d12f      	bne.n	8003cce <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c74:	f3ef 8310 	mrs	r3, PRIMASK
 8003c78:	623b      	str	r3, [r7, #32]
  return(result);
 8003c7a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c7e:	2301      	movs	r3, #1
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			@ (mov r8, r8)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2110      	movs	r1, #16
 8003c96:	438a      	bics	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2210      	movs	r2, #16
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d103      	bne.n	8003cbc <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	225c      	movs	r2, #92	@ 0x5c
 8003cc0:	5a9a      	ldrh	r2, [r3, r2]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0011      	movs	r1, r2
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7fe fea6 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
 8003ccc:	e003      	b.n	8003cd6 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7fc fde1 	bl	8000898 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003cd6:	236e      	movs	r3, #110	@ 0x6e
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <UART_RxISR_8BIT_FIFOEN+0x27e>
 8003ce0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d000      	beq.n	8003cea <UART_RxISR_8BIT_FIFOEN+0x27e>
 8003ce8:	e6e3      	b.n	8003ab2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003cea:	205a      	movs	r0, #90	@ 0x5a
 8003cec:	183b      	adds	r3, r7, r0
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	215e      	movs	r1, #94	@ 0x5e
 8003cf2:	5a52      	ldrh	r2, [r2, r1]
 8003cf4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003cf6:	0001      	movs	r1, r0
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d044      	beq.n	8003d8a <UART_RxISR_8BIT_FIFOEN+0x31e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2268      	movs	r2, #104	@ 0x68
 8003d04:	5a9b      	ldrh	r3, [r3, r2]
 8003d06:	187a      	adds	r2, r7, r1
 8003d08:	8812      	ldrh	r2, [r2, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d23d      	bcs.n	8003d8a <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d14:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d18:	2301      	movs	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f383 8810 	msr	PRIMASK, r3
}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	491d      	ldr	r1, [pc, #116]	@ (8003da4 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a19      	ldr	r2, [pc, #100]	@ (8003da8 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8003d44:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	617b      	str	r3, [r7, #20]
  return(result);
 8003d4c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d50:	2301      	movs	r3, #1
 8003d52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2120      	movs	r1, #32
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d78:	e007      	b.n	8003d8a <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2108      	movs	r1, #8
 8003d86:	430a      	orrs	r2, r1
 8003d88:	619a      	str	r2, [r3, #24]
}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b020      	add	sp, #128	@ 0x80
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	fffffeff 	.word	0xfffffeff
 8003d98:	effffffe 	.word	0xeffffffe
 8003d9c:	40008000 	.word	0x40008000
 8003da0:	fbffffff 	.word	0xfbffffff
 8003da4:	efffffff 	.word	0xefffffff
 8003da8:	080036e5 	.word	0x080036e5

08003dac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b0a2      	sub	sp, #136	@ 0x88
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003db4:	2382      	movs	r3, #130	@ 0x82
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	2160      	movs	r1, #96	@ 0x60
 8003dbc:	5a52      	ldrh	r2, [r2, r1]
 8003dbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	2284      	movs	r2, #132	@ 0x84
 8003dc8:	18ba      	adds	r2, r7, r2
 8003dca:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	228c      	movs	r2, #140	@ 0x8c
 8003de0:	589b      	ldr	r3, [r3, r2]
 8003de2:	2b22      	cmp	r3, #34	@ 0x22
 8003de4:	d000      	beq.n	8003de8 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003de6:	e174      	b.n	80040d2 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003de8:	2376      	movs	r3, #118	@ 0x76
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	2168      	movs	r1, #104	@ 0x68
 8003df0:	5a52      	ldrh	r2, [r2, r1]
 8003df2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003df4:	e119      	b.n	800402a <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dfc:	2174      	movs	r1, #116	@ 0x74
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e06:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	2282      	movs	r2, #130	@ 0x82
 8003e0c:	18ba      	adds	r2, r7, r2
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	8812      	ldrh	r2, [r2, #0]
 8003e12:	4013      	ands	r3, r2
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	225e      	movs	r2, #94	@ 0x5e
 8003e28:	5a9b      	ldrh	r3, [r3, r2]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b299      	uxth	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	225e      	movs	r2, #94	@ 0x5e
 8003e34:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	2184      	movs	r1, #132	@ 0x84
 8003e3e:	187a      	adds	r2, r7, r1
 8003e40:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003e42:	187b      	adds	r3, r7, r1
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2207      	movs	r2, #7
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d04e      	beq.n	8003eea <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	d010      	beq.n	8003e78 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8003e56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003e58:	2380      	movs	r3, #128	@ 0x80
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2290      	movs	r2, #144	@ 0x90
 8003e6c:	589b      	ldr	r3, [r3, r2]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2190      	movs	r1, #144	@ 0x90
 8003e76:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e78:	2384      	movs	r3, #132	@ 0x84
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	d00f      	beq.n	8003ea4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e86:	2201      	movs	r2, #1
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2202      	movs	r2, #2
 8003e92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2290      	movs	r2, #144	@ 0x90
 8003e98:	589b      	ldr	r3, [r3, r2]
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2190      	movs	r1, #144	@ 0x90
 8003ea2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea4:	2384      	movs	r3, #132	@ 0x84
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d00f      	beq.n	8003ed0 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003eb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2290      	movs	r2, #144	@ 0x90
 8003ec4:	589b      	ldr	r3, [r3, r2]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2190      	movs	r1, #144	@ 0x90
 8003ece:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2290      	movs	r2, #144	@ 0x90
 8003ed4:	589b      	ldr	r3, [r3, r2]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fe fd93 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2290      	movs	r2, #144	@ 0x90
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	225e      	movs	r2, #94	@ 0x5e
 8003eee:	5a9b      	ldrh	r3, [r3, r2]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d000      	beq.n	8003ef8 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003ef6:	e098      	b.n	800402a <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8003efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f02:	2301      	movs	r3, #1
 8003f04:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f08:	f383 8810 	msr	PRIMASK, r3
}
 8003f0c:	46c0      	nop			@ (mov r8, r8)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4974      	ldr	r1, [pc, #464]	@ (80040ec <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f20:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f24:	f383 8810 	msr	PRIMASK, r3
}
 8003f28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f34:	2301      	movs	r3, #1
 8003f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f3a:	f383 8810 	msr	PRIMASK, r3
}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4969      	ldr	r1, [pc, #420]	@ (80040f0 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f52:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	228c      	movs	r2, #140	@ 0x8c
 8003f60:	2120      	movs	r1, #32
 8003f62:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a5f      	ldr	r2, [pc, #380]	@ (80040f4 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	2380      	movs	r3, #128	@ 0x80
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	4013      	ands	r3, r2
 8003f86:	d018      	beq.n	8003fba <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f90:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f92:	2301      	movs	r3, #1
 8003f94:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4953      	ldr	r1, [pc, #332]	@ (80040f8 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8003faa:	400a      	ands	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d12f      	bne.n	8004022 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2110      	movs	r1, #16
 8003fea:	438a      	bics	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff4:	f383 8810 	msr	PRIMASK, r3
}
 8003ff8:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	2210      	movs	r2, #16
 8004002:	4013      	ands	r3, r2
 8004004:	2b10      	cmp	r3, #16
 8004006:	d103      	bne.n	8004010 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	225c      	movs	r2, #92	@ 0x5c
 8004014:	5a9a      	ldrh	r2, [r3, r2]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0011      	movs	r1, r2
 800401a:	0018      	movs	r0, r3
 800401c:	f7fe fcfc 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
 8004020:	e003      	b.n	800402a <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f7fc fc37 	bl	8000898 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800402a:	2376      	movs	r3, #118	@ 0x76
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d006      	beq.n	8004042 <UART_RxISR_16BIT_FIFOEN+0x296>
 8004034:	2384      	movs	r3, #132	@ 0x84
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2220      	movs	r2, #32
 800403c:	4013      	ands	r3, r2
 800403e:	d000      	beq.n	8004042 <UART_RxISR_16BIT_FIFOEN+0x296>
 8004040:	e6d9      	b.n	8003df6 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004042:	205e      	movs	r0, #94	@ 0x5e
 8004044:	183b      	adds	r3, r7, r0
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	215e      	movs	r1, #94	@ 0x5e
 800404a:	5a52      	ldrh	r2, [r2, r1]
 800404c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800404e:	0001      	movs	r1, r0
 8004050:	187b      	adds	r3, r7, r1
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d044      	beq.n	80040e2 <UART_RxISR_16BIT_FIFOEN+0x336>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2268      	movs	r2, #104	@ 0x68
 800405c:	5a9b      	ldrh	r3, [r3, r2]
 800405e:	187a      	adds	r2, r7, r1
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d23d      	bcs.n	80040e2 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004066:	f3ef 8310 	mrs	r3, PRIMASK
 800406a:	60fb      	str	r3, [r7, #12]
  return(result);
 800406c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800406e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004070:	2301      	movs	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			@ (mov r8, r8)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	491d      	ldr	r1, [pc, #116]	@ (80040fc <UART_RxISR_16BIT_FIFOEN+0x350>)
 8004088:	400a      	ands	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800408e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f383 8810 	msr	PRIMASK, r3
}
 8004096:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a19      	ldr	r2, [pc, #100]	@ (8004100 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800409c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409e:	f3ef 8310 	mrs	r3, PRIMASK
 80040a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80040a4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a8:	2301      	movs	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2120      	movs	r1, #32
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040d0:	e007      	b.n	80040e2 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2108      	movs	r1, #8
 80040de:	430a      	orrs	r2, r1
 80040e0:	619a      	str	r2, [r3, #24]
}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b022      	add	sp, #136	@ 0x88
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			@ (mov r8, r8)
 80040ec:	fffffeff 	.word	0xfffffeff
 80040f0:	effffffe 	.word	0xeffffffe
 80040f4:	40008000 	.word	0x40008000
 80040f8:	fbffffff 	.word	0xfbffffff
 80040fc:	efffffff 	.word	0xefffffff
 8004100:	080038a9 	.word	0x080038a9

08004104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800410c:	46c0      	nop			@ (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800412c:	46c0      	nop			@ (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2284      	movs	r2, #132	@ 0x84
 8004140:	5c9b      	ldrb	r3, [r3, r2]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_UARTEx_DisableFifoMode+0x16>
 8004146:	2302      	movs	r3, #2
 8004148:	e027      	b.n	800419a <HAL_UARTEx_DisableFifoMode+0x66>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2284      	movs	r2, #132	@ 0x84
 800414e:	2101      	movs	r1, #1
 8004150:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2288      	movs	r2, #136	@ 0x88
 8004156:	2124      	movs	r1, #36	@ 0x24
 8004158:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2101      	movs	r1, #1
 800416e:	438a      	bics	r2, r1
 8004170:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a0b      	ldr	r2, [pc, #44]	@ (80041a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004176:	4013      	ands	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2288      	movs	r2, #136	@ 0x88
 800418c:	2120      	movs	r1, #32
 800418e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2284      	movs	r2, #132	@ 0x84
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b004      	add	sp, #16
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	dfffffff 	.word	0xdfffffff

080041a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2284      	movs	r2, #132	@ 0x84
 80041b6:	5c9b      	ldrb	r3, [r3, r2]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041bc:	2302      	movs	r3, #2
 80041be:	e02e      	b.n	800421e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2284      	movs	r2, #132	@ 0x84
 80041c4:	2101      	movs	r1, #1
 80041c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2288      	movs	r2, #136	@ 0x88
 80041cc:	2124      	movs	r1, #36	@ 0x24
 80041ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	438a      	bics	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	08d9      	lsrs	r1, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 f854 	bl	80042ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2288      	movs	r2, #136	@ 0x88
 8004210:	2120      	movs	r1, #32
 8004212:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2284      	movs	r2, #132	@ 0x84
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b004      	add	sp, #16
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2284      	movs	r2, #132	@ 0x84
 8004236:	5c9b      	ldrb	r3, [r3, r2]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800423c:	2302      	movs	r3, #2
 800423e:	e02f      	b.n	80042a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2284      	movs	r2, #132	@ 0x84
 8004244:	2101      	movs	r1, #1
 8004246:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2288      	movs	r2, #136	@ 0x88
 800424c:	2124      	movs	r1, #36	@ 0x24
 800424e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2101      	movs	r1, #1
 8004264:	438a      	bics	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4a0e      	ldr	r2, [pc, #56]	@ (80042a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	0018      	movs	r0, r3
 8004282:	f000 f813 	bl	80042ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2288      	movs	r2, #136	@ 0x88
 8004292:	2120      	movs	r1, #32
 8004294:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2284      	movs	r2, #132	@ 0x84
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	0018      	movs	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b004      	add	sp, #16
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	f1ffffff 	.word	0xf1ffffff

080042ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d108      	bne.n	80042ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	226a      	movs	r2, #106	@ 0x6a
 80042c0:	2101      	movs	r1, #1
 80042c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2268      	movs	r2, #104	@ 0x68
 80042c8:	2101      	movs	r1, #1
 80042ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042cc:	e043      	b.n	8004356 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042ce:	260f      	movs	r6, #15
 80042d0:	19bb      	adds	r3, r7, r6
 80042d2:	2208      	movs	r2, #8
 80042d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042d6:	200e      	movs	r0, #14
 80042d8:	183b      	adds	r3, r7, r0
 80042da:	2208      	movs	r2, #8
 80042dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	0e5b      	lsrs	r3, r3, #25
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	240d      	movs	r4, #13
 80042ea:	193b      	adds	r3, r7, r4
 80042ec:	2107      	movs	r1, #7
 80042ee:	400a      	ands	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0f5b      	lsrs	r3, r3, #29
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	250c      	movs	r5, #12
 80042fe:	197b      	adds	r3, r7, r5
 8004300:	2107      	movs	r1, #7
 8004302:	400a      	ands	r2, r1
 8004304:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004306:	183b      	adds	r3, r7, r0
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	197a      	adds	r2, r7, r5
 800430c:	7812      	ldrb	r2, [r2, #0]
 800430e:	4914      	ldr	r1, [pc, #80]	@ (8004360 <UARTEx_SetNbDataToProcess+0xb4>)
 8004310:	5c8a      	ldrb	r2, [r1, r2]
 8004312:	435a      	muls	r2, r3
 8004314:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004316:	197b      	adds	r3, r7, r5
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	4a12      	ldr	r2, [pc, #72]	@ (8004364 <UARTEx_SetNbDataToProcess+0xb8>)
 800431c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800431e:	0019      	movs	r1, r3
 8004320:	f7fb ff7a 	bl	8000218 <__divsi3>
 8004324:	0003      	movs	r3, r0
 8004326:	b299      	uxth	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	226a      	movs	r2, #106	@ 0x6a
 800432c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800432e:	19bb      	adds	r3, r7, r6
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	193a      	adds	r2, r7, r4
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	490a      	ldr	r1, [pc, #40]	@ (8004360 <UARTEx_SetNbDataToProcess+0xb4>)
 8004338:	5c8a      	ldrb	r2, [r1, r2]
 800433a:	435a      	muls	r2, r3
 800433c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800433e:	193b      	adds	r3, r7, r4
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	4a08      	ldr	r2, [pc, #32]	@ (8004364 <UARTEx_SetNbDataToProcess+0xb8>)
 8004344:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004346:	0019      	movs	r1, r3
 8004348:	f7fb ff66 	bl	8000218 <__divsi3>
 800434c:	0003      	movs	r3, r0
 800434e:	b299      	uxth	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2268      	movs	r2, #104	@ 0x68
 8004354:	5299      	strh	r1, [r3, r2]
}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b005      	add	sp, #20
 800435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	08004450 	.word	0x08004450
 8004364:	08004458 	.word	0x08004458

08004368 <memset>:
 8004368:	0003      	movs	r3, r0
 800436a:	1882      	adds	r2, r0, r2
 800436c:	4293      	cmp	r3, r2
 800436e:	d100      	bne.n	8004372 <memset+0xa>
 8004370:	4770      	bx	lr
 8004372:	7019      	strb	r1, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	e7f9      	b.n	800436c <memset+0x4>

08004378 <__libc_init_array>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	2600      	movs	r6, #0
 800437c:	4c0c      	ldr	r4, [pc, #48]	@ (80043b0 <__libc_init_array+0x38>)
 800437e:	4d0d      	ldr	r5, [pc, #52]	@ (80043b4 <__libc_init_array+0x3c>)
 8004380:	1b64      	subs	r4, r4, r5
 8004382:	10a4      	asrs	r4, r4, #2
 8004384:	42a6      	cmp	r6, r4
 8004386:	d109      	bne.n	800439c <__libc_init_array+0x24>
 8004388:	2600      	movs	r6, #0
 800438a:	f000 f819 	bl	80043c0 <_init>
 800438e:	4c0a      	ldr	r4, [pc, #40]	@ (80043b8 <__libc_init_array+0x40>)
 8004390:	4d0a      	ldr	r5, [pc, #40]	@ (80043bc <__libc_init_array+0x44>)
 8004392:	1b64      	subs	r4, r4, r5
 8004394:	10a4      	asrs	r4, r4, #2
 8004396:	42a6      	cmp	r6, r4
 8004398:	d105      	bne.n	80043a6 <__libc_init_array+0x2e>
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	00b3      	lsls	r3, r6, #2
 800439e:	58eb      	ldr	r3, [r5, r3]
 80043a0:	4798      	blx	r3
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7ee      	b.n	8004384 <__libc_init_array+0xc>
 80043a6:	00b3      	lsls	r3, r6, #2
 80043a8:	58eb      	ldr	r3, [r5, r3]
 80043aa:	4798      	blx	r3
 80043ac:	3601      	adds	r6, #1
 80043ae:	e7f2      	b.n	8004396 <__libc_init_array+0x1e>
 80043b0:	08004468 	.word	0x08004468
 80043b4:	08004468 	.word	0x08004468
 80043b8:	0800446c 	.word	0x0800446c
 80043bc:	08004468 	.word	0x08004468

080043c0 <_init>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr

080043cc <_fini>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr
